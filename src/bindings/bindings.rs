/* automatically generated by rust-bindgen 0.70.1 */

pub const XATOM_H: u32 = 1;
pub const XlibSpecificationRelease: u32 = 6;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const X_PROTOCOL: u32 = 11;
pub const X_PROTOCOL_REVISION: u32 = 0;
pub const None: u32 = 0;
pub const ParentRelative: u32 = 1;
pub const CopyFromParent: u32 = 0;
pub const PointerWindow: u32 = 0;
pub const InputFocus: u32 = 1;
pub const PointerRoot: u32 = 1;
pub const AnyPropertyType: u32 = 0;
pub const AnyKey: u32 = 0;
pub const AnyButton: u32 = 0;
pub const AllTemporary: u32 = 0;
pub const CurrentTime: u32 = 0;
pub const NoSymbol: u32 = 0;
pub const NoEventMask: u32 = 0;
pub const KeyPressMask: u32 = 1;
pub const KeyReleaseMask: u32 = 2;
pub const ButtonPressMask: u32 = 4;
pub const ButtonReleaseMask: u32 = 8;
pub const EnterWindowMask: u32 = 16;
pub const LeaveWindowMask: u32 = 32;
pub const PointerMotionMask: u32 = 64;
pub const PointerMotionHintMask: u32 = 128;
pub const Button1MotionMask: u32 = 256;
pub const Button2MotionMask: u32 = 512;
pub const Button3MotionMask: u32 = 1024;
pub const Button4MotionMask: u32 = 2048;
pub const Button5MotionMask: u32 = 4096;
pub const ButtonMotionMask: u32 = 8192;
pub const KeymapStateMask: u32 = 16384;
pub const ExposureMask: u32 = 32768;
pub const VisibilityChangeMask: u32 = 65536;
pub const StructureNotifyMask: u32 = 131072;
pub const ResizeRedirectMask: u32 = 262144;
pub const SubstructureNotifyMask: u32 = 524288;
pub const SubstructureRedirectMask: u32 = 1048576;
pub const FocusChangeMask: u32 = 2097152;
pub const PropertyChangeMask: u32 = 4194304;
pub const ColormapChangeMask: u32 = 8388608;
pub const OwnerGrabButtonMask: u32 = 16777216;
pub const KeyPress: u32 = 2;
pub const KeyRelease: u32 = 3;
pub const ButtonPress: u32 = 4;
pub const ButtonRelease: u32 = 5;
pub const MotionNotify: u32 = 6;
pub const EnterNotify: u32 = 7;
pub const LeaveNotify: u32 = 8;
pub const FocusIn: u32 = 9;
pub const FocusOut: u32 = 10;
pub const KeymapNotify: u32 = 11;
pub const Expose: u32 = 12;
pub const GraphicsExpose: u32 = 13;
pub const NoExpose: u32 = 14;
pub const VisibilityNotify: u32 = 15;
pub const CreateNotify: u32 = 16;
pub const DestroyNotify: u32 = 17;
pub const UnmapNotify: u32 = 18;
pub const MapNotify: u32 = 19;
pub const MapRequest: u32 = 20;
pub const ReparentNotify: u32 = 21;
pub const ConfigureNotify: u32 = 22;
pub const ConfigureRequest: u32 = 23;
pub const GravityNotify: u32 = 24;
pub const ResizeRequest: u32 = 25;
pub const CirculateNotify: u32 = 26;
pub const CirculateRequest: u32 = 27;
pub const PropertyNotify: u32 = 28;
pub const SelectionClear: u32 = 29;
pub const SelectionRequest: u32 = 30;
pub const SelectionNotify: u32 = 31;
pub const ColormapNotify: u32 = 32;
pub const ClientMessage: u32 = 33;
pub const MappingNotify: u32 = 34;
pub const GenericEvent: u32 = 35;
pub const LASTEvent: u32 = 36;
pub const ShiftMask: u32 = 1;
pub const LockMask: u32 = 2;
pub const ControlMask: u32 = 4;
pub const Mod1Mask: u32 = 8;
pub const Mod2Mask: u32 = 16;
pub const Mod3Mask: u32 = 32;
pub const Mod4Mask: u32 = 64;
pub const Mod5Mask: u32 = 128;
pub const ShiftMapIndex: u32 = 0;
pub const LockMapIndex: u32 = 1;
pub const ControlMapIndex: u32 = 2;
pub const Mod1MapIndex: u32 = 3;
pub const Mod2MapIndex: u32 = 4;
pub const Mod3MapIndex: u32 = 5;
pub const Mod4MapIndex: u32 = 6;
pub const Mod5MapIndex: u32 = 7;
pub const Button1Mask: u32 = 256;
pub const Button2Mask: u32 = 512;
pub const Button3Mask: u32 = 1024;
pub const Button4Mask: u32 = 2048;
pub const Button5Mask: u32 = 4096;
pub const AnyModifier: u32 = 32768;
pub const Button1: u32 = 1;
pub const Button2: u32 = 2;
pub const Button3: u32 = 3;
pub const Button4: u32 = 4;
pub const Button5: u32 = 5;
pub const NotifyNormal: u32 = 0;
pub const NotifyGrab: u32 = 1;
pub const NotifyUngrab: u32 = 2;
pub const NotifyWhileGrabbed: u32 = 3;
pub const NotifyHint: u32 = 1;
pub const NotifyAncestor: u32 = 0;
pub const NotifyVirtual: u32 = 1;
pub const NotifyInferior: u32 = 2;
pub const NotifyNonlinear: u32 = 3;
pub const NotifyNonlinearVirtual: u32 = 4;
pub const NotifyPointer: u32 = 5;
pub const NotifyPointerRoot: u32 = 6;
pub const NotifyDetailNone: u32 = 7;
pub const VisibilityUnobscured: u32 = 0;
pub const VisibilityPartiallyObscured: u32 = 1;
pub const VisibilityFullyObscured: u32 = 2;
pub const PlaceOnTop: u32 = 0;
pub const PlaceOnBottom: u32 = 1;
pub const FamilyInternet: u32 = 0;
pub const FamilyDECnet: u32 = 1;
pub const FamilyChaos: u32 = 2;
pub const FamilyInternet6: u32 = 6;
pub const FamilyServerInterpreted: u32 = 5;
pub const PropertyNewValue: u32 = 0;
pub const PropertyDelete: u32 = 1;
pub const ColormapUninstalled: u32 = 0;
pub const ColormapInstalled: u32 = 1;
pub const GrabModeSync: u32 = 0;
pub const GrabModeAsync: u32 = 1;
pub const GrabSuccess: u32 = 0;
pub const AlreadyGrabbed: u32 = 1;
pub const GrabInvalidTime: u32 = 2;
pub const GrabNotViewable: u32 = 3;
pub const GrabFrozen: u32 = 4;
pub const AsyncPointer: u32 = 0;
pub const SyncPointer: u32 = 1;
pub const ReplayPointer: u32 = 2;
pub const AsyncKeyboard: u32 = 3;
pub const SyncKeyboard: u32 = 4;
pub const ReplayKeyboard: u32 = 5;
pub const AsyncBoth: u32 = 6;
pub const SyncBoth: u32 = 7;
pub const RevertToParent: u32 = 2;
pub const Success: u32 = 0;
pub const BadRequest: u32 = 1;
pub const BadValue: u32 = 2;
pub const BadWindow: u32 = 3;
pub const BadPixmap: u32 = 4;
pub const BadAtom: u32 = 5;
pub const BadCursor: u32 = 6;
pub const BadFont: u32 = 7;
pub const BadMatch: u32 = 8;
pub const BadDrawable: u32 = 9;
pub const BadAccess: u32 = 10;
pub const BadAlloc: u32 = 11;
pub const BadColor: u32 = 12;
pub const BadGC: u32 = 13;
pub const BadIDChoice: u32 = 14;
pub const BadName: u32 = 15;
pub const BadLength: u32 = 16;
pub const BadImplementation: u32 = 17;
pub const FirstExtensionError: u32 = 128;
pub const LastExtensionError: u32 = 255;
pub const InputOutput: u32 = 1;
pub const InputOnly: u32 = 2;
pub const CWBackPixmap: u32 = 1;
pub const CWBackPixel: u32 = 2;
pub const CWBorderPixmap: u32 = 4;
pub const CWBorderPixel: u32 = 8;
pub const CWBitGravity: u32 = 16;
pub const CWWinGravity: u32 = 32;
pub const CWBackingStore: u32 = 64;
pub const CWBackingPlanes: u32 = 128;
pub const CWBackingPixel: u32 = 256;
pub const CWOverrideRedirect: u32 = 512;
pub const CWSaveUnder: u32 = 1024;
pub const CWEventMask: u32 = 2048;
pub const CWDontPropagate: u32 = 4096;
pub const CWColormap: u32 = 8192;
pub const CWCursor: u32 = 16384;
pub const CWX: u32 = 1;
pub const CWY: u32 = 2;
pub const CWWidth: u32 = 4;
pub const CWHeight: u32 = 8;
pub const CWBorderWidth: u32 = 16;
pub const CWSibling: u32 = 32;
pub const CWStackMode: u32 = 64;
pub const ForgetGravity: u32 = 0;
pub const NorthWestGravity: u32 = 1;
pub const NorthGravity: u32 = 2;
pub const NorthEastGravity: u32 = 3;
pub const WestGravity: u32 = 4;
pub const CenterGravity: u32 = 5;
pub const EastGravity: u32 = 6;
pub const SouthWestGravity: u32 = 7;
pub const SouthGravity: u32 = 8;
pub const SouthEastGravity: u32 = 9;
pub const StaticGravity: u32 = 10;
pub const UnmapGravity: u32 = 0;
pub const NotUseful: u32 = 0;
pub const WhenMapped: u32 = 1;
pub const Always: u32 = 2;
pub const IsUnmapped: u32 = 0;
pub const IsUnviewable: u32 = 1;
pub const IsViewable: u32 = 2;
pub const SetModeInsert: u32 = 0;
pub const SetModeDelete: u32 = 1;
pub const DestroyAll: u32 = 0;
pub const RetainPermanent: u32 = 1;
pub const RetainTemporary: u32 = 2;
pub const Above: u32 = 0;
pub const Below: u32 = 1;
pub const TopIf: u32 = 2;
pub const BottomIf: u32 = 3;
pub const Opposite: u32 = 4;
pub const RaiseLowest: u32 = 0;
pub const LowerHighest: u32 = 1;
pub const PropModeReplace: u32 = 0;
pub const PropModePrepend: u32 = 1;
pub const PropModeAppend: u32 = 2;
pub const GXclear: u32 = 0;
pub const GXand: u32 = 1;
pub const GXandReverse: u32 = 2;
pub const GXcopy: u32 = 3;
pub const GXandInverted: u32 = 4;
pub const GXnoop: u32 = 5;
pub const GXxor: u32 = 6;
pub const GXor: u32 = 7;
pub const GXnor: u32 = 8;
pub const GXequiv: u32 = 9;
pub const GXinvert: u32 = 10;
pub const GXorReverse: u32 = 11;
pub const GXcopyInverted: u32 = 12;
pub const GXorInverted: u32 = 13;
pub const GXnand: u32 = 14;
pub const GXset: u32 = 15;
pub const LineSolid: u32 = 0;
pub const LineOnOffDash: u32 = 1;
pub const LineDoubleDash: u32 = 2;
pub const CapNotLast: u32 = 0;
pub const CapButt: u32 = 1;
pub const CapRound: u32 = 2;
pub const CapProjecting: u32 = 3;
pub const JoinMiter: u32 = 0;
pub const JoinRound: u32 = 1;
pub const JoinBevel: u32 = 2;
pub const FillSolid: u32 = 0;
pub const FillTiled: u32 = 1;
pub const FillStippled: u32 = 2;
pub const FillOpaqueStippled: u32 = 3;
pub const EvenOddRule: u32 = 0;
pub const WindingRule: u32 = 1;
pub const ClipByChildren: u32 = 0;
pub const IncludeInferiors: u32 = 1;
pub const Unsorted: u32 = 0;
pub const YSorted: u32 = 1;
pub const YXSorted: u32 = 2;
pub const YXBanded: u32 = 3;
pub const CoordModeOrigin: u32 = 0;
pub const CoordModePrevious: u32 = 1;
pub const Complex: u32 = 0;
pub const Nonconvex: u32 = 1;
pub const Convex: u32 = 2;
pub const ArcChord: u32 = 0;
pub const ArcPieSlice: u32 = 1;
pub const GCFunction: u32 = 1;
pub const GCPlaneMask: u32 = 2;
pub const GCForeground: u32 = 4;
pub const GCBackground: u32 = 8;
pub const GCLineWidth: u32 = 16;
pub const GCLineStyle: u32 = 32;
pub const GCCapStyle: u32 = 64;
pub const GCJoinStyle: u32 = 128;
pub const GCFillStyle: u32 = 256;
pub const GCFillRule: u32 = 512;
pub const GCTile: u32 = 1024;
pub const GCStipple: u32 = 2048;
pub const GCTileStipXOrigin: u32 = 4096;
pub const GCTileStipYOrigin: u32 = 8192;
pub const GCFont: u32 = 16384;
pub const GCSubwindowMode: u32 = 32768;
pub const GCGraphicsExposures: u32 = 65536;
pub const GCClipXOrigin: u32 = 131072;
pub const GCClipYOrigin: u32 = 262144;
pub const GCClipMask: u32 = 524288;
pub const GCDashOffset: u32 = 1048576;
pub const GCDashList: u32 = 2097152;
pub const GCArcMode: u32 = 4194304;
pub const GCLastBit: u32 = 22;
pub const FontLeftToRight: u32 = 0;
pub const FontRightToLeft: u32 = 1;
pub const FontChange: u32 = 255;
pub const XYBitmap: u32 = 0;
pub const XYPixmap: u32 = 1;
pub const ZPixmap: u32 = 2;
pub const AllocNone: u32 = 0;
pub const AllocAll: u32 = 1;
pub const DoRed: u32 = 1;
pub const DoGreen: u32 = 2;
pub const DoBlue: u32 = 4;
pub const CursorShape: u32 = 0;
pub const TileShape: u32 = 1;
pub const StippleShape: u32 = 2;
pub const AutoRepeatModeOff: u32 = 0;
pub const AutoRepeatModeOn: u32 = 1;
pub const AutoRepeatModeDefault: u32 = 2;
pub const LedModeOff: u32 = 0;
pub const LedModeOn: u32 = 1;
pub const KBKeyClickPercent: u32 = 1;
pub const KBBellPercent: u32 = 2;
pub const KBBellPitch: u32 = 4;
pub const KBBellDuration: u32 = 8;
pub const KBLed: u32 = 16;
pub const KBLedMode: u32 = 32;
pub const KBKey: u32 = 64;
pub const KBAutoRepeatMode: u32 = 128;
pub const MappingSuccess: u32 = 0;
pub const MappingBusy: u32 = 1;
pub const MappingFailed: u32 = 2;
pub const MappingModifier: u32 = 0;
pub const MappingKeyboard: u32 = 1;
pub const MappingPointer: u32 = 2;
pub const DontPreferBlanking: u32 = 0;
pub const PreferBlanking: u32 = 1;
pub const DefaultBlanking: u32 = 2;
pub const DisableScreenSaver: u32 = 0;
pub const DisableScreenInterval: u32 = 0;
pub const DontAllowExposures: u32 = 0;
pub const AllowExposures: u32 = 1;
pub const DefaultExposures: u32 = 2;
pub const ScreenSaverReset: u32 = 0;
pub const ScreenSaverActive: u32 = 1;
pub const HostInsert: u32 = 0;
pub const HostDelete: u32 = 1;
pub const EnableAccess: u32 = 1;
pub const DisableAccess: u32 = 0;
pub const StaticGray: u32 = 0;
pub const GrayScale: u32 = 1;
pub const StaticColor: u32 = 2;
pub const PseudoColor: u32 = 3;
pub const TrueColor: u32 = 4;
pub const DirectColor: u32 = 5;
pub const LSBFirst: u32 = 0;
pub const MSBFirst: u32 = 1;
pub const NeedFunctionPrototypes: u32 = 1;
pub const NeedVarargsPrototypes: u32 = 1;
pub const NeedNestedPrototypes: u32 = 1;
pub const FUNCPROTO: u32 = 15;
pub const NeedWidePrototypes: u32 = 0;
pub const X_HAVE_UTF8_STRING: u32 = 1;
pub const True: u32 = 1;
pub const False: u32 = 0;
pub const QueuedAlready: u32 = 0;
pub const QueuedAfterReading: u32 = 1;
pub const QueuedAfterFlush: u32 = 2;
pub const XNRequiredCharSet: &[u8; 16] = b"requiredCharSet\0";
pub const XNQueryOrientation: &[u8; 17] = b"queryOrientation\0";
pub const XNBaseFontName: &[u8; 13] = b"baseFontName\0";
pub const XNOMAutomatic: &[u8; 12] = b"omAutomatic\0";
pub const XNMissingCharSet: &[u8; 15] = b"missingCharSet\0";
pub const XNDefaultString: &[u8; 14] = b"defaultString\0";
pub const XNOrientation: &[u8; 12] = b"orientation\0";
pub const XNDirectionalDependentDrawing: &[u8; 28] = b"directionalDependentDrawing\0";
pub const XNContextualDrawing: &[u8; 18] = b"contextualDrawing\0";
pub const XNFontInfo: &[u8; 9] = b"fontInfo\0";
pub const XIMPreeditArea: u32 = 1;
pub const XIMPreeditCallbacks: u32 = 2;
pub const XIMPreeditPosition: u32 = 4;
pub const XIMPreeditNothing: u32 = 8;
pub const XIMPreeditNone: u32 = 16;
pub const XIMStatusArea: u32 = 256;
pub const XIMStatusCallbacks: u32 = 512;
pub const XIMStatusNothing: u32 = 1024;
pub const XIMStatusNone: u32 = 2048;
pub const XNVaNestedList: &[u8; 15] = b"XNVaNestedList\0";
pub const XNQueryInputStyle: &[u8; 16] = b"queryInputStyle\0";
pub const XNClientWindow: &[u8; 13] = b"clientWindow\0";
pub const XNInputStyle: &[u8; 11] = b"inputStyle\0";
pub const XNFocusWindow: &[u8; 12] = b"focusWindow\0";
pub const XNResourceName: &[u8; 13] = b"resourceName\0";
pub const XNResourceClass: &[u8; 14] = b"resourceClass\0";
pub const XNGeometryCallback: &[u8; 17] = b"geometryCallback\0";
pub const XNDestroyCallback: &[u8; 16] = b"destroyCallback\0";
pub const XNFilterEvents: &[u8; 13] = b"filterEvents\0";
pub const XNPreeditStartCallback: &[u8; 21] = b"preeditStartCallback\0";
pub const XNPreeditDoneCallback: &[u8; 20] = b"preeditDoneCallback\0";
pub const XNPreeditDrawCallback: &[u8; 20] = b"preeditDrawCallback\0";
pub const XNPreeditCaretCallback: &[u8; 21] = b"preeditCaretCallback\0";
pub const XNPreeditStateNotifyCallback: &[u8; 27] = b"preeditStateNotifyCallback\0";
pub const XNPreeditAttributes: &[u8; 18] = b"preeditAttributes\0";
pub const XNStatusStartCallback: &[u8; 20] = b"statusStartCallback\0";
pub const XNStatusDoneCallback: &[u8; 19] = b"statusDoneCallback\0";
pub const XNStatusDrawCallback: &[u8; 19] = b"statusDrawCallback\0";
pub const XNStatusAttributes: &[u8; 17] = b"statusAttributes\0";
pub const XNArea: &[u8; 5] = b"area\0";
pub const XNAreaNeeded: &[u8; 11] = b"areaNeeded\0";
pub const XNSpotLocation: &[u8; 13] = b"spotLocation\0";
pub const XNColormap: &[u8; 9] = b"colorMap\0";
pub const XNStdColormap: &[u8; 12] = b"stdColorMap\0";
pub const XNForeground: &[u8; 11] = b"foreground\0";
pub const XNBackground: &[u8; 11] = b"background\0";
pub const XNBackgroundPixmap: &[u8; 17] = b"backgroundPixmap\0";
pub const XNFontSet: &[u8; 8] = b"fontSet\0";
pub const XNLineSpace: &[u8; 10] = b"lineSpace\0";
pub const XNCursor: &[u8; 7] = b"cursor\0";
pub const XNQueryIMValuesList: &[u8; 18] = b"queryIMValuesList\0";
pub const XNQueryICValuesList: &[u8; 18] = b"queryICValuesList\0";
pub const XNVisiblePosition: &[u8; 16] = b"visiblePosition\0";
pub const XNR6PreeditCallback: &[u8; 18] = b"r6PreeditCallback\0";
pub const XNStringConversionCallback: &[u8; 25] = b"stringConversionCallback\0";
pub const XNStringConversion: &[u8; 17] = b"stringConversion\0";
pub const XNResetState: &[u8; 11] = b"resetState\0";
pub const XNHotKey: &[u8; 7] = b"hotKey\0";
pub const XNHotKeyState: &[u8; 12] = b"hotKeyState\0";
pub const XNPreeditState: &[u8; 13] = b"preeditState\0";
pub const XNSeparatorofNestedList: &[u8; 22] = b"separatorofNestedList\0";
pub const XBufferOverflow: i32 = -1;
pub const XLookupNone: u32 = 1;
pub const XLookupChars: u32 = 2;
pub const XLookupKeySym: u32 = 3;
pub const XLookupBoth: u32 = 4;
pub const XIMReverse: u32 = 1;
pub const XIMUnderline: u32 = 2;
pub const XIMHighlight: u32 = 4;
pub const XIMPrimary: u32 = 32;
pub const XIMSecondary: u32 = 64;
pub const XIMTertiary: u32 = 128;
pub const XIMVisibleToForward: u32 = 256;
pub const XIMVisibleToBackword: u32 = 512;
pub const XIMVisibleToCenter: u32 = 1024;
pub const XIMPreeditUnKnown: u32 = 0;
pub const XIMPreeditEnable: u32 = 1;
pub const XIMPreeditDisable: u32 = 2;
pub const XIMInitialState: u32 = 1;
pub const XIMPreserveState: u32 = 2;
pub const XIMStringConversionLeftEdge: u32 = 1;
pub const XIMStringConversionRightEdge: u32 = 2;
pub const XIMStringConversionTopEdge: u32 = 4;
pub const XIMStringConversionBottomEdge: u32 = 8;
pub const XIMStringConversionConcealed: u32 = 16;
pub const XIMStringConversionWrapped: u32 = 32;
pub const XIMStringConversionBuffer: u32 = 1;
pub const XIMStringConversionLine: u32 = 2;
pub const XIMStringConversionWord: u32 = 3;
pub const XIMStringConversionChar: u32 = 4;
pub const XIMStringConversionSubstitution: u32 = 1;
pub const XIMStringConversionRetrieval: u32 = 2;
pub const XIMHotKeyStateON: u32 = 1;
pub const XIMHotKeyStateOFF: u32 = 2;
pub const XC_num_glyphs: u32 = 154;
pub const XC_X_cursor: u32 = 0;
pub const XC_arrow: u32 = 2;
pub const XC_based_arrow_down: u32 = 4;
pub const XC_based_arrow_up: u32 = 6;
pub const XC_boat: u32 = 8;
pub const XC_bogosity: u32 = 10;
pub const XC_bottom_left_corner: u32 = 12;
pub const XC_bottom_right_corner: u32 = 14;
pub const XC_bottom_side: u32 = 16;
pub const XC_bottom_tee: u32 = 18;
pub const XC_box_spiral: u32 = 20;
pub const XC_center_ptr: u32 = 22;
pub const XC_circle: u32 = 24;
pub const XC_clock: u32 = 26;
pub const XC_coffee_mug: u32 = 28;
pub const XC_cross: u32 = 30;
pub const XC_cross_reverse: u32 = 32;
pub const XC_crosshair: u32 = 34;
pub const XC_diamond_cross: u32 = 36;
pub const XC_dot: u32 = 38;
pub const XC_dotbox: u32 = 40;
pub const XC_double_arrow: u32 = 42;
pub const XC_draft_large: u32 = 44;
pub const XC_draft_small: u32 = 46;
pub const XC_draped_box: u32 = 48;
pub const XC_exchange: u32 = 50;
pub const XC_fleur: u32 = 52;
pub const XC_gobbler: u32 = 54;
pub const XC_gumby: u32 = 56;
pub const XC_hand1: u32 = 58;
pub const XC_hand2: u32 = 60;
pub const XC_heart: u32 = 62;
pub const XC_icon: u32 = 64;
pub const XC_iron_cross: u32 = 66;
pub const XC_left_ptr: u32 = 68;
pub const XC_left_side: u32 = 70;
pub const XC_left_tee: u32 = 72;
pub const XC_leftbutton: u32 = 74;
pub const XC_ll_angle: u32 = 76;
pub const XC_lr_angle: u32 = 78;
pub const XC_man: u32 = 80;
pub const XC_middlebutton: u32 = 82;
pub const XC_mouse: u32 = 84;
pub const XC_pencil: u32 = 86;
pub const XC_pirate: u32 = 88;
pub const XC_plus: u32 = 90;
pub const XC_question_arrow: u32 = 92;
pub const XC_right_ptr: u32 = 94;
pub const XC_right_side: u32 = 96;
pub const XC_right_tee: u32 = 98;
pub const XC_rightbutton: u32 = 100;
pub const XC_rtl_logo: u32 = 102;
pub const XC_sailboat: u32 = 104;
pub const XC_sb_down_arrow: u32 = 106;
pub const XC_sb_h_double_arrow: u32 = 108;
pub const XC_sb_left_arrow: u32 = 110;
pub const XC_sb_right_arrow: u32 = 112;
pub const XC_sb_up_arrow: u32 = 114;
pub const XC_sb_v_double_arrow: u32 = 116;
pub const XC_shuttle: u32 = 118;
pub const XC_sizing: u32 = 120;
pub const XC_spider: u32 = 122;
pub const XC_spraycan: u32 = 124;
pub const XC_star: u32 = 126;
pub const XC_target: u32 = 128;
pub const XC_tcross: u32 = 130;
pub const XC_top_left_arrow: u32 = 132;
pub const XC_top_left_corner: u32 = 134;
pub const XC_top_right_corner: u32 = 136;
pub const XC_top_side: u32 = 138;
pub const XC_top_tee: u32 = 140;
pub const XC_trek: u32 = 142;
pub const XC_ul_angle: u32 = 144;
pub const XC_umbrella: u32 = 146;
pub const XC_ur_angle: u32 = 148;
pub const XC_watch: u32 = 150;
pub const XC_xterm: u32 = 152;
pub const XK_VoidSymbol: u32 = 16777215;
pub const XK_BackSpace: u32 = 65288;
pub const XK_Tab: u32 = 65289;
pub const XK_Linefeed: u32 = 65290;
pub const XK_Clear: u32 = 65291;
pub const XK_Return: u32 = 65293;
pub const XK_Pause: u32 = 65299;
pub const XK_Scroll_Lock: u32 = 65300;
pub const XK_Sys_Req: u32 = 65301;
pub const XK_Escape: u32 = 65307;
pub const XK_Delete: u32 = 65535;
pub const XK_Multi_key: u32 = 65312;
pub const XK_Codeinput: u32 = 65335;
pub const XK_SingleCandidate: u32 = 65340;
pub const XK_MultipleCandidate: u32 = 65341;
pub const XK_PreviousCandidate: u32 = 65342;
pub const XK_Kanji: u32 = 65313;
pub const XK_Muhenkan: u32 = 65314;
pub const XK_Henkan_Mode: u32 = 65315;
pub const XK_Henkan: u32 = 65315;
pub const XK_Romaji: u32 = 65316;
pub const XK_Hiragana: u32 = 65317;
pub const XK_Katakana: u32 = 65318;
pub const XK_Hiragana_Katakana: u32 = 65319;
pub const XK_Zenkaku: u32 = 65320;
pub const XK_Hankaku: u32 = 65321;
pub const XK_Zenkaku_Hankaku: u32 = 65322;
pub const XK_Touroku: u32 = 65323;
pub const XK_Massyo: u32 = 65324;
pub const XK_Kana_Lock: u32 = 65325;
pub const XK_Kana_Shift: u32 = 65326;
pub const XK_Eisu_Shift: u32 = 65327;
pub const XK_Eisu_toggle: u32 = 65328;
pub const XK_Kanji_Bangou: u32 = 65335;
pub const XK_Zen_Koho: u32 = 65341;
pub const XK_Mae_Koho: u32 = 65342;
pub const XK_Home: u32 = 65360;
pub const XK_Left: u32 = 65361;
pub const XK_Up: u32 = 65362;
pub const XK_Right: u32 = 65363;
pub const XK_Down: u32 = 65364;
pub const XK_Prior: u32 = 65365;
pub const XK_Page_Up: u32 = 65365;
pub const XK_Next: u32 = 65366;
pub const XK_Page_Down: u32 = 65366;
pub const XK_End: u32 = 65367;
pub const XK_Begin: u32 = 65368;
pub const XK_Select: u32 = 65376;
pub const XK_Print: u32 = 65377;
pub const XK_Execute: u32 = 65378;
pub const XK_Insert: u32 = 65379;
pub const XK_Undo: u32 = 65381;
pub const XK_Redo: u32 = 65382;
pub const XK_Menu: u32 = 65383;
pub const XK_Find: u32 = 65384;
pub const XK_Cancel: u32 = 65385;
pub const XK_Help: u32 = 65386;
pub const XK_Break: u32 = 65387;
pub const XK_Mode_switch: u32 = 65406;
pub const XK_script_switch: u32 = 65406;
pub const XK_Num_Lock: u32 = 65407;
pub const XK_KP_Space: u32 = 65408;
pub const XK_KP_Tab: u32 = 65417;
pub const XK_KP_Enter: u32 = 65421;
pub const XK_KP_F1: u32 = 65425;
pub const XK_KP_F2: u32 = 65426;
pub const XK_KP_F3: u32 = 65427;
pub const XK_KP_F4: u32 = 65428;
pub const XK_KP_Home: u32 = 65429;
pub const XK_KP_Left: u32 = 65430;
pub const XK_KP_Up: u32 = 65431;
pub const XK_KP_Right: u32 = 65432;
pub const XK_KP_Down: u32 = 65433;
pub const XK_KP_Prior: u32 = 65434;
pub const XK_KP_Page_Up: u32 = 65434;
pub const XK_KP_Next: u32 = 65435;
pub const XK_KP_Page_Down: u32 = 65435;
pub const XK_KP_End: u32 = 65436;
pub const XK_KP_Begin: u32 = 65437;
pub const XK_KP_Insert: u32 = 65438;
pub const XK_KP_Delete: u32 = 65439;
pub const XK_KP_Equal: u32 = 65469;
pub const XK_KP_Multiply: u32 = 65450;
pub const XK_KP_Add: u32 = 65451;
pub const XK_KP_Separator: u32 = 65452;
pub const XK_KP_Subtract: u32 = 65453;
pub const XK_KP_Decimal: u32 = 65454;
pub const XK_KP_Divide: u32 = 65455;
pub const XK_KP_0: u32 = 65456;
pub const XK_KP_1: u32 = 65457;
pub const XK_KP_2: u32 = 65458;
pub const XK_KP_3: u32 = 65459;
pub const XK_KP_4: u32 = 65460;
pub const XK_KP_5: u32 = 65461;
pub const XK_KP_6: u32 = 65462;
pub const XK_KP_7: u32 = 65463;
pub const XK_KP_8: u32 = 65464;
pub const XK_KP_9: u32 = 65465;
pub const XK_F1: u32 = 65470;
pub const XK_F2: u32 = 65471;
pub const XK_F3: u32 = 65472;
pub const XK_F4: u32 = 65473;
pub const XK_F5: u32 = 65474;
pub const XK_F6: u32 = 65475;
pub const XK_F7: u32 = 65476;
pub const XK_F8: u32 = 65477;
pub const XK_F9: u32 = 65478;
pub const XK_F10: u32 = 65479;
pub const XK_F11: u32 = 65480;
pub const XK_L1: u32 = 65480;
pub const XK_F12: u32 = 65481;
pub const XK_L2: u32 = 65481;
pub const XK_F13: u32 = 65482;
pub const XK_L3: u32 = 65482;
pub const XK_F14: u32 = 65483;
pub const XK_L4: u32 = 65483;
pub const XK_F15: u32 = 65484;
pub const XK_L5: u32 = 65484;
pub const XK_F16: u32 = 65485;
pub const XK_L6: u32 = 65485;
pub const XK_F17: u32 = 65486;
pub const XK_L7: u32 = 65486;
pub const XK_F18: u32 = 65487;
pub const XK_L8: u32 = 65487;
pub const XK_F19: u32 = 65488;
pub const XK_L9: u32 = 65488;
pub const XK_F20: u32 = 65489;
pub const XK_L10: u32 = 65489;
pub const XK_F21: u32 = 65490;
pub const XK_R1: u32 = 65490;
pub const XK_F22: u32 = 65491;
pub const XK_R2: u32 = 65491;
pub const XK_F23: u32 = 65492;
pub const XK_R3: u32 = 65492;
pub const XK_F24: u32 = 65493;
pub const XK_R4: u32 = 65493;
pub const XK_F25: u32 = 65494;
pub const XK_R5: u32 = 65494;
pub const XK_F26: u32 = 65495;
pub const XK_R6: u32 = 65495;
pub const XK_F27: u32 = 65496;
pub const XK_R7: u32 = 65496;
pub const XK_F28: u32 = 65497;
pub const XK_R8: u32 = 65497;
pub const XK_F29: u32 = 65498;
pub const XK_R9: u32 = 65498;
pub const XK_F30: u32 = 65499;
pub const XK_R10: u32 = 65499;
pub const XK_F31: u32 = 65500;
pub const XK_R11: u32 = 65500;
pub const XK_F32: u32 = 65501;
pub const XK_R12: u32 = 65501;
pub const XK_F33: u32 = 65502;
pub const XK_R13: u32 = 65502;
pub const XK_F34: u32 = 65503;
pub const XK_R14: u32 = 65503;
pub const XK_F35: u32 = 65504;
pub const XK_R15: u32 = 65504;
pub const XK_Shift_L: u32 = 65505;
pub const XK_Shift_R: u32 = 65506;
pub const XK_Control_L: u32 = 65507;
pub const XK_Control_R: u32 = 65508;
pub const XK_Caps_Lock: u32 = 65509;
pub const XK_Shift_Lock: u32 = 65510;
pub const XK_Meta_L: u32 = 65511;
pub const XK_Meta_R: u32 = 65512;
pub const XK_Alt_L: u32 = 65513;
pub const XK_Alt_R: u32 = 65514;
pub const XK_Super_L: u32 = 65515;
pub const XK_Super_R: u32 = 65516;
pub const XK_Hyper_L: u32 = 65517;
pub const XK_Hyper_R: u32 = 65518;
pub const XK_ISO_Lock: u32 = 65025;
pub const XK_ISO_Level2_Latch: u32 = 65026;
pub const XK_ISO_Level3_Shift: u32 = 65027;
pub const XK_ISO_Level3_Latch: u32 = 65028;
pub const XK_ISO_Level3_Lock: u32 = 65029;
pub const XK_ISO_Level5_Shift: u32 = 65041;
pub const XK_ISO_Level5_Latch: u32 = 65042;
pub const XK_ISO_Level5_Lock: u32 = 65043;
pub const XK_ISO_Group_Shift: u32 = 65406;
pub const XK_ISO_Group_Latch: u32 = 65030;
pub const XK_ISO_Group_Lock: u32 = 65031;
pub const XK_ISO_Next_Group: u32 = 65032;
pub const XK_ISO_Next_Group_Lock: u32 = 65033;
pub const XK_ISO_Prev_Group: u32 = 65034;
pub const XK_ISO_Prev_Group_Lock: u32 = 65035;
pub const XK_ISO_First_Group: u32 = 65036;
pub const XK_ISO_First_Group_Lock: u32 = 65037;
pub const XK_ISO_Last_Group: u32 = 65038;
pub const XK_ISO_Last_Group_Lock: u32 = 65039;
pub const XK_ISO_Left_Tab: u32 = 65056;
pub const XK_ISO_Move_Line_Up: u32 = 65057;
pub const XK_ISO_Move_Line_Down: u32 = 65058;
pub const XK_ISO_Partial_Line_Up: u32 = 65059;
pub const XK_ISO_Partial_Line_Down: u32 = 65060;
pub const XK_ISO_Partial_Space_Left: u32 = 65061;
pub const XK_ISO_Partial_Space_Right: u32 = 65062;
pub const XK_ISO_Set_Margin_Left: u32 = 65063;
pub const XK_ISO_Set_Margin_Right: u32 = 65064;
pub const XK_ISO_Release_Margin_Left: u32 = 65065;
pub const XK_ISO_Release_Margin_Right: u32 = 65066;
pub const XK_ISO_Release_Both_Margins: u32 = 65067;
pub const XK_ISO_Fast_Cursor_Left: u32 = 65068;
pub const XK_ISO_Fast_Cursor_Right: u32 = 65069;
pub const XK_ISO_Fast_Cursor_Up: u32 = 65070;
pub const XK_ISO_Fast_Cursor_Down: u32 = 65071;
pub const XK_ISO_Continuous_Underline: u32 = 65072;
pub const XK_ISO_Discontinuous_Underline: u32 = 65073;
pub const XK_ISO_Emphasize: u32 = 65074;
pub const XK_ISO_Center_Object: u32 = 65075;
pub const XK_ISO_Enter: u32 = 65076;
pub const XK_dead_grave: u32 = 65104;
pub const XK_dead_acute: u32 = 65105;
pub const XK_dead_circumflex: u32 = 65106;
pub const XK_dead_tilde: u32 = 65107;
pub const XK_dead_perispomeni: u32 = 65107;
pub const XK_dead_macron: u32 = 65108;
pub const XK_dead_breve: u32 = 65109;
pub const XK_dead_abovedot: u32 = 65110;
pub const XK_dead_diaeresis: u32 = 65111;
pub const XK_dead_abovering: u32 = 65112;
pub const XK_dead_doubleacute: u32 = 65113;
pub const XK_dead_caron: u32 = 65114;
pub const XK_dead_cedilla: u32 = 65115;
pub const XK_dead_ogonek: u32 = 65116;
pub const XK_dead_iota: u32 = 65117;
pub const XK_dead_voiced_sound: u32 = 65118;
pub const XK_dead_semivoiced_sound: u32 = 65119;
pub const XK_dead_belowdot: u32 = 65120;
pub const XK_dead_hook: u32 = 65121;
pub const XK_dead_horn: u32 = 65122;
pub const XK_dead_stroke: u32 = 65123;
pub const XK_dead_abovecomma: u32 = 65124;
pub const XK_dead_psili: u32 = 65124;
pub const XK_dead_abovereversedcomma: u32 = 65125;
pub const XK_dead_dasia: u32 = 65125;
pub const XK_dead_doublegrave: u32 = 65126;
pub const XK_dead_belowring: u32 = 65127;
pub const XK_dead_belowmacron: u32 = 65128;
pub const XK_dead_belowcircumflex: u32 = 65129;
pub const XK_dead_belowtilde: u32 = 65130;
pub const XK_dead_belowbreve: u32 = 65131;
pub const XK_dead_belowdiaeresis: u32 = 65132;
pub const XK_dead_invertedbreve: u32 = 65133;
pub const XK_dead_belowcomma: u32 = 65134;
pub const XK_dead_currency: u32 = 65135;
pub const XK_dead_lowline: u32 = 65168;
pub const XK_dead_aboveverticalline: u32 = 65169;
pub const XK_dead_belowverticalline: u32 = 65170;
pub const XK_dead_longsolidusoverlay: u32 = 65171;
pub const XK_dead_a: u32 = 65152;
pub const XK_dead_A: u32 = 65153;
pub const XK_dead_e: u32 = 65154;
pub const XK_dead_E: u32 = 65155;
pub const XK_dead_i: u32 = 65156;
pub const XK_dead_I: u32 = 65157;
pub const XK_dead_o: u32 = 65158;
pub const XK_dead_O: u32 = 65159;
pub const XK_dead_u: u32 = 65160;
pub const XK_dead_U: u32 = 65161;
pub const XK_dead_small_schwa: u32 = 65162;
pub const XK_dead_schwa: u32 = 65162;
pub const XK_dead_capital_schwa: u32 = 65163;
pub const XK_dead_SCHWA: u32 = 65163;
pub const XK_dead_greek: u32 = 65164;
pub const XK_dead_hamza: u32 = 65165;
pub const XK_First_Virtual_Screen: u32 = 65232;
pub const XK_Prev_Virtual_Screen: u32 = 65233;
pub const XK_Next_Virtual_Screen: u32 = 65234;
pub const XK_Last_Virtual_Screen: u32 = 65236;
pub const XK_Terminate_Server: u32 = 65237;
pub const XK_AccessX_Enable: u32 = 65136;
pub const XK_AccessX_Feedback_Enable: u32 = 65137;
pub const XK_RepeatKeys_Enable: u32 = 65138;
pub const XK_SlowKeys_Enable: u32 = 65139;
pub const XK_BounceKeys_Enable: u32 = 65140;
pub const XK_StickyKeys_Enable: u32 = 65141;
pub const XK_MouseKeys_Enable: u32 = 65142;
pub const XK_MouseKeys_Accel_Enable: u32 = 65143;
pub const XK_Overlay1_Enable: u32 = 65144;
pub const XK_Overlay2_Enable: u32 = 65145;
pub const XK_AudibleBell_Enable: u32 = 65146;
pub const XK_Pointer_Left: u32 = 65248;
pub const XK_Pointer_Right: u32 = 65249;
pub const XK_Pointer_Up: u32 = 65250;
pub const XK_Pointer_Down: u32 = 65251;
pub const XK_Pointer_UpLeft: u32 = 65252;
pub const XK_Pointer_UpRight: u32 = 65253;
pub const XK_Pointer_DownLeft: u32 = 65254;
pub const XK_Pointer_DownRight: u32 = 65255;
pub const XK_Pointer_Button_Dflt: u32 = 65256;
pub const XK_Pointer_Button1: u32 = 65257;
pub const XK_Pointer_Button2: u32 = 65258;
pub const XK_Pointer_Button3: u32 = 65259;
pub const XK_Pointer_Button4: u32 = 65260;
pub const XK_Pointer_Button5: u32 = 65261;
pub const XK_Pointer_DblClick_Dflt: u32 = 65262;
pub const XK_Pointer_DblClick1: u32 = 65263;
pub const XK_Pointer_DblClick2: u32 = 65264;
pub const XK_Pointer_DblClick3: u32 = 65265;
pub const XK_Pointer_DblClick4: u32 = 65266;
pub const XK_Pointer_DblClick5: u32 = 65267;
pub const XK_Pointer_Drag_Dflt: u32 = 65268;
pub const XK_Pointer_Drag1: u32 = 65269;
pub const XK_Pointer_Drag2: u32 = 65270;
pub const XK_Pointer_Drag3: u32 = 65271;
pub const XK_Pointer_Drag4: u32 = 65272;
pub const XK_Pointer_Drag5: u32 = 65277;
pub const XK_Pointer_EnableKeys: u32 = 65273;
pub const XK_Pointer_Accelerate: u32 = 65274;
pub const XK_Pointer_DfltBtnNext: u32 = 65275;
pub const XK_Pointer_DfltBtnPrev: u32 = 65276;
pub const XK_ch: u32 = 65184;
pub const XK_Ch: u32 = 65185;
pub const XK_CH: u32 = 65186;
pub const XK_c_h: u32 = 65187;
pub const XK_C_h: u32 = 65188;
pub const XK_C_H: u32 = 65189;
pub const XK_space: u32 = 32;
pub const XK_exclam: u32 = 33;
pub const XK_quotedbl: u32 = 34;
pub const XK_numbersign: u32 = 35;
pub const XK_dollar: u32 = 36;
pub const XK_percent: u32 = 37;
pub const XK_ampersand: u32 = 38;
pub const XK_apostrophe: u32 = 39;
pub const XK_quoteright: u32 = 39;
pub const XK_parenleft: u32 = 40;
pub const XK_parenright: u32 = 41;
pub const XK_asterisk: u32 = 42;
pub const XK_plus: u32 = 43;
pub const XK_comma: u32 = 44;
pub const XK_minus: u32 = 45;
pub const XK_period: u32 = 46;
pub const XK_slash: u32 = 47;
pub const XK_0: u32 = 48;
pub const XK_1: u32 = 49;
pub const XK_2: u32 = 50;
pub const XK_3: u32 = 51;
pub const XK_4: u32 = 52;
pub const XK_5: u32 = 53;
pub const XK_6: u32 = 54;
pub const XK_7: u32 = 55;
pub const XK_8: u32 = 56;
pub const XK_9: u32 = 57;
pub const XK_colon: u32 = 58;
pub const XK_semicolon: u32 = 59;
pub const XK_less: u32 = 60;
pub const XK_equal: u32 = 61;
pub const XK_greater: u32 = 62;
pub const XK_question: u32 = 63;
pub const XK_at: u32 = 64;
pub const XK_A: u32 = 65;
pub const XK_B: u32 = 66;
pub const XK_C: u32 = 67;
pub const XK_D: u32 = 68;
pub const XK_E: u32 = 69;
pub const XK_F: u32 = 70;
pub const XK_G: u32 = 71;
pub const XK_H: u32 = 72;
pub const XK_I: u32 = 73;
pub const XK_J: u32 = 74;
pub const XK_K: u32 = 75;
pub const XK_L: u32 = 76;
pub const XK_M: u32 = 77;
pub const XK_N: u32 = 78;
pub const XK_O: u32 = 79;
pub const XK_P: u32 = 80;
pub const XK_Q: u32 = 81;
pub const XK_R: u32 = 82;
pub const XK_S: u32 = 83;
pub const XK_T: u32 = 84;
pub const XK_U: u32 = 85;
pub const XK_V: u32 = 86;
pub const XK_W: u32 = 87;
pub const XK_X: u32 = 88;
pub const XK_Y: u32 = 89;
pub const XK_Z: u32 = 90;
pub const XK_bracketleft: u32 = 91;
pub const XK_backslash: u32 = 92;
pub const XK_bracketright: u32 = 93;
pub const XK_asciicircum: u32 = 94;
pub const XK_underscore: u32 = 95;
pub const XK_grave: u32 = 96;
pub const XK_quoteleft: u32 = 96;
pub const XK_a: u32 = 97;
pub const XK_b: u32 = 98;
pub const XK_c: u32 = 99;
pub const XK_d: u32 = 100;
pub const XK_e: u32 = 101;
pub const XK_f: u32 = 102;
pub const XK_g: u32 = 103;
pub const XK_h: u32 = 104;
pub const XK_i: u32 = 105;
pub const XK_j: u32 = 106;
pub const XK_k: u32 = 107;
pub const XK_l: u32 = 108;
pub const XK_m: u32 = 109;
pub const XK_n: u32 = 110;
pub const XK_o: u32 = 111;
pub const XK_p: u32 = 112;
pub const XK_q: u32 = 113;
pub const XK_r: u32 = 114;
pub const XK_s: u32 = 115;
pub const XK_t: u32 = 116;
pub const XK_u: u32 = 117;
pub const XK_v: u32 = 118;
pub const XK_w: u32 = 119;
pub const XK_x: u32 = 120;
pub const XK_y: u32 = 121;
pub const XK_z: u32 = 122;
pub const XK_braceleft: u32 = 123;
pub const XK_bar: u32 = 124;
pub const XK_braceright: u32 = 125;
pub const XK_asciitilde: u32 = 126;
pub const XK_nobreakspace: u32 = 160;
pub const XK_exclamdown: u32 = 161;
pub const XK_cent: u32 = 162;
pub const XK_sterling: u32 = 163;
pub const XK_currency: u32 = 164;
pub const XK_yen: u32 = 165;
pub const XK_brokenbar: u32 = 166;
pub const XK_section: u32 = 167;
pub const XK_diaeresis: u32 = 168;
pub const XK_copyright: u32 = 169;
pub const XK_ordfeminine: u32 = 170;
pub const XK_guillemotleft: u32 = 171;
pub const XK_guillemetleft: u32 = 171;
pub const XK_notsign: u32 = 172;
pub const XK_hyphen: u32 = 173;
pub const XK_registered: u32 = 174;
pub const XK_macron: u32 = 175;
pub const XK_degree: u32 = 176;
pub const XK_plusminus: u32 = 177;
pub const XK_twosuperior: u32 = 178;
pub const XK_threesuperior: u32 = 179;
pub const XK_acute: u32 = 180;
pub const XK_mu: u32 = 181;
pub const XK_paragraph: u32 = 182;
pub const XK_periodcentered: u32 = 183;
pub const XK_cedilla: u32 = 184;
pub const XK_onesuperior: u32 = 185;
pub const XK_masculine: u32 = 186;
pub const XK_ordmasculine: u32 = 186;
pub const XK_guillemotright: u32 = 187;
pub const XK_guillemetright: u32 = 187;
pub const XK_onequarter: u32 = 188;
pub const XK_onehalf: u32 = 189;
pub const XK_threequarters: u32 = 190;
pub const XK_questiondown: u32 = 191;
pub const XK_Agrave: u32 = 192;
pub const XK_Aacute: u32 = 193;
pub const XK_Acircumflex: u32 = 194;
pub const XK_Atilde: u32 = 195;
pub const XK_Adiaeresis: u32 = 196;
pub const XK_Aring: u32 = 197;
pub const XK_AE: u32 = 198;
pub const XK_Ccedilla: u32 = 199;
pub const XK_Egrave: u32 = 200;
pub const XK_Eacute: u32 = 201;
pub const XK_Ecircumflex: u32 = 202;
pub const XK_Ediaeresis: u32 = 203;
pub const XK_Igrave: u32 = 204;
pub const XK_Iacute: u32 = 205;
pub const XK_Icircumflex: u32 = 206;
pub const XK_Idiaeresis: u32 = 207;
pub const XK_ETH: u32 = 208;
pub const XK_Eth: u32 = 208;
pub const XK_Ntilde: u32 = 209;
pub const XK_Ograve: u32 = 210;
pub const XK_Oacute: u32 = 211;
pub const XK_Ocircumflex: u32 = 212;
pub const XK_Otilde: u32 = 213;
pub const XK_Odiaeresis: u32 = 214;
pub const XK_multiply: u32 = 215;
pub const XK_Oslash: u32 = 216;
pub const XK_Ooblique: u32 = 216;
pub const XK_Ugrave: u32 = 217;
pub const XK_Uacute: u32 = 218;
pub const XK_Ucircumflex: u32 = 219;
pub const XK_Udiaeresis: u32 = 220;
pub const XK_Yacute: u32 = 221;
pub const XK_THORN: u32 = 222;
pub const XK_Thorn: u32 = 222;
pub const XK_ssharp: u32 = 223;
pub const XK_agrave: u32 = 224;
pub const XK_aacute: u32 = 225;
pub const XK_acircumflex: u32 = 226;
pub const XK_atilde: u32 = 227;
pub const XK_adiaeresis: u32 = 228;
pub const XK_aring: u32 = 229;
pub const XK_ae: u32 = 230;
pub const XK_ccedilla: u32 = 231;
pub const XK_egrave: u32 = 232;
pub const XK_eacute: u32 = 233;
pub const XK_ecircumflex: u32 = 234;
pub const XK_ediaeresis: u32 = 235;
pub const XK_igrave: u32 = 236;
pub const XK_iacute: u32 = 237;
pub const XK_icircumflex: u32 = 238;
pub const XK_idiaeresis: u32 = 239;
pub const XK_eth: u32 = 240;
pub const XK_ntilde: u32 = 241;
pub const XK_ograve: u32 = 242;
pub const XK_oacute: u32 = 243;
pub const XK_ocircumflex: u32 = 244;
pub const XK_otilde: u32 = 245;
pub const XK_odiaeresis: u32 = 246;
pub const XK_division: u32 = 247;
pub const XK_oslash: u32 = 248;
pub const XK_ooblique: u32 = 248;
pub const XK_ugrave: u32 = 249;
pub const XK_uacute: u32 = 250;
pub const XK_ucircumflex: u32 = 251;
pub const XK_udiaeresis: u32 = 252;
pub const XK_yacute: u32 = 253;
pub const XK_thorn: u32 = 254;
pub const XK_ydiaeresis: u32 = 255;
pub const XK_Aogonek: u32 = 417;
pub const XK_breve: u32 = 418;
pub const XK_Lstroke: u32 = 419;
pub const XK_Lcaron: u32 = 421;
pub const XK_Sacute: u32 = 422;
pub const XK_Scaron: u32 = 425;
pub const XK_Scedilla: u32 = 426;
pub const XK_Tcaron: u32 = 427;
pub const XK_Zacute: u32 = 428;
pub const XK_Zcaron: u32 = 430;
pub const XK_Zabovedot: u32 = 431;
pub const XK_aogonek: u32 = 433;
pub const XK_ogonek: u32 = 434;
pub const XK_lstroke: u32 = 435;
pub const XK_lcaron: u32 = 437;
pub const XK_sacute: u32 = 438;
pub const XK_caron: u32 = 439;
pub const XK_scaron: u32 = 441;
pub const XK_scedilla: u32 = 442;
pub const XK_tcaron: u32 = 443;
pub const XK_zacute: u32 = 444;
pub const XK_doubleacute: u32 = 445;
pub const XK_zcaron: u32 = 446;
pub const XK_zabovedot: u32 = 447;
pub const XK_Racute: u32 = 448;
pub const XK_Abreve: u32 = 451;
pub const XK_Lacute: u32 = 453;
pub const XK_Cacute: u32 = 454;
pub const XK_Ccaron: u32 = 456;
pub const XK_Eogonek: u32 = 458;
pub const XK_Ecaron: u32 = 460;
pub const XK_Dcaron: u32 = 463;
pub const XK_Dstroke: u32 = 464;
pub const XK_Nacute: u32 = 465;
pub const XK_Ncaron: u32 = 466;
pub const XK_Odoubleacute: u32 = 469;
pub const XK_Rcaron: u32 = 472;
pub const XK_Uring: u32 = 473;
pub const XK_Udoubleacute: u32 = 475;
pub const XK_Tcedilla: u32 = 478;
pub const XK_racute: u32 = 480;
pub const XK_abreve: u32 = 483;
pub const XK_lacute: u32 = 485;
pub const XK_cacute: u32 = 486;
pub const XK_ccaron: u32 = 488;
pub const XK_eogonek: u32 = 490;
pub const XK_ecaron: u32 = 492;
pub const XK_dcaron: u32 = 495;
pub const XK_dstroke: u32 = 496;
pub const XK_nacute: u32 = 497;
pub const XK_ncaron: u32 = 498;
pub const XK_odoubleacute: u32 = 501;
pub const XK_rcaron: u32 = 504;
pub const XK_uring: u32 = 505;
pub const XK_udoubleacute: u32 = 507;
pub const XK_tcedilla: u32 = 510;
pub const XK_abovedot: u32 = 511;
pub const XK_Hstroke: u32 = 673;
pub const XK_Hcircumflex: u32 = 678;
pub const XK_Iabovedot: u32 = 681;
pub const XK_Gbreve: u32 = 683;
pub const XK_Jcircumflex: u32 = 684;
pub const XK_hstroke: u32 = 689;
pub const XK_hcircumflex: u32 = 694;
pub const XK_idotless: u32 = 697;
pub const XK_gbreve: u32 = 699;
pub const XK_jcircumflex: u32 = 700;
pub const XK_Cabovedot: u32 = 709;
pub const XK_Ccircumflex: u32 = 710;
pub const XK_Gabovedot: u32 = 725;
pub const XK_Gcircumflex: u32 = 728;
pub const XK_Ubreve: u32 = 733;
pub const XK_Scircumflex: u32 = 734;
pub const XK_cabovedot: u32 = 741;
pub const XK_ccircumflex: u32 = 742;
pub const XK_gabovedot: u32 = 757;
pub const XK_gcircumflex: u32 = 760;
pub const XK_ubreve: u32 = 765;
pub const XK_scircumflex: u32 = 766;
pub const XK_kra: u32 = 930;
pub const XK_kappa: u32 = 930;
pub const XK_Rcedilla: u32 = 931;
pub const XK_Itilde: u32 = 933;
pub const XK_Lcedilla: u32 = 934;
pub const XK_Emacron: u32 = 938;
pub const XK_Gcedilla: u32 = 939;
pub const XK_Tslash: u32 = 940;
pub const XK_rcedilla: u32 = 947;
pub const XK_itilde: u32 = 949;
pub const XK_lcedilla: u32 = 950;
pub const XK_emacron: u32 = 954;
pub const XK_gcedilla: u32 = 955;
pub const XK_tslash: u32 = 956;
pub const XK_ENG: u32 = 957;
pub const XK_eng: u32 = 959;
pub const XK_Amacron: u32 = 960;
pub const XK_Iogonek: u32 = 967;
pub const XK_Eabovedot: u32 = 972;
pub const XK_Imacron: u32 = 975;
pub const XK_Ncedilla: u32 = 977;
pub const XK_Omacron: u32 = 978;
pub const XK_Kcedilla: u32 = 979;
pub const XK_Uogonek: u32 = 985;
pub const XK_Utilde: u32 = 989;
pub const XK_Umacron: u32 = 990;
pub const XK_amacron: u32 = 992;
pub const XK_iogonek: u32 = 999;
pub const XK_eabovedot: u32 = 1004;
pub const XK_imacron: u32 = 1007;
pub const XK_ncedilla: u32 = 1009;
pub const XK_omacron: u32 = 1010;
pub const XK_kcedilla: u32 = 1011;
pub const XK_uogonek: u32 = 1017;
pub const XK_utilde: u32 = 1021;
pub const XK_umacron: u32 = 1022;
pub const XK_Wcircumflex: u32 = 16777588;
pub const XK_wcircumflex: u32 = 16777589;
pub const XK_Ycircumflex: u32 = 16777590;
pub const XK_ycircumflex: u32 = 16777591;
pub const XK_Babovedot: u32 = 16784898;
pub const XK_babovedot: u32 = 16784899;
pub const XK_Dabovedot: u32 = 16784906;
pub const XK_dabovedot: u32 = 16784907;
pub const XK_Fabovedot: u32 = 16784926;
pub const XK_fabovedot: u32 = 16784927;
pub const XK_Mabovedot: u32 = 16784960;
pub const XK_mabovedot: u32 = 16784961;
pub const XK_Pabovedot: u32 = 16784982;
pub const XK_pabovedot: u32 = 16784983;
pub const XK_Sabovedot: u32 = 16784992;
pub const XK_sabovedot: u32 = 16784993;
pub const XK_Tabovedot: u32 = 16785002;
pub const XK_tabovedot: u32 = 16785003;
pub const XK_Wgrave: u32 = 16785024;
pub const XK_wgrave: u32 = 16785025;
pub const XK_Wacute: u32 = 16785026;
pub const XK_wacute: u32 = 16785027;
pub const XK_Wdiaeresis: u32 = 16785028;
pub const XK_wdiaeresis: u32 = 16785029;
pub const XK_Ygrave: u32 = 16785138;
pub const XK_ygrave: u32 = 16785139;
pub const XK_OE: u32 = 5052;
pub const XK_oe: u32 = 5053;
pub const XK_Ydiaeresis: u32 = 5054;
pub const XK_overline: u32 = 1150;
pub const XK_kana_fullstop: u32 = 1185;
pub const XK_kana_openingbracket: u32 = 1186;
pub const XK_kana_closingbracket: u32 = 1187;
pub const XK_kana_comma: u32 = 1188;
pub const XK_kana_conjunctive: u32 = 1189;
pub const XK_kana_middledot: u32 = 1189;
pub const XK_kana_WO: u32 = 1190;
pub const XK_kana_a: u32 = 1191;
pub const XK_kana_i: u32 = 1192;
pub const XK_kana_u: u32 = 1193;
pub const XK_kana_e: u32 = 1194;
pub const XK_kana_o: u32 = 1195;
pub const XK_kana_ya: u32 = 1196;
pub const XK_kana_yu: u32 = 1197;
pub const XK_kana_yo: u32 = 1198;
pub const XK_kana_tsu: u32 = 1199;
pub const XK_kana_tu: u32 = 1199;
pub const XK_prolongedsound: u32 = 1200;
pub const XK_kana_A: u32 = 1201;
pub const XK_kana_I: u32 = 1202;
pub const XK_kana_U: u32 = 1203;
pub const XK_kana_E: u32 = 1204;
pub const XK_kana_O: u32 = 1205;
pub const XK_kana_KA: u32 = 1206;
pub const XK_kana_KI: u32 = 1207;
pub const XK_kana_KU: u32 = 1208;
pub const XK_kana_KE: u32 = 1209;
pub const XK_kana_KO: u32 = 1210;
pub const XK_kana_SA: u32 = 1211;
pub const XK_kana_SHI: u32 = 1212;
pub const XK_kana_SU: u32 = 1213;
pub const XK_kana_SE: u32 = 1214;
pub const XK_kana_SO: u32 = 1215;
pub const XK_kana_TA: u32 = 1216;
pub const XK_kana_CHI: u32 = 1217;
pub const XK_kana_TI: u32 = 1217;
pub const XK_kana_TSU: u32 = 1218;
pub const XK_kana_TU: u32 = 1218;
pub const XK_kana_TE: u32 = 1219;
pub const XK_kana_TO: u32 = 1220;
pub const XK_kana_NA: u32 = 1221;
pub const XK_kana_NI: u32 = 1222;
pub const XK_kana_NU: u32 = 1223;
pub const XK_kana_NE: u32 = 1224;
pub const XK_kana_NO: u32 = 1225;
pub const XK_kana_HA: u32 = 1226;
pub const XK_kana_HI: u32 = 1227;
pub const XK_kana_FU: u32 = 1228;
pub const XK_kana_HU: u32 = 1228;
pub const XK_kana_HE: u32 = 1229;
pub const XK_kana_HO: u32 = 1230;
pub const XK_kana_MA: u32 = 1231;
pub const XK_kana_MI: u32 = 1232;
pub const XK_kana_MU: u32 = 1233;
pub const XK_kana_ME: u32 = 1234;
pub const XK_kana_MO: u32 = 1235;
pub const XK_kana_YA: u32 = 1236;
pub const XK_kana_YU: u32 = 1237;
pub const XK_kana_YO: u32 = 1238;
pub const XK_kana_RA: u32 = 1239;
pub const XK_kana_RI: u32 = 1240;
pub const XK_kana_RU: u32 = 1241;
pub const XK_kana_RE: u32 = 1242;
pub const XK_kana_RO: u32 = 1243;
pub const XK_kana_WA: u32 = 1244;
pub const XK_kana_N: u32 = 1245;
pub const XK_voicedsound: u32 = 1246;
pub const XK_semivoicedsound: u32 = 1247;
pub const XK_kana_switch: u32 = 65406;
pub const XK_Farsi_0: u32 = 16778992;
pub const XK_Farsi_1: u32 = 16778993;
pub const XK_Farsi_2: u32 = 16778994;
pub const XK_Farsi_3: u32 = 16778995;
pub const XK_Farsi_4: u32 = 16778996;
pub const XK_Farsi_5: u32 = 16778997;
pub const XK_Farsi_6: u32 = 16778998;
pub const XK_Farsi_7: u32 = 16778999;
pub const XK_Farsi_8: u32 = 16779000;
pub const XK_Farsi_9: u32 = 16779001;
pub const XK_Arabic_percent: u32 = 16778858;
pub const XK_Arabic_superscript_alef: u32 = 16778864;
pub const XK_Arabic_tteh: u32 = 16778873;
pub const XK_Arabic_peh: u32 = 16778878;
pub const XK_Arabic_tcheh: u32 = 16778886;
pub const XK_Arabic_ddal: u32 = 16778888;
pub const XK_Arabic_rreh: u32 = 16778897;
pub const XK_Arabic_comma: u32 = 1452;
pub const XK_Arabic_fullstop: u32 = 16778964;
pub const XK_Arabic_0: u32 = 16778848;
pub const XK_Arabic_1: u32 = 16778849;
pub const XK_Arabic_2: u32 = 16778850;
pub const XK_Arabic_3: u32 = 16778851;
pub const XK_Arabic_4: u32 = 16778852;
pub const XK_Arabic_5: u32 = 16778853;
pub const XK_Arabic_6: u32 = 16778854;
pub const XK_Arabic_7: u32 = 16778855;
pub const XK_Arabic_8: u32 = 16778856;
pub const XK_Arabic_9: u32 = 16778857;
pub const XK_Arabic_semicolon: u32 = 1467;
pub const XK_Arabic_question_mark: u32 = 1471;
pub const XK_Arabic_hamza: u32 = 1473;
pub const XK_Arabic_maddaonalef: u32 = 1474;
pub const XK_Arabic_hamzaonalef: u32 = 1475;
pub const XK_Arabic_hamzaonwaw: u32 = 1476;
pub const XK_Arabic_hamzaunderalef: u32 = 1477;
pub const XK_Arabic_hamzaonyeh: u32 = 1478;
pub const XK_Arabic_alef: u32 = 1479;
pub const XK_Arabic_beh: u32 = 1480;
pub const XK_Arabic_tehmarbuta: u32 = 1481;
pub const XK_Arabic_teh: u32 = 1482;
pub const XK_Arabic_theh: u32 = 1483;
pub const XK_Arabic_jeem: u32 = 1484;
pub const XK_Arabic_hah: u32 = 1485;
pub const XK_Arabic_khah: u32 = 1486;
pub const XK_Arabic_dal: u32 = 1487;
pub const XK_Arabic_thal: u32 = 1488;
pub const XK_Arabic_ra: u32 = 1489;
pub const XK_Arabic_zain: u32 = 1490;
pub const XK_Arabic_seen: u32 = 1491;
pub const XK_Arabic_sheen: u32 = 1492;
pub const XK_Arabic_sad: u32 = 1493;
pub const XK_Arabic_dad: u32 = 1494;
pub const XK_Arabic_tah: u32 = 1495;
pub const XK_Arabic_zah: u32 = 1496;
pub const XK_Arabic_ain: u32 = 1497;
pub const XK_Arabic_ghain: u32 = 1498;
pub const XK_Arabic_tatweel: u32 = 1504;
pub const XK_Arabic_feh: u32 = 1505;
pub const XK_Arabic_qaf: u32 = 1506;
pub const XK_Arabic_kaf: u32 = 1507;
pub const XK_Arabic_lam: u32 = 1508;
pub const XK_Arabic_meem: u32 = 1509;
pub const XK_Arabic_noon: u32 = 1510;
pub const XK_Arabic_ha: u32 = 1511;
pub const XK_Arabic_heh: u32 = 1511;
pub const XK_Arabic_waw: u32 = 1512;
pub const XK_Arabic_alefmaksura: u32 = 1513;
pub const XK_Arabic_yeh: u32 = 1514;
pub const XK_Arabic_fathatan: u32 = 1515;
pub const XK_Arabic_dammatan: u32 = 1516;
pub const XK_Arabic_kasratan: u32 = 1517;
pub const XK_Arabic_fatha: u32 = 1518;
pub const XK_Arabic_damma: u32 = 1519;
pub const XK_Arabic_kasra: u32 = 1520;
pub const XK_Arabic_shadda: u32 = 1521;
pub const XK_Arabic_sukun: u32 = 1522;
pub const XK_Arabic_madda_above: u32 = 16778835;
pub const XK_Arabic_hamza_above: u32 = 16778836;
pub const XK_Arabic_hamza_below: u32 = 16778837;
pub const XK_Arabic_jeh: u32 = 16778904;
pub const XK_Arabic_veh: u32 = 16778916;
pub const XK_Arabic_keheh: u32 = 16778921;
pub const XK_Arabic_gaf: u32 = 16778927;
pub const XK_Arabic_noon_ghunna: u32 = 16778938;
pub const XK_Arabic_heh_doachashmee: u32 = 16778942;
pub const XK_Farsi_yeh: u32 = 16778956;
pub const XK_Arabic_farsi_yeh: u32 = 16778956;
pub const XK_Arabic_yeh_baree: u32 = 16778962;
pub const XK_Arabic_heh_goal: u32 = 16778945;
pub const XK_Arabic_switch: u32 = 65406;
pub const XK_Cyrillic_GHE_bar: u32 = 16778386;
pub const XK_Cyrillic_ghe_bar: u32 = 16778387;
pub const XK_Cyrillic_ZHE_descender: u32 = 16778390;
pub const XK_Cyrillic_zhe_descender: u32 = 16778391;
pub const XK_Cyrillic_KA_descender: u32 = 16778394;
pub const XK_Cyrillic_ka_descender: u32 = 16778395;
pub const XK_Cyrillic_KA_vertstroke: u32 = 16778396;
pub const XK_Cyrillic_ka_vertstroke: u32 = 16778397;
pub const XK_Cyrillic_EN_descender: u32 = 16778402;
pub const XK_Cyrillic_en_descender: u32 = 16778403;
pub const XK_Cyrillic_U_straight: u32 = 16778414;
pub const XK_Cyrillic_u_straight: u32 = 16778415;
pub const XK_Cyrillic_U_straight_bar: u32 = 16778416;
pub const XK_Cyrillic_u_straight_bar: u32 = 16778417;
pub const XK_Cyrillic_HA_descender: u32 = 16778418;
pub const XK_Cyrillic_ha_descender: u32 = 16778419;
pub const XK_Cyrillic_CHE_descender: u32 = 16778422;
pub const XK_Cyrillic_che_descender: u32 = 16778423;
pub const XK_Cyrillic_CHE_vertstroke: u32 = 16778424;
pub const XK_Cyrillic_che_vertstroke: u32 = 16778425;
pub const XK_Cyrillic_SHHA: u32 = 16778426;
pub const XK_Cyrillic_shha: u32 = 16778427;
pub const XK_Cyrillic_SCHWA: u32 = 16778456;
pub const XK_Cyrillic_schwa: u32 = 16778457;
pub const XK_Cyrillic_I_macron: u32 = 16778466;
pub const XK_Cyrillic_i_macron: u32 = 16778467;
pub const XK_Cyrillic_O_bar: u32 = 16778472;
pub const XK_Cyrillic_o_bar: u32 = 16778473;
pub const XK_Cyrillic_U_macron: u32 = 16778478;
pub const XK_Cyrillic_u_macron: u32 = 16778479;
pub const XK_Serbian_dje: u32 = 1697;
pub const XK_Macedonia_gje: u32 = 1698;
pub const XK_Cyrillic_io: u32 = 1699;
pub const XK_Ukrainian_ie: u32 = 1700;
pub const XK_Ukranian_je: u32 = 1700;
pub const XK_Macedonia_dse: u32 = 1701;
pub const XK_Ukrainian_i: u32 = 1702;
pub const XK_Ukranian_i: u32 = 1702;
pub const XK_Ukrainian_yi: u32 = 1703;
pub const XK_Ukranian_yi: u32 = 1703;
pub const XK_Cyrillic_je: u32 = 1704;
pub const XK_Serbian_je: u32 = 1704;
pub const XK_Cyrillic_lje: u32 = 1705;
pub const XK_Serbian_lje: u32 = 1705;
pub const XK_Cyrillic_nje: u32 = 1706;
pub const XK_Serbian_nje: u32 = 1706;
pub const XK_Serbian_tshe: u32 = 1707;
pub const XK_Macedonia_kje: u32 = 1708;
pub const XK_Ukrainian_ghe_with_upturn: u32 = 1709;
pub const XK_Byelorussian_shortu: u32 = 1710;
pub const XK_Cyrillic_dzhe: u32 = 1711;
pub const XK_Serbian_dze: u32 = 1711;
pub const XK_numerosign: u32 = 1712;
pub const XK_Serbian_DJE: u32 = 1713;
pub const XK_Macedonia_GJE: u32 = 1714;
pub const XK_Cyrillic_IO: u32 = 1715;
pub const XK_Ukrainian_IE: u32 = 1716;
pub const XK_Ukranian_JE: u32 = 1716;
pub const XK_Macedonia_DSE: u32 = 1717;
pub const XK_Ukrainian_I: u32 = 1718;
pub const XK_Ukranian_I: u32 = 1718;
pub const XK_Ukrainian_YI: u32 = 1719;
pub const XK_Ukranian_YI: u32 = 1719;
pub const XK_Cyrillic_JE: u32 = 1720;
pub const XK_Serbian_JE: u32 = 1720;
pub const XK_Cyrillic_LJE: u32 = 1721;
pub const XK_Serbian_LJE: u32 = 1721;
pub const XK_Cyrillic_NJE: u32 = 1722;
pub const XK_Serbian_NJE: u32 = 1722;
pub const XK_Serbian_TSHE: u32 = 1723;
pub const XK_Macedonia_KJE: u32 = 1724;
pub const XK_Ukrainian_GHE_WITH_UPTURN: u32 = 1725;
pub const XK_Byelorussian_SHORTU: u32 = 1726;
pub const XK_Cyrillic_DZHE: u32 = 1727;
pub const XK_Serbian_DZE: u32 = 1727;
pub const XK_Cyrillic_yu: u32 = 1728;
pub const XK_Cyrillic_a: u32 = 1729;
pub const XK_Cyrillic_be: u32 = 1730;
pub const XK_Cyrillic_tse: u32 = 1731;
pub const XK_Cyrillic_de: u32 = 1732;
pub const XK_Cyrillic_ie: u32 = 1733;
pub const XK_Cyrillic_ef: u32 = 1734;
pub const XK_Cyrillic_ghe: u32 = 1735;
pub const XK_Cyrillic_ha: u32 = 1736;
pub const XK_Cyrillic_i: u32 = 1737;
pub const XK_Cyrillic_shorti: u32 = 1738;
pub const XK_Cyrillic_ka: u32 = 1739;
pub const XK_Cyrillic_el: u32 = 1740;
pub const XK_Cyrillic_em: u32 = 1741;
pub const XK_Cyrillic_en: u32 = 1742;
pub const XK_Cyrillic_o: u32 = 1743;
pub const XK_Cyrillic_pe: u32 = 1744;
pub const XK_Cyrillic_ya: u32 = 1745;
pub const XK_Cyrillic_er: u32 = 1746;
pub const XK_Cyrillic_es: u32 = 1747;
pub const XK_Cyrillic_te: u32 = 1748;
pub const XK_Cyrillic_u: u32 = 1749;
pub const XK_Cyrillic_zhe: u32 = 1750;
pub const XK_Cyrillic_ve: u32 = 1751;
pub const XK_Cyrillic_softsign: u32 = 1752;
pub const XK_Cyrillic_yeru: u32 = 1753;
pub const XK_Cyrillic_ze: u32 = 1754;
pub const XK_Cyrillic_sha: u32 = 1755;
pub const XK_Cyrillic_e: u32 = 1756;
pub const XK_Cyrillic_shcha: u32 = 1757;
pub const XK_Cyrillic_che: u32 = 1758;
pub const XK_Cyrillic_hardsign: u32 = 1759;
pub const XK_Cyrillic_YU: u32 = 1760;
pub const XK_Cyrillic_A: u32 = 1761;
pub const XK_Cyrillic_BE: u32 = 1762;
pub const XK_Cyrillic_TSE: u32 = 1763;
pub const XK_Cyrillic_DE: u32 = 1764;
pub const XK_Cyrillic_IE: u32 = 1765;
pub const XK_Cyrillic_EF: u32 = 1766;
pub const XK_Cyrillic_GHE: u32 = 1767;
pub const XK_Cyrillic_HA: u32 = 1768;
pub const XK_Cyrillic_I: u32 = 1769;
pub const XK_Cyrillic_SHORTI: u32 = 1770;
pub const XK_Cyrillic_KA: u32 = 1771;
pub const XK_Cyrillic_EL: u32 = 1772;
pub const XK_Cyrillic_EM: u32 = 1773;
pub const XK_Cyrillic_EN: u32 = 1774;
pub const XK_Cyrillic_O: u32 = 1775;
pub const XK_Cyrillic_PE: u32 = 1776;
pub const XK_Cyrillic_YA: u32 = 1777;
pub const XK_Cyrillic_ER: u32 = 1778;
pub const XK_Cyrillic_ES: u32 = 1779;
pub const XK_Cyrillic_TE: u32 = 1780;
pub const XK_Cyrillic_U: u32 = 1781;
pub const XK_Cyrillic_ZHE: u32 = 1782;
pub const XK_Cyrillic_VE: u32 = 1783;
pub const XK_Cyrillic_SOFTSIGN: u32 = 1784;
pub const XK_Cyrillic_YERU: u32 = 1785;
pub const XK_Cyrillic_ZE: u32 = 1786;
pub const XK_Cyrillic_SHA: u32 = 1787;
pub const XK_Cyrillic_E: u32 = 1788;
pub const XK_Cyrillic_SHCHA: u32 = 1789;
pub const XK_Cyrillic_CHE: u32 = 1790;
pub const XK_Cyrillic_HARDSIGN: u32 = 1791;
pub const XK_Greek_ALPHAaccent: u32 = 1953;
pub const XK_Greek_EPSILONaccent: u32 = 1954;
pub const XK_Greek_ETAaccent: u32 = 1955;
pub const XK_Greek_IOTAaccent: u32 = 1956;
pub const XK_Greek_IOTAdieresis: u32 = 1957;
pub const XK_Greek_IOTAdiaeresis: u32 = 1957;
pub const XK_Greek_OMICRONaccent: u32 = 1959;
pub const XK_Greek_UPSILONaccent: u32 = 1960;
pub const XK_Greek_UPSILONdieresis: u32 = 1961;
pub const XK_Greek_OMEGAaccent: u32 = 1963;
pub const XK_Greek_accentdieresis: u32 = 1966;
pub const XK_Greek_horizbar: u32 = 1967;
pub const XK_Greek_alphaaccent: u32 = 1969;
pub const XK_Greek_epsilonaccent: u32 = 1970;
pub const XK_Greek_etaaccent: u32 = 1971;
pub const XK_Greek_iotaaccent: u32 = 1972;
pub const XK_Greek_iotadieresis: u32 = 1973;
pub const XK_Greek_iotaaccentdieresis: u32 = 1974;
pub const XK_Greek_omicronaccent: u32 = 1975;
pub const XK_Greek_upsilonaccent: u32 = 1976;
pub const XK_Greek_upsilondieresis: u32 = 1977;
pub const XK_Greek_upsilonaccentdieresis: u32 = 1978;
pub const XK_Greek_omegaaccent: u32 = 1979;
pub const XK_Greek_ALPHA: u32 = 1985;
pub const XK_Greek_BETA: u32 = 1986;
pub const XK_Greek_GAMMA: u32 = 1987;
pub const XK_Greek_DELTA: u32 = 1988;
pub const XK_Greek_EPSILON: u32 = 1989;
pub const XK_Greek_ZETA: u32 = 1990;
pub const XK_Greek_ETA: u32 = 1991;
pub const XK_Greek_THETA: u32 = 1992;
pub const XK_Greek_IOTA: u32 = 1993;
pub const XK_Greek_KAPPA: u32 = 1994;
pub const XK_Greek_LAMDA: u32 = 1995;
pub const XK_Greek_LAMBDA: u32 = 1995;
pub const XK_Greek_MU: u32 = 1996;
pub const XK_Greek_NU: u32 = 1997;
pub const XK_Greek_XI: u32 = 1998;
pub const XK_Greek_OMICRON: u32 = 1999;
pub const XK_Greek_PI: u32 = 2000;
pub const XK_Greek_RHO: u32 = 2001;
pub const XK_Greek_SIGMA: u32 = 2002;
pub const XK_Greek_TAU: u32 = 2004;
pub const XK_Greek_UPSILON: u32 = 2005;
pub const XK_Greek_PHI: u32 = 2006;
pub const XK_Greek_CHI: u32 = 2007;
pub const XK_Greek_PSI: u32 = 2008;
pub const XK_Greek_OMEGA: u32 = 2009;
pub const XK_Greek_alpha: u32 = 2017;
pub const XK_Greek_beta: u32 = 2018;
pub const XK_Greek_gamma: u32 = 2019;
pub const XK_Greek_delta: u32 = 2020;
pub const XK_Greek_epsilon: u32 = 2021;
pub const XK_Greek_zeta: u32 = 2022;
pub const XK_Greek_eta: u32 = 2023;
pub const XK_Greek_theta: u32 = 2024;
pub const XK_Greek_iota: u32 = 2025;
pub const XK_Greek_kappa: u32 = 2026;
pub const XK_Greek_lamda: u32 = 2027;
pub const XK_Greek_lambda: u32 = 2027;
pub const XK_Greek_mu: u32 = 2028;
pub const XK_Greek_nu: u32 = 2029;
pub const XK_Greek_xi: u32 = 2030;
pub const XK_Greek_omicron: u32 = 2031;
pub const XK_Greek_pi: u32 = 2032;
pub const XK_Greek_rho: u32 = 2033;
pub const XK_Greek_sigma: u32 = 2034;
pub const XK_Greek_finalsmallsigma: u32 = 2035;
pub const XK_Greek_tau: u32 = 2036;
pub const XK_Greek_upsilon: u32 = 2037;
pub const XK_Greek_phi: u32 = 2038;
pub const XK_Greek_chi: u32 = 2039;
pub const XK_Greek_psi: u32 = 2040;
pub const XK_Greek_omega: u32 = 2041;
pub const XK_Greek_switch: u32 = 65406;
pub const XK_hebrew_doublelowline: u32 = 3295;
pub const XK_hebrew_aleph: u32 = 3296;
pub const XK_hebrew_bet: u32 = 3297;
pub const XK_hebrew_beth: u32 = 3297;
pub const XK_hebrew_gimel: u32 = 3298;
pub const XK_hebrew_gimmel: u32 = 3298;
pub const XK_hebrew_dalet: u32 = 3299;
pub const XK_hebrew_daleth: u32 = 3299;
pub const XK_hebrew_he: u32 = 3300;
pub const XK_hebrew_waw: u32 = 3301;
pub const XK_hebrew_zain: u32 = 3302;
pub const XK_hebrew_zayin: u32 = 3302;
pub const XK_hebrew_chet: u32 = 3303;
pub const XK_hebrew_het: u32 = 3303;
pub const XK_hebrew_tet: u32 = 3304;
pub const XK_hebrew_teth: u32 = 3304;
pub const XK_hebrew_yod: u32 = 3305;
pub const XK_hebrew_finalkaph: u32 = 3306;
pub const XK_hebrew_kaph: u32 = 3307;
pub const XK_hebrew_lamed: u32 = 3308;
pub const XK_hebrew_finalmem: u32 = 3309;
pub const XK_hebrew_mem: u32 = 3310;
pub const XK_hebrew_finalnun: u32 = 3311;
pub const XK_hebrew_nun: u32 = 3312;
pub const XK_hebrew_samech: u32 = 3313;
pub const XK_hebrew_samekh: u32 = 3313;
pub const XK_hebrew_ayin: u32 = 3314;
pub const XK_hebrew_finalpe: u32 = 3315;
pub const XK_hebrew_pe: u32 = 3316;
pub const XK_hebrew_finalzade: u32 = 3317;
pub const XK_hebrew_finalzadi: u32 = 3317;
pub const XK_hebrew_zade: u32 = 3318;
pub const XK_hebrew_zadi: u32 = 3318;
pub const XK_hebrew_qoph: u32 = 3319;
pub const XK_hebrew_kuf: u32 = 3319;
pub const XK_hebrew_resh: u32 = 3320;
pub const XK_hebrew_shin: u32 = 3321;
pub const XK_hebrew_taw: u32 = 3322;
pub const XK_hebrew_taf: u32 = 3322;
pub const XK_Hebrew_switch: u32 = 65406;
pub const XK_Thai_kokai: u32 = 3489;
pub const XK_Thai_khokhai: u32 = 3490;
pub const XK_Thai_khokhuat: u32 = 3491;
pub const XK_Thai_khokhwai: u32 = 3492;
pub const XK_Thai_khokhon: u32 = 3493;
pub const XK_Thai_khorakhang: u32 = 3494;
pub const XK_Thai_ngongu: u32 = 3495;
pub const XK_Thai_chochan: u32 = 3496;
pub const XK_Thai_choching: u32 = 3497;
pub const XK_Thai_chochang: u32 = 3498;
pub const XK_Thai_soso: u32 = 3499;
pub const XK_Thai_chochoe: u32 = 3500;
pub const XK_Thai_yoying: u32 = 3501;
pub const XK_Thai_dochada: u32 = 3502;
pub const XK_Thai_topatak: u32 = 3503;
pub const XK_Thai_thothan: u32 = 3504;
pub const XK_Thai_thonangmontho: u32 = 3505;
pub const XK_Thai_thophuthao: u32 = 3506;
pub const XK_Thai_nonen: u32 = 3507;
pub const XK_Thai_dodek: u32 = 3508;
pub const XK_Thai_totao: u32 = 3509;
pub const XK_Thai_thothung: u32 = 3510;
pub const XK_Thai_thothahan: u32 = 3511;
pub const XK_Thai_thothong: u32 = 3512;
pub const XK_Thai_nonu: u32 = 3513;
pub const XK_Thai_bobaimai: u32 = 3514;
pub const XK_Thai_popla: u32 = 3515;
pub const XK_Thai_phophung: u32 = 3516;
pub const XK_Thai_fofa: u32 = 3517;
pub const XK_Thai_phophan: u32 = 3518;
pub const XK_Thai_fofan: u32 = 3519;
pub const XK_Thai_phosamphao: u32 = 3520;
pub const XK_Thai_moma: u32 = 3521;
pub const XK_Thai_yoyak: u32 = 3522;
pub const XK_Thai_rorua: u32 = 3523;
pub const XK_Thai_ru: u32 = 3524;
pub const XK_Thai_loling: u32 = 3525;
pub const XK_Thai_lu: u32 = 3526;
pub const XK_Thai_wowaen: u32 = 3527;
pub const XK_Thai_sosala: u32 = 3528;
pub const XK_Thai_sorusi: u32 = 3529;
pub const XK_Thai_sosua: u32 = 3530;
pub const XK_Thai_hohip: u32 = 3531;
pub const XK_Thai_lochula: u32 = 3532;
pub const XK_Thai_oang: u32 = 3533;
pub const XK_Thai_honokhuk: u32 = 3534;
pub const XK_Thai_paiyannoi: u32 = 3535;
pub const XK_Thai_saraa: u32 = 3536;
pub const XK_Thai_maihanakat: u32 = 3537;
pub const XK_Thai_saraaa: u32 = 3538;
pub const XK_Thai_saraam: u32 = 3539;
pub const XK_Thai_sarai: u32 = 3540;
pub const XK_Thai_saraii: u32 = 3541;
pub const XK_Thai_saraue: u32 = 3542;
pub const XK_Thai_sarauee: u32 = 3543;
pub const XK_Thai_sarau: u32 = 3544;
pub const XK_Thai_sarauu: u32 = 3545;
pub const XK_Thai_phinthu: u32 = 3546;
pub const XK_Thai_maihanakat_maitho: u32 = 3550;
pub const XK_Thai_baht: u32 = 3551;
pub const XK_Thai_sarae: u32 = 3552;
pub const XK_Thai_saraae: u32 = 3553;
pub const XK_Thai_sarao: u32 = 3554;
pub const XK_Thai_saraaimaimuan: u32 = 3555;
pub const XK_Thai_saraaimaimalai: u32 = 3556;
pub const XK_Thai_lakkhangyao: u32 = 3557;
pub const XK_Thai_maiyamok: u32 = 3558;
pub const XK_Thai_maitaikhu: u32 = 3559;
pub const XK_Thai_maiek: u32 = 3560;
pub const XK_Thai_maitho: u32 = 3561;
pub const XK_Thai_maitri: u32 = 3562;
pub const XK_Thai_maichattawa: u32 = 3563;
pub const XK_Thai_thanthakhat: u32 = 3564;
pub const XK_Thai_nikhahit: u32 = 3565;
pub const XK_Thai_leksun: u32 = 3568;
pub const XK_Thai_leknung: u32 = 3569;
pub const XK_Thai_leksong: u32 = 3570;
pub const XK_Thai_leksam: u32 = 3571;
pub const XK_Thai_leksi: u32 = 3572;
pub const XK_Thai_lekha: u32 = 3573;
pub const XK_Thai_lekhok: u32 = 3574;
pub const XK_Thai_lekchet: u32 = 3575;
pub const XK_Thai_lekpaet: u32 = 3576;
pub const XK_Thai_lekkao: u32 = 3577;
pub const XK_Hangul: u32 = 65329;
pub const XK_Hangul_Start: u32 = 65330;
pub const XK_Hangul_End: u32 = 65331;
pub const XK_Hangul_Hanja: u32 = 65332;
pub const XK_Hangul_Jamo: u32 = 65333;
pub const XK_Hangul_Romaja: u32 = 65334;
pub const XK_Hangul_Codeinput: u32 = 65335;
pub const XK_Hangul_Jeonja: u32 = 65336;
pub const XK_Hangul_Banja: u32 = 65337;
pub const XK_Hangul_PreHanja: u32 = 65338;
pub const XK_Hangul_PostHanja: u32 = 65339;
pub const XK_Hangul_SingleCandidate: u32 = 65340;
pub const XK_Hangul_MultipleCandidate: u32 = 65341;
pub const XK_Hangul_PreviousCandidate: u32 = 65342;
pub const XK_Hangul_Special: u32 = 65343;
pub const XK_Hangul_switch: u32 = 65406;
pub const XK_Hangul_Kiyeog: u32 = 3745;
pub const XK_Hangul_SsangKiyeog: u32 = 3746;
pub const XK_Hangul_KiyeogSios: u32 = 3747;
pub const XK_Hangul_Nieun: u32 = 3748;
pub const XK_Hangul_NieunJieuj: u32 = 3749;
pub const XK_Hangul_NieunHieuh: u32 = 3750;
pub const XK_Hangul_Dikeud: u32 = 3751;
pub const XK_Hangul_SsangDikeud: u32 = 3752;
pub const XK_Hangul_Rieul: u32 = 3753;
pub const XK_Hangul_RieulKiyeog: u32 = 3754;
pub const XK_Hangul_RieulMieum: u32 = 3755;
pub const XK_Hangul_RieulPieub: u32 = 3756;
pub const XK_Hangul_RieulSios: u32 = 3757;
pub const XK_Hangul_RieulTieut: u32 = 3758;
pub const XK_Hangul_RieulPhieuf: u32 = 3759;
pub const XK_Hangul_RieulHieuh: u32 = 3760;
pub const XK_Hangul_Mieum: u32 = 3761;
pub const XK_Hangul_Pieub: u32 = 3762;
pub const XK_Hangul_SsangPieub: u32 = 3763;
pub const XK_Hangul_PieubSios: u32 = 3764;
pub const XK_Hangul_Sios: u32 = 3765;
pub const XK_Hangul_SsangSios: u32 = 3766;
pub const XK_Hangul_Ieung: u32 = 3767;
pub const XK_Hangul_Jieuj: u32 = 3768;
pub const XK_Hangul_SsangJieuj: u32 = 3769;
pub const XK_Hangul_Cieuc: u32 = 3770;
pub const XK_Hangul_Khieuq: u32 = 3771;
pub const XK_Hangul_Tieut: u32 = 3772;
pub const XK_Hangul_Phieuf: u32 = 3773;
pub const XK_Hangul_Hieuh: u32 = 3774;
pub const XK_Hangul_A: u32 = 3775;
pub const XK_Hangul_AE: u32 = 3776;
pub const XK_Hangul_YA: u32 = 3777;
pub const XK_Hangul_YAE: u32 = 3778;
pub const XK_Hangul_EO: u32 = 3779;
pub const XK_Hangul_E: u32 = 3780;
pub const XK_Hangul_YEO: u32 = 3781;
pub const XK_Hangul_YE: u32 = 3782;
pub const XK_Hangul_O: u32 = 3783;
pub const XK_Hangul_WA: u32 = 3784;
pub const XK_Hangul_WAE: u32 = 3785;
pub const XK_Hangul_OE: u32 = 3786;
pub const XK_Hangul_YO: u32 = 3787;
pub const XK_Hangul_U: u32 = 3788;
pub const XK_Hangul_WEO: u32 = 3789;
pub const XK_Hangul_WE: u32 = 3790;
pub const XK_Hangul_WI: u32 = 3791;
pub const XK_Hangul_YU: u32 = 3792;
pub const XK_Hangul_EU: u32 = 3793;
pub const XK_Hangul_YI: u32 = 3794;
pub const XK_Hangul_I: u32 = 3795;
pub const XK_Hangul_J_Kiyeog: u32 = 3796;
pub const XK_Hangul_J_SsangKiyeog: u32 = 3797;
pub const XK_Hangul_J_KiyeogSios: u32 = 3798;
pub const XK_Hangul_J_Nieun: u32 = 3799;
pub const XK_Hangul_J_NieunJieuj: u32 = 3800;
pub const XK_Hangul_J_NieunHieuh: u32 = 3801;
pub const XK_Hangul_J_Dikeud: u32 = 3802;
pub const XK_Hangul_J_Rieul: u32 = 3803;
pub const XK_Hangul_J_RieulKiyeog: u32 = 3804;
pub const XK_Hangul_J_RieulMieum: u32 = 3805;
pub const XK_Hangul_J_RieulPieub: u32 = 3806;
pub const XK_Hangul_J_RieulSios: u32 = 3807;
pub const XK_Hangul_J_RieulTieut: u32 = 3808;
pub const XK_Hangul_J_RieulPhieuf: u32 = 3809;
pub const XK_Hangul_J_RieulHieuh: u32 = 3810;
pub const XK_Hangul_J_Mieum: u32 = 3811;
pub const XK_Hangul_J_Pieub: u32 = 3812;
pub const XK_Hangul_J_PieubSios: u32 = 3813;
pub const XK_Hangul_J_Sios: u32 = 3814;
pub const XK_Hangul_J_SsangSios: u32 = 3815;
pub const XK_Hangul_J_Ieung: u32 = 3816;
pub const XK_Hangul_J_Jieuj: u32 = 3817;
pub const XK_Hangul_J_Cieuc: u32 = 3818;
pub const XK_Hangul_J_Khieuq: u32 = 3819;
pub const XK_Hangul_J_Tieut: u32 = 3820;
pub const XK_Hangul_J_Phieuf: u32 = 3821;
pub const XK_Hangul_J_Hieuh: u32 = 3822;
pub const XK_Hangul_RieulYeorinHieuh: u32 = 3823;
pub const XK_Hangul_SunkyeongeumMieum: u32 = 3824;
pub const XK_Hangul_SunkyeongeumPieub: u32 = 3825;
pub const XK_Hangul_PanSios: u32 = 3826;
pub const XK_Hangul_KkogjiDalrinIeung: u32 = 3827;
pub const XK_Hangul_SunkyeongeumPhieuf: u32 = 3828;
pub const XK_Hangul_YeorinHieuh: u32 = 3829;
pub const XK_Hangul_AraeA: u32 = 3830;
pub const XK_Hangul_AraeAE: u32 = 3831;
pub const XK_Hangul_J_PanSios: u32 = 3832;
pub const XK_Hangul_J_KkogjiDalrinIeung: u32 = 3833;
pub const XK_Hangul_J_YeorinHieuh: u32 = 3834;
pub const XK_Korean_Won: u32 = 3839;
pub const XK_Armenian_ligature_ew: u32 = 16778631;
pub const XK_Armenian_full_stop: u32 = 16778633;
pub const XK_Armenian_verjaket: u32 = 16778633;
pub const XK_Armenian_separation_mark: u32 = 16778589;
pub const XK_Armenian_but: u32 = 16778589;
pub const XK_Armenian_hyphen: u32 = 16778634;
pub const XK_Armenian_yentamna: u32 = 16778634;
pub const XK_Armenian_exclam: u32 = 16778588;
pub const XK_Armenian_amanak: u32 = 16778588;
pub const XK_Armenian_accent: u32 = 16778587;
pub const XK_Armenian_shesht: u32 = 16778587;
pub const XK_Armenian_question: u32 = 16778590;
pub const XK_Armenian_paruyk: u32 = 16778590;
pub const XK_Armenian_AYB: u32 = 16778545;
pub const XK_Armenian_ayb: u32 = 16778593;
pub const XK_Armenian_BEN: u32 = 16778546;
pub const XK_Armenian_ben: u32 = 16778594;
pub const XK_Armenian_GIM: u32 = 16778547;
pub const XK_Armenian_gim: u32 = 16778595;
pub const XK_Armenian_DA: u32 = 16778548;
pub const XK_Armenian_da: u32 = 16778596;
pub const XK_Armenian_YECH: u32 = 16778549;
pub const XK_Armenian_yech: u32 = 16778597;
pub const XK_Armenian_ZA: u32 = 16778550;
pub const XK_Armenian_za: u32 = 16778598;
pub const XK_Armenian_E: u32 = 16778551;
pub const XK_Armenian_e: u32 = 16778599;
pub const XK_Armenian_AT: u32 = 16778552;
pub const XK_Armenian_at: u32 = 16778600;
pub const XK_Armenian_TO: u32 = 16778553;
pub const XK_Armenian_to: u32 = 16778601;
pub const XK_Armenian_ZHE: u32 = 16778554;
pub const XK_Armenian_zhe: u32 = 16778602;
pub const XK_Armenian_INI: u32 = 16778555;
pub const XK_Armenian_ini: u32 = 16778603;
pub const XK_Armenian_LYUN: u32 = 16778556;
pub const XK_Armenian_lyun: u32 = 16778604;
pub const XK_Armenian_KHE: u32 = 16778557;
pub const XK_Armenian_khe: u32 = 16778605;
pub const XK_Armenian_TSA: u32 = 16778558;
pub const XK_Armenian_tsa: u32 = 16778606;
pub const XK_Armenian_KEN: u32 = 16778559;
pub const XK_Armenian_ken: u32 = 16778607;
pub const XK_Armenian_HO: u32 = 16778560;
pub const XK_Armenian_ho: u32 = 16778608;
pub const XK_Armenian_DZA: u32 = 16778561;
pub const XK_Armenian_dza: u32 = 16778609;
pub const XK_Armenian_GHAT: u32 = 16778562;
pub const XK_Armenian_ghat: u32 = 16778610;
pub const XK_Armenian_TCHE: u32 = 16778563;
pub const XK_Armenian_tche: u32 = 16778611;
pub const XK_Armenian_MEN: u32 = 16778564;
pub const XK_Armenian_men: u32 = 16778612;
pub const XK_Armenian_HI: u32 = 16778565;
pub const XK_Armenian_hi: u32 = 16778613;
pub const XK_Armenian_NU: u32 = 16778566;
pub const XK_Armenian_nu: u32 = 16778614;
pub const XK_Armenian_SHA: u32 = 16778567;
pub const XK_Armenian_sha: u32 = 16778615;
pub const XK_Armenian_VO: u32 = 16778568;
pub const XK_Armenian_vo: u32 = 16778616;
pub const XK_Armenian_CHA: u32 = 16778569;
pub const XK_Armenian_cha: u32 = 16778617;
pub const XK_Armenian_PE: u32 = 16778570;
pub const XK_Armenian_pe: u32 = 16778618;
pub const XK_Armenian_JE: u32 = 16778571;
pub const XK_Armenian_je: u32 = 16778619;
pub const XK_Armenian_RA: u32 = 16778572;
pub const XK_Armenian_ra: u32 = 16778620;
pub const XK_Armenian_SE: u32 = 16778573;
pub const XK_Armenian_se: u32 = 16778621;
pub const XK_Armenian_VEV: u32 = 16778574;
pub const XK_Armenian_vev: u32 = 16778622;
pub const XK_Armenian_TYUN: u32 = 16778575;
pub const XK_Armenian_tyun: u32 = 16778623;
pub const XK_Armenian_RE: u32 = 16778576;
pub const XK_Armenian_re: u32 = 16778624;
pub const XK_Armenian_TSO: u32 = 16778577;
pub const XK_Armenian_tso: u32 = 16778625;
pub const XK_Armenian_VYUN: u32 = 16778578;
pub const XK_Armenian_vyun: u32 = 16778626;
pub const XK_Armenian_PYUR: u32 = 16778579;
pub const XK_Armenian_pyur: u32 = 16778627;
pub const XK_Armenian_KE: u32 = 16778580;
pub const XK_Armenian_ke: u32 = 16778628;
pub const XK_Armenian_O: u32 = 16778581;
pub const XK_Armenian_o: u32 = 16778629;
pub const XK_Armenian_FE: u32 = 16778582;
pub const XK_Armenian_fe: u32 = 16778630;
pub const XK_Armenian_apostrophe: u32 = 16778586;
pub const XK_Georgian_an: u32 = 16781520;
pub const XK_Georgian_ban: u32 = 16781521;
pub const XK_Georgian_gan: u32 = 16781522;
pub const XK_Georgian_don: u32 = 16781523;
pub const XK_Georgian_en: u32 = 16781524;
pub const XK_Georgian_vin: u32 = 16781525;
pub const XK_Georgian_zen: u32 = 16781526;
pub const XK_Georgian_tan: u32 = 16781527;
pub const XK_Georgian_in: u32 = 16781528;
pub const XK_Georgian_kan: u32 = 16781529;
pub const XK_Georgian_las: u32 = 16781530;
pub const XK_Georgian_man: u32 = 16781531;
pub const XK_Georgian_nar: u32 = 16781532;
pub const XK_Georgian_on: u32 = 16781533;
pub const XK_Georgian_par: u32 = 16781534;
pub const XK_Georgian_zhar: u32 = 16781535;
pub const XK_Georgian_rae: u32 = 16781536;
pub const XK_Georgian_san: u32 = 16781537;
pub const XK_Georgian_tar: u32 = 16781538;
pub const XK_Georgian_un: u32 = 16781539;
pub const XK_Georgian_phar: u32 = 16781540;
pub const XK_Georgian_khar: u32 = 16781541;
pub const XK_Georgian_ghan: u32 = 16781542;
pub const XK_Georgian_qar: u32 = 16781543;
pub const XK_Georgian_shin: u32 = 16781544;
pub const XK_Georgian_chin: u32 = 16781545;
pub const XK_Georgian_can: u32 = 16781546;
pub const XK_Georgian_jil: u32 = 16781547;
pub const XK_Georgian_cil: u32 = 16781548;
pub const XK_Georgian_char: u32 = 16781549;
pub const XK_Georgian_xan: u32 = 16781550;
pub const XK_Georgian_jhan: u32 = 16781551;
pub const XK_Georgian_hae: u32 = 16781552;
pub const XK_Georgian_he: u32 = 16781553;
pub const XK_Georgian_hie: u32 = 16781554;
pub const XK_Georgian_we: u32 = 16781555;
pub const XK_Georgian_har: u32 = 16781556;
pub const XK_Georgian_hoe: u32 = 16781557;
pub const XK_Georgian_fi: u32 = 16781558;
pub const XK_Xabovedot: u32 = 16785034;
pub const XK_Ibreve: u32 = 16777516;
pub const XK_Zstroke: u32 = 16777653;
pub const XK_Gcaron: u32 = 16777702;
pub const XK_Ocaron: u32 = 16777681;
pub const XK_Obarred: u32 = 16777631;
pub const XK_xabovedot: u32 = 16785035;
pub const XK_ibreve: u32 = 16777517;
pub const XK_zstroke: u32 = 16777654;
pub const XK_gcaron: u32 = 16777703;
pub const XK_ocaron: u32 = 16777682;
pub const XK_obarred: u32 = 16777845;
pub const XK_SCHWA: u32 = 16777615;
pub const XK_schwa: u32 = 16777817;
pub const XK_EZH: u32 = 16777655;
pub const XK_ezh: u32 = 16777874;
pub const XK_Lbelowdot: u32 = 16784950;
pub const XK_lbelowdot: u32 = 16784951;
pub const XK_Abelowdot: u32 = 16785056;
pub const XK_abelowdot: u32 = 16785057;
pub const XK_Ahook: u32 = 16785058;
pub const XK_ahook: u32 = 16785059;
pub const XK_Acircumflexacute: u32 = 16785060;
pub const XK_acircumflexacute: u32 = 16785061;
pub const XK_Acircumflexgrave: u32 = 16785062;
pub const XK_acircumflexgrave: u32 = 16785063;
pub const XK_Acircumflexhook: u32 = 16785064;
pub const XK_acircumflexhook: u32 = 16785065;
pub const XK_Acircumflextilde: u32 = 16785066;
pub const XK_acircumflextilde: u32 = 16785067;
pub const XK_Acircumflexbelowdot: u32 = 16785068;
pub const XK_acircumflexbelowdot: u32 = 16785069;
pub const XK_Abreveacute: u32 = 16785070;
pub const XK_abreveacute: u32 = 16785071;
pub const XK_Abrevegrave: u32 = 16785072;
pub const XK_abrevegrave: u32 = 16785073;
pub const XK_Abrevehook: u32 = 16785074;
pub const XK_abrevehook: u32 = 16785075;
pub const XK_Abrevetilde: u32 = 16785076;
pub const XK_abrevetilde: u32 = 16785077;
pub const XK_Abrevebelowdot: u32 = 16785078;
pub const XK_abrevebelowdot: u32 = 16785079;
pub const XK_Ebelowdot: u32 = 16785080;
pub const XK_ebelowdot: u32 = 16785081;
pub const XK_Ehook: u32 = 16785082;
pub const XK_ehook: u32 = 16785083;
pub const XK_Etilde: u32 = 16785084;
pub const XK_etilde: u32 = 16785085;
pub const XK_Ecircumflexacute: u32 = 16785086;
pub const XK_ecircumflexacute: u32 = 16785087;
pub const XK_Ecircumflexgrave: u32 = 16785088;
pub const XK_ecircumflexgrave: u32 = 16785089;
pub const XK_Ecircumflexhook: u32 = 16785090;
pub const XK_ecircumflexhook: u32 = 16785091;
pub const XK_Ecircumflextilde: u32 = 16785092;
pub const XK_ecircumflextilde: u32 = 16785093;
pub const XK_Ecircumflexbelowdot: u32 = 16785094;
pub const XK_ecircumflexbelowdot: u32 = 16785095;
pub const XK_Ihook: u32 = 16785096;
pub const XK_ihook: u32 = 16785097;
pub const XK_Ibelowdot: u32 = 16785098;
pub const XK_ibelowdot: u32 = 16785099;
pub const XK_Obelowdot: u32 = 16785100;
pub const XK_obelowdot: u32 = 16785101;
pub const XK_Ohook: u32 = 16785102;
pub const XK_ohook: u32 = 16785103;
pub const XK_Ocircumflexacute: u32 = 16785104;
pub const XK_ocircumflexacute: u32 = 16785105;
pub const XK_Ocircumflexgrave: u32 = 16785106;
pub const XK_ocircumflexgrave: u32 = 16785107;
pub const XK_Ocircumflexhook: u32 = 16785108;
pub const XK_ocircumflexhook: u32 = 16785109;
pub const XK_Ocircumflextilde: u32 = 16785110;
pub const XK_ocircumflextilde: u32 = 16785111;
pub const XK_Ocircumflexbelowdot: u32 = 16785112;
pub const XK_ocircumflexbelowdot: u32 = 16785113;
pub const XK_Ohornacute: u32 = 16785114;
pub const XK_ohornacute: u32 = 16785115;
pub const XK_Ohorngrave: u32 = 16785116;
pub const XK_ohorngrave: u32 = 16785117;
pub const XK_Ohornhook: u32 = 16785118;
pub const XK_ohornhook: u32 = 16785119;
pub const XK_Ohorntilde: u32 = 16785120;
pub const XK_ohorntilde: u32 = 16785121;
pub const XK_Ohornbelowdot: u32 = 16785122;
pub const XK_ohornbelowdot: u32 = 16785123;
pub const XK_Ubelowdot: u32 = 16785124;
pub const XK_ubelowdot: u32 = 16785125;
pub const XK_Uhook: u32 = 16785126;
pub const XK_uhook: u32 = 16785127;
pub const XK_Uhornacute: u32 = 16785128;
pub const XK_uhornacute: u32 = 16785129;
pub const XK_Uhorngrave: u32 = 16785130;
pub const XK_uhorngrave: u32 = 16785131;
pub const XK_Uhornhook: u32 = 16785132;
pub const XK_uhornhook: u32 = 16785133;
pub const XK_Uhorntilde: u32 = 16785134;
pub const XK_uhorntilde: u32 = 16785135;
pub const XK_Uhornbelowdot: u32 = 16785136;
pub const XK_uhornbelowdot: u32 = 16785137;
pub const XK_Ybelowdot: u32 = 16785140;
pub const XK_ybelowdot: u32 = 16785141;
pub const XK_Yhook: u32 = 16785142;
pub const XK_yhook: u32 = 16785143;
pub const XK_Ytilde: u32 = 16785144;
pub const XK_ytilde: u32 = 16785145;
pub const XK_Ohorn: u32 = 16777632;
pub const XK_ohorn: u32 = 16777633;
pub const XK_Uhorn: u32 = 16777647;
pub const XK_uhorn: u32 = 16777648;
pub const XK_combining_tilde: u32 = 16777987;
pub const XK_combining_grave: u32 = 16777984;
pub const XK_combining_acute: u32 = 16777985;
pub const XK_combining_hook: u32 = 16777993;
pub const XK_combining_belowdot: u32 = 16778019;
pub const XK_EcuSign: u32 = 16785568;
pub const XK_ColonSign: u32 = 16785569;
pub const XK_CruzeiroSign: u32 = 16785570;
pub const XK_FFrancSign: u32 = 16785571;
pub const XK_LiraSign: u32 = 16785572;
pub const XK_MillSign: u32 = 16785573;
pub const XK_NairaSign: u32 = 16785574;
pub const XK_PesetaSign: u32 = 16785575;
pub const XK_RupeeSign: u32 = 16785576;
pub const XK_WonSign: u32 = 16785577;
pub const XK_NewSheqelSign: u32 = 16785578;
pub const XK_DongSign: u32 = 16785579;
pub const XK_EuroSign: u32 = 8364;
pub const XK_zerosuperior: u32 = 16785520;
pub const XK_foursuperior: u32 = 16785524;
pub const XK_fivesuperior: u32 = 16785525;
pub const XK_sixsuperior: u32 = 16785526;
pub const XK_sevensuperior: u32 = 16785527;
pub const XK_eightsuperior: u32 = 16785528;
pub const XK_ninesuperior: u32 = 16785529;
pub const XK_zerosubscript: u32 = 16785536;
pub const XK_onesubscript: u32 = 16785537;
pub const XK_twosubscript: u32 = 16785538;
pub const XK_threesubscript: u32 = 16785539;
pub const XK_foursubscript: u32 = 16785540;
pub const XK_fivesubscript: u32 = 16785541;
pub const XK_sixsubscript: u32 = 16785542;
pub const XK_sevensubscript: u32 = 16785543;
pub const XK_eightsubscript: u32 = 16785544;
pub const XK_ninesubscript: u32 = 16785545;
pub const XK_partdifferential: u32 = 16785922;
pub const XK_emptyset: u32 = 16785925;
pub const XK_elementof: u32 = 16785928;
pub const XK_notelementof: u32 = 16785929;
pub const XK_containsas: u32 = 16785931;
pub const XK_squareroot: u32 = 16785946;
pub const XK_cuberoot: u32 = 16785947;
pub const XK_fourthroot: u32 = 16785948;
pub const XK_dintegral: u32 = 16785964;
pub const XK_tintegral: u32 = 16785965;
pub const XK_because: u32 = 16785973;
pub const XK_approxeq: u32 = 16785992;
pub const XK_notapproxeq: u32 = 16785991;
pub const XK_notidentical: u32 = 16786018;
pub const XK_stricteq: u32 = 16786019;
pub const XK_braille_dot_1: u32 = 65521;
pub const XK_braille_dot_2: u32 = 65522;
pub const XK_braille_dot_3: u32 = 65523;
pub const XK_braille_dot_4: u32 = 65524;
pub const XK_braille_dot_5: u32 = 65525;
pub const XK_braille_dot_6: u32 = 65526;
pub const XK_braille_dot_7: u32 = 65527;
pub const XK_braille_dot_8: u32 = 65528;
pub const XK_braille_dot_9: u32 = 65529;
pub const XK_braille_dot_10: u32 = 65530;
pub const XK_braille_blank: u32 = 16787456;
pub const XK_braille_dots_1: u32 = 16787457;
pub const XK_braille_dots_2: u32 = 16787458;
pub const XK_braille_dots_12: u32 = 16787459;
pub const XK_braille_dots_3: u32 = 16787460;
pub const XK_braille_dots_13: u32 = 16787461;
pub const XK_braille_dots_23: u32 = 16787462;
pub const XK_braille_dots_123: u32 = 16787463;
pub const XK_braille_dots_4: u32 = 16787464;
pub const XK_braille_dots_14: u32 = 16787465;
pub const XK_braille_dots_24: u32 = 16787466;
pub const XK_braille_dots_124: u32 = 16787467;
pub const XK_braille_dots_34: u32 = 16787468;
pub const XK_braille_dots_134: u32 = 16787469;
pub const XK_braille_dots_234: u32 = 16787470;
pub const XK_braille_dots_1234: u32 = 16787471;
pub const XK_braille_dots_5: u32 = 16787472;
pub const XK_braille_dots_15: u32 = 16787473;
pub const XK_braille_dots_25: u32 = 16787474;
pub const XK_braille_dots_125: u32 = 16787475;
pub const XK_braille_dots_35: u32 = 16787476;
pub const XK_braille_dots_135: u32 = 16787477;
pub const XK_braille_dots_235: u32 = 16787478;
pub const XK_braille_dots_1235: u32 = 16787479;
pub const XK_braille_dots_45: u32 = 16787480;
pub const XK_braille_dots_145: u32 = 16787481;
pub const XK_braille_dots_245: u32 = 16787482;
pub const XK_braille_dots_1245: u32 = 16787483;
pub const XK_braille_dots_345: u32 = 16787484;
pub const XK_braille_dots_1345: u32 = 16787485;
pub const XK_braille_dots_2345: u32 = 16787486;
pub const XK_braille_dots_12345: u32 = 16787487;
pub const XK_braille_dots_6: u32 = 16787488;
pub const XK_braille_dots_16: u32 = 16787489;
pub const XK_braille_dots_26: u32 = 16787490;
pub const XK_braille_dots_126: u32 = 16787491;
pub const XK_braille_dots_36: u32 = 16787492;
pub const XK_braille_dots_136: u32 = 16787493;
pub const XK_braille_dots_236: u32 = 16787494;
pub const XK_braille_dots_1236: u32 = 16787495;
pub const XK_braille_dots_46: u32 = 16787496;
pub const XK_braille_dots_146: u32 = 16787497;
pub const XK_braille_dots_246: u32 = 16787498;
pub const XK_braille_dots_1246: u32 = 16787499;
pub const XK_braille_dots_346: u32 = 16787500;
pub const XK_braille_dots_1346: u32 = 16787501;
pub const XK_braille_dots_2346: u32 = 16787502;
pub const XK_braille_dots_12346: u32 = 16787503;
pub const XK_braille_dots_56: u32 = 16787504;
pub const XK_braille_dots_156: u32 = 16787505;
pub const XK_braille_dots_256: u32 = 16787506;
pub const XK_braille_dots_1256: u32 = 16787507;
pub const XK_braille_dots_356: u32 = 16787508;
pub const XK_braille_dots_1356: u32 = 16787509;
pub const XK_braille_dots_2356: u32 = 16787510;
pub const XK_braille_dots_12356: u32 = 16787511;
pub const XK_braille_dots_456: u32 = 16787512;
pub const XK_braille_dots_1456: u32 = 16787513;
pub const XK_braille_dots_2456: u32 = 16787514;
pub const XK_braille_dots_12456: u32 = 16787515;
pub const XK_braille_dots_3456: u32 = 16787516;
pub const XK_braille_dots_13456: u32 = 16787517;
pub const XK_braille_dots_23456: u32 = 16787518;
pub const XK_braille_dots_123456: u32 = 16787519;
pub const XK_braille_dots_7: u32 = 16787520;
pub const XK_braille_dots_17: u32 = 16787521;
pub const XK_braille_dots_27: u32 = 16787522;
pub const XK_braille_dots_127: u32 = 16787523;
pub const XK_braille_dots_37: u32 = 16787524;
pub const XK_braille_dots_137: u32 = 16787525;
pub const XK_braille_dots_237: u32 = 16787526;
pub const XK_braille_dots_1237: u32 = 16787527;
pub const XK_braille_dots_47: u32 = 16787528;
pub const XK_braille_dots_147: u32 = 16787529;
pub const XK_braille_dots_247: u32 = 16787530;
pub const XK_braille_dots_1247: u32 = 16787531;
pub const XK_braille_dots_347: u32 = 16787532;
pub const XK_braille_dots_1347: u32 = 16787533;
pub const XK_braille_dots_2347: u32 = 16787534;
pub const XK_braille_dots_12347: u32 = 16787535;
pub const XK_braille_dots_57: u32 = 16787536;
pub const XK_braille_dots_157: u32 = 16787537;
pub const XK_braille_dots_257: u32 = 16787538;
pub const XK_braille_dots_1257: u32 = 16787539;
pub const XK_braille_dots_357: u32 = 16787540;
pub const XK_braille_dots_1357: u32 = 16787541;
pub const XK_braille_dots_2357: u32 = 16787542;
pub const XK_braille_dots_12357: u32 = 16787543;
pub const XK_braille_dots_457: u32 = 16787544;
pub const XK_braille_dots_1457: u32 = 16787545;
pub const XK_braille_dots_2457: u32 = 16787546;
pub const XK_braille_dots_12457: u32 = 16787547;
pub const XK_braille_dots_3457: u32 = 16787548;
pub const XK_braille_dots_13457: u32 = 16787549;
pub const XK_braille_dots_23457: u32 = 16787550;
pub const XK_braille_dots_123457: u32 = 16787551;
pub const XK_braille_dots_67: u32 = 16787552;
pub const XK_braille_dots_167: u32 = 16787553;
pub const XK_braille_dots_267: u32 = 16787554;
pub const XK_braille_dots_1267: u32 = 16787555;
pub const XK_braille_dots_367: u32 = 16787556;
pub const XK_braille_dots_1367: u32 = 16787557;
pub const XK_braille_dots_2367: u32 = 16787558;
pub const XK_braille_dots_12367: u32 = 16787559;
pub const XK_braille_dots_467: u32 = 16787560;
pub const XK_braille_dots_1467: u32 = 16787561;
pub const XK_braille_dots_2467: u32 = 16787562;
pub const XK_braille_dots_12467: u32 = 16787563;
pub const XK_braille_dots_3467: u32 = 16787564;
pub const XK_braille_dots_13467: u32 = 16787565;
pub const XK_braille_dots_23467: u32 = 16787566;
pub const XK_braille_dots_123467: u32 = 16787567;
pub const XK_braille_dots_567: u32 = 16787568;
pub const XK_braille_dots_1567: u32 = 16787569;
pub const XK_braille_dots_2567: u32 = 16787570;
pub const XK_braille_dots_12567: u32 = 16787571;
pub const XK_braille_dots_3567: u32 = 16787572;
pub const XK_braille_dots_13567: u32 = 16787573;
pub const XK_braille_dots_23567: u32 = 16787574;
pub const XK_braille_dots_123567: u32 = 16787575;
pub const XK_braille_dots_4567: u32 = 16787576;
pub const XK_braille_dots_14567: u32 = 16787577;
pub const XK_braille_dots_24567: u32 = 16787578;
pub const XK_braille_dots_124567: u32 = 16787579;
pub const XK_braille_dots_34567: u32 = 16787580;
pub const XK_braille_dots_134567: u32 = 16787581;
pub const XK_braille_dots_234567: u32 = 16787582;
pub const XK_braille_dots_1234567: u32 = 16787583;
pub const XK_braille_dots_8: u32 = 16787584;
pub const XK_braille_dots_18: u32 = 16787585;
pub const XK_braille_dots_28: u32 = 16787586;
pub const XK_braille_dots_128: u32 = 16787587;
pub const XK_braille_dots_38: u32 = 16787588;
pub const XK_braille_dots_138: u32 = 16787589;
pub const XK_braille_dots_238: u32 = 16787590;
pub const XK_braille_dots_1238: u32 = 16787591;
pub const XK_braille_dots_48: u32 = 16787592;
pub const XK_braille_dots_148: u32 = 16787593;
pub const XK_braille_dots_248: u32 = 16787594;
pub const XK_braille_dots_1248: u32 = 16787595;
pub const XK_braille_dots_348: u32 = 16787596;
pub const XK_braille_dots_1348: u32 = 16787597;
pub const XK_braille_dots_2348: u32 = 16787598;
pub const XK_braille_dots_12348: u32 = 16787599;
pub const XK_braille_dots_58: u32 = 16787600;
pub const XK_braille_dots_158: u32 = 16787601;
pub const XK_braille_dots_258: u32 = 16787602;
pub const XK_braille_dots_1258: u32 = 16787603;
pub const XK_braille_dots_358: u32 = 16787604;
pub const XK_braille_dots_1358: u32 = 16787605;
pub const XK_braille_dots_2358: u32 = 16787606;
pub const XK_braille_dots_12358: u32 = 16787607;
pub const XK_braille_dots_458: u32 = 16787608;
pub const XK_braille_dots_1458: u32 = 16787609;
pub const XK_braille_dots_2458: u32 = 16787610;
pub const XK_braille_dots_12458: u32 = 16787611;
pub const XK_braille_dots_3458: u32 = 16787612;
pub const XK_braille_dots_13458: u32 = 16787613;
pub const XK_braille_dots_23458: u32 = 16787614;
pub const XK_braille_dots_123458: u32 = 16787615;
pub const XK_braille_dots_68: u32 = 16787616;
pub const XK_braille_dots_168: u32 = 16787617;
pub const XK_braille_dots_268: u32 = 16787618;
pub const XK_braille_dots_1268: u32 = 16787619;
pub const XK_braille_dots_368: u32 = 16787620;
pub const XK_braille_dots_1368: u32 = 16787621;
pub const XK_braille_dots_2368: u32 = 16787622;
pub const XK_braille_dots_12368: u32 = 16787623;
pub const XK_braille_dots_468: u32 = 16787624;
pub const XK_braille_dots_1468: u32 = 16787625;
pub const XK_braille_dots_2468: u32 = 16787626;
pub const XK_braille_dots_12468: u32 = 16787627;
pub const XK_braille_dots_3468: u32 = 16787628;
pub const XK_braille_dots_13468: u32 = 16787629;
pub const XK_braille_dots_23468: u32 = 16787630;
pub const XK_braille_dots_123468: u32 = 16787631;
pub const XK_braille_dots_568: u32 = 16787632;
pub const XK_braille_dots_1568: u32 = 16787633;
pub const XK_braille_dots_2568: u32 = 16787634;
pub const XK_braille_dots_12568: u32 = 16787635;
pub const XK_braille_dots_3568: u32 = 16787636;
pub const XK_braille_dots_13568: u32 = 16787637;
pub const XK_braille_dots_23568: u32 = 16787638;
pub const XK_braille_dots_123568: u32 = 16787639;
pub const XK_braille_dots_4568: u32 = 16787640;
pub const XK_braille_dots_14568: u32 = 16787641;
pub const XK_braille_dots_24568: u32 = 16787642;
pub const XK_braille_dots_124568: u32 = 16787643;
pub const XK_braille_dots_34568: u32 = 16787644;
pub const XK_braille_dots_134568: u32 = 16787645;
pub const XK_braille_dots_234568: u32 = 16787646;
pub const XK_braille_dots_1234568: u32 = 16787647;
pub const XK_braille_dots_78: u32 = 16787648;
pub const XK_braille_dots_178: u32 = 16787649;
pub const XK_braille_dots_278: u32 = 16787650;
pub const XK_braille_dots_1278: u32 = 16787651;
pub const XK_braille_dots_378: u32 = 16787652;
pub const XK_braille_dots_1378: u32 = 16787653;
pub const XK_braille_dots_2378: u32 = 16787654;
pub const XK_braille_dots_12378: u32 = 16787655;
pub const XK_braille_dots_478: u32 = 16787656;
pub const XK_braille_dots_1478: u32 = 16787657;
pub const XK_braille_dots_2478: u32 = 16787658;
pub const XK_braille_dots_12478: u32 = 16787659;
pub const XK_braille_dots_3478: u32 = 16787660;
pub const XK_braille_dots_13478: u32 = 16787661;
pub const XK_braille_dots_23478: u32 = 16787662;
pub const XK_braille_dots_123478: u32 = 16787663;
pub const XK_braille_dots_578: u32 = 16787664;
pub const XK_braille_dots_1578: u32 = 16787665;
pub const XK_braille_dots_2578: u32 = 16787666;
pub const XK_braille_dots_12578: u32 = 16787667;
pub const XK_braille_dots_3578: u32 = 16787668;
pub const XK_braille_dots_13578: u32 = 16787669;
pub const XK_braille_dots_23578: u32 = 16787670;
pub const XK_braille_dots_123578: u32 = 16787671;
pub const XK_braille_dots_4578: u32 = 16787672;
pub const XK_braille_dots_14578: u32 = 16787673;
pub const XK_braille_dots_24578: u32 = 16787674;
pub const XK_braille_dots_124578: u32 = 16787675;
pub const XK_braille_dots_34578: u32 = 16787676;
pub const XK_braille_dots_134578: u32 = 16787677;
pub const XK_braille_dots_234578: u32 = 16787678;
pub const XK_braille_dots_1234578: u32 = 16787679;
pub const XK_braille_dots_678: u32 = 16787680;
pub const XK_braille_dots_1678: u32 = 16787681;
pub const XK_braille_dots_2678: u32 = 16787682;
pub const XK_braille_dots_12678: u32 = 16787683;
pub const XK_braille_dots_3678: u32 = 16787684;
pub const XK_braille_dots_13678: u32 = 16787685;
pub const XK_braille_dots_23678: u32 = 16787686;
pub const XK_braille_dots_123678: u32 = 16787687;
pub const XK_braille_dots_4678: u32 = 16787688;
pub const XK_braille_dots_14678: u32 = 16787689;
pub const XK_braille_dots_24678: u32 = 16787690;
pub const XK_braille_dots_124678: u32 = 16787691;
pub const XK_braille_dots_34678: u32 = 16787692;
pub const XK_braille_dots_134678: u32 = 16787693;
pub const XK_braille_dots_234678: u32 = 16787694;
pub const XK_braille_dots_1234678: u32 = 16787695;
pub const XK_braille_dots_5678: u32 = 16787696;
pub const XK_braille_dots_15678: u32 = 16787697;
pub const XK_braille_dots_25678: u32 = 16787698;
pub const XK_braille_dots_125678: u32 = 16787699;
pub const XK_braille_dots_35678: u32 = 16787700;
pub const XK_braille_dots_135678: u32 = 16787701;
pub const XK_braille_dots_235678: u32 = 16787702;
pub const XK_braille_dots_1235678: u32 = 16787703;
pub const XK_braille_dots_45678: u32 = 16787704;
pub const XK_braille_dots_145678: u32 = 16787705;
pub const XK_braille_dots_245678: u32 = 16787706;
pub const XK_braille_dots_1245678: u32 = 16787707;
pub const XK_braille_dots_345678: u32 = 16787708;
pub const XK_braille_dots_1345678: u32 = 16787709;
pub const XK_braille_dots_2345678: u32 = 16787710;
pub const XK_braille_dots_12345678: u32 = 16787711;
pub const XK_Sinh_ng: u32 = 16780674;
pub const XK_Sinh_h2: u32 = 16780675;
pub const XK_Sinh_a: u32 = 16780677;
pub const XK_Sinh_aa: u32 = 16780678;
pub const XK_Sinh_ae: u32 = 16780679;
pub const XK_Sinh_aee: u32 = 16780680;
pub const XK_Sinh_i: u32 = 16780681;
pub const XK_Sinh_ii: u32 = 16780682;
pub const XK_Sinh_u: u32 = 16780683;
pub const XK_Sinh_uu: u32 = 16780684;
pub const XK_Sinh_ri: u32 = 16780685;
pub const XK_Sinh_rii: u32 = 16780686;
pub const XK_Sinh_lu: u32 = 16780687;
pub const XK_Sinh_luu: u32 = 16780688;
pub const XK_Sinh_e: u32 = 16780689;
pub const XK_Sinh_ee: u32 = 16780690;
pub const XK_Sinh_ai: u32 = 16780691;
pub const XK_Sinh_o: u32 = 16780692;
pub const XK_Sinh_oo: u32 = 16780693;
pub const XK_Sinh_au: u32 = 16780694;
pub const XK_Sinh_ka: u32 = 16780698;
pub const XK_Sinh_kha: u32 = 16780699;
pub const XK_Sinh_ga: u32 = 16780700;
pub const XK_Sinh_gha: u32 = 16780701;
pub const XK_Sinh_ng2: u32 = 16780702;
pub const XK_Sinh_nga: u32 = 16780703;
pub const XK_Sinh_ca: u32 = 16780704;
pub const XK_Sinh_cha: u32 = 16780705;
pub const XK_Sinh_ja: u32 = 16780706;
pub const XK_Sinh_jha: u32 = 16780707;
pub const XK_Sinh_nya: u32 = 16780708;
pub const XK_Sinh_jnya: u32 = 16780709;
pub const XK_Sinh_nja: u32 = 16780710;
pub const XK_Sinh_tta: u32 = 16780711;
pub const XK_Sinh_ttha: u32 = 16780712;
pub const XK_Sinh_dda: u32 = 16780713;
pub const XK_Sinh_ddha: u32 = 16780714;
pub const XK_Sinh_nna: u32 = 16780715;
pub const XK_Sinh_ndda: u32 = 16780716;
pub const XK_Sinh_tha: u32 = 16780717;
pub const XK_Sinh_thha: u32 = 16780718;
pub const XK_Sinh_dha: u32 = 16780719;
pub const XK_Sinh_dhha: u32 = 16780720;
pub const XK_Sinh_na: u32 = 16780721;
pub const XK_Sinh_ndha: u32 = 16780723;
pub const XK_Sinh_pa: u32 = 16780724;
pub const XK_Sinh_pha: u32 = 16780725;
pub const XK_Sinh_ba: u32 = 16780726;
pub const XK_Sinh_bha: u32 = 16780727;
pub const XK_Sinh_ma: u32 = 16780728;
pub const XK_Sinh_mba: u32 = 16780729;
pub const XK_Sinh_ya: u32 = 16780730;
pub const XK_Sinh_ra: u32 = 16780731;
pub const XK_Sinh_la: u32 = 16780733;
pub const XK_Sinh_va: u32 = 16780736;
pub const XK_Sinh_sha: u32 = 16780737;
pub const XK_Sinh_ssha: u32 = 16780738;
pub const XK_Sinh_sa: u32 = 16780739;
pub const XK_Sinh_ha: u32 = 16780740;
pub const XK_Sinh_lla: u32 = 16780741;
pub const XK_Sinh_fa: u32 = 16780742;
pub const XK_Sinh_al: u32 = 16780746;
pub const XK_Sinh_aa2: u32 = 16780751;
pub const XK_Sinh_ae2: u32 = 16780752;
pub const XK_Sinh_aee2: u32 = 16780753;
pub const XK_Sinh_i2: u32 = 16780754;
pub const XK_Sinh_ii2: u32 = 16780755;
pub const XK_Sinh_u2: u32 = 16780756;
pub const XK_Sinh_uu2: u32 = 16780758;
pub const XK_Sinh_ru2: u32 = 16780760;
pub const XK_Sinh_e2: u32 = 16780761;
pub const XK_Sinh_ee2: u32 = 16780762;
pub const XK_Sinh_ai2: u32 = 16780763;
pub const XK_Sinh_o2: u32 = 16780764;
pub const XK_Sinh_oo2: u32 = 16780765;
pub const XK_Sinh_au2: u32 = 16780766;
pub const XK_Sinh_lu2: u32 = 16780767;
pub const XK_Sinh_ruu2: u32 = 16780786;
pub const XK_Sinh_luu2: u32 = 16780787;
pub const XK_Sinh_kunddaliya: u32 = 16780788;
pub const XFT_MAJOR: u32 = 2;
pub const XFT_MINOR: u32 = 3;
pub const XFT_REVISION: u32 = 6;
pub const XFT_VERSION: u32 = 20306;
pub const XftVersion: u32 = 20306;
pub const FT_RENDER_POOL_SIZE: u32 = 16384;
pub const FT_MAX_MODULES: u32 = 32;
pub const TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES: u32 = 1000000;
pub const T1_MAX_DICT_DEPTH: u32 = 5;
pub const T1_MAX_SUBRS_CALLS: u32 = 16;
pub const T1_MAX_CHARSTRINGS_OPERANDS: u32 = 256;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1: u32 = 500;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1: u32 = 400;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_X2: u32 = 1000;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y2: u32 = 275;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_X3: u32 = 1667;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y3: u32 = 275;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_X4: u32 = 2333;
pub const CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y4: u32 = 0;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const FT_OUTLINE_NONE: u32 = 0;
pub const FT_OUTLINE_OWNER: u32 = 1;
pub const FT_OUTLINE_EVEN_ODD_FILL: u32 = 2;
pub const FT_OUTLINE_REVERSE_FILL: u32 = 4;
pub const FT_OUTLINE_IGNORE_DROPOUTS: u32 = 8;
pub const FT_OUTLINE_SMART_DROPOUTS: u32 = 16;
pub const FT_OUTLINE_INCLUDE_STUBS: u32 = 32;
pub const FT_OUTLINE_OVERLAP: u32 = 64;
pub const FT_OUTLINE_HIGH_PRECISION: u32 = 256;
pub const FT_OUTLINE_SINGLE_PASS: u32 = 512;
pub const ft_outline_none: u32 = 0;
pub const ft_outline_owner: u32 = 1;
pub const ft_outline_even_odd_fill: u32 = 2;
pub const ft_outline_reverse_fill: u32 = 4;
pub const ft_outline_ignore_dropouts: u32 = 8;
pub const ft_outline_high_precision: u32 = 256;
pub const ft_outline_single_pass: u32 = 512;
pub const FT_CURVE_TAG_ON: u32 = 1;
pub const FT_CURVE_TAG_CONIC: u32 = 0;
pub const FT_CURVE_TAG_CUBIC: u32 = 2;
pub const FT_CURVE_TAG_HAS_SCANMODE: u32 = 4;
pub const FT_CURVE_TAG_TOUCH_X: u32 = 8;
pub const FT_CURVE_TAG_TOUCH_Y: u32 = 16;
pub const FT_CURVE_TAG_TOUCH_BOTH: u32 = 24;
pub const FT_Curve_Tag_On: u32 = 1;
pub const FT_Curve_Tag_Conic: u32 = 0;
pub const FT_Curve_Tag_Cubic: u32 = 2;
pub const FT_Curve_Tag_Touch_X: u32 = 8;
pub const FT_Curve_Tag_Touch_Y: u32 = 16;
pub const FT_RASTER_FLAG_DEFAULT: u32 = 0;
pub const FT_RASTER_FLAG_AA: u32 = 1;
pub const FT_RASTER_FLAG_DIRECT: u32 = 2;
pub const FT_RASTER_FLAG_CLIP: u32 = 4;
pub const FT_RASTER_FLAG_SDF: u32 = 8;
pub const ft_raster_flag_default: u32 = 0;
pub const ft_raster_flag_aa: u32 = 1;
pub const ft_raster_flag_direct: u32 = 2;
pub const ft_raster_flag_clip: u32 = 4;
pub const FT_ERR_BASE: u32 = 0;
pub const FT_FACE_FLAG_SCALABLE: u32 = 1;
pub const FT_FACE_FLAG_FIXED_SIZES: u32 = 2;
pub const FT_FACE_FLAG_FIXED_WIDTH: u32 = 4;
pub const FT_FACE_FLAG_SFNT: u32 = 8;
pub const FT_FACE_FLAG_HORIZONTAL: u32 = 16;
pub const FT_FACE_FLAG_VERTICAL: u32 = 32;
pub const FT_FACE_FLAG_KERNING: u32 = 64;
pub const FT_FACE_FLAG_FAST_GLYPHS: u32 = 128;
pub const FT_FACE_FLAG_MULTIPLE_MASTERS: u32 = 256;
pub const FT_FACE_FLAG_GLYPH_NAMES: u32 = 512;
pub const FT_FACE_FLAG_EXTERNAL_STREAM: u32 = 1024;
pub const FT_FACE_FLAG_HINTER: u32 = 2048;
pub const FT_FACE_FLAG_CID_KEYED: u32 = 4096;
pub const FT_FACE_FLAG_TRICKY: u32 = 8192;
pub const FT_FACE_FLAG_COLOR: u32 = 16384;
pub const FT_FACE_FLAG_VARIATION: u32 = 32768;
pub const FT_FACE_FLAG_SVG: u32 = 65536;
pub const FT_FACE_FLAG_SBIX: u32 = 131072;
pub const FT_FACE_FLAG_SBIX_OVERLAY: u32 = 262144;
pub const FT_STYLE_FLAG_ITALIC: u32 = 1;
pub const FT_STYLE_FLAG_BOLD: u32 = 2;
pub const FT_OPEN_MEMORY: u32 = 1;
pub const FT_OPEN_STREAM: u32 = 2;
pub const FT_OPEN_PATHNAME: u32 = 4;
pub const FT_OPEN_DRIVER: u32 = 8;
pub const FT_OPEN_PARAMS: u32 = 16;
pub const ft_open_memory: u32 = 1;
pub const ft_open_stream: u32 = 2;
pub const ft_open_pathname: u32 = 4;
pub const ft_open_driver: u32 = 8;
pub const ft_open_params: u32 = 16;
pub const FT_LOAD_DEFAULT: u32 = 0;
pub const FT_LOAD_NO_SCALE: u32 = 1;
pub const FT_LOAD_NO_HINTING: u32 = 2;
pub const FT_LOAD_RENDER: u32 = 4;
pub const FT_LOAD_NO_BITMAP: u32 = 8;
pub const FT_LOAD_VERTICAL_LAYOUT: u32 = 16;
pub const FT_LOAD_FORCE_AUTOHINT: u32 = 32;
pub const FT_LOAD_CROP_BITMAP: u32 = 64;
pub const FT_LOAD_PEDANTIC: u32 = 128;
pub const FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH: u32 = 512;
pub const FT_LOAD_NO_RECURSE: u32 = 1024;
pub const FT_LOAD_IGNORE_TRANSFORM: u32 = 2048;
pub const FT_LOAD_MONOCHROME: u32 = 4096;
pub const FT_LOAD_LINEAR_DESIGN: u32 = 8192;
pub const FT_LOAD_SBITS_ONLY: u32 = 16384;
pub const FT_LOAD_NO_AUTOHINT: u32 = 32768;
pub const FT_LOAD_COLOR: u32 = 1048576;
pub const FT_LOAD_COMPUTE_METRICS: u32 = 2097152;
pub const FT_LOAD_BITMAP_METRICS_ONLY: u32 = 4194304;
pub const FT_LOAD_NO_SVG: u32 = 16777216;
pub const FT_LOAD_ADVANCE_ONLY: u32 = 256;
pub const FT_LOAD_SVG_ONLY: u32 = 8388608;
pub const FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS: u32 = 1;
pub const FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES: u32 = 2;
pub const FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID: u32 = 4;
pub const FT_SUBGLYPH_FLAG_SCALE: u32 = 8;
pub const FT_SUBGLYPH_FLAG_XY_SCALE: u32 = 64;
pub const FT_SUBGLYPH_FLAG_2X2: u32 = 128;
pub const FT_SUBGLYPH_FLAG_USE_MY_METRICS: u32 = 512;
pub const FT_FSTYPE_INSTALLABLE_EMBEDDING: u32 = 0;
pub const FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING: u32 = 2;
pub const FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING: u32 = 4;
pub const FT_FSTYPE_EDITABLE_EMBEDDING: u32 = 8;
pub const FT_FSTYPE_NO_SUBSETTING: u32 = 256;
pub const FT_FSTYPE_BITMAP_EMBEDDING_ONLY: u32 = 512;
pub const FREETYPE_MAJOR: u32 = 2;
pub const FREETYPE_MINOR: u32 = 13;
pub const FREETYPE_PATCH: u32 = 3;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const FC_MAJOR: u32 = 2;
pub const FC_MINOR: u32 = 15;
pub const FC_REVISION: u32 = 0;
pub const FC_VERSION: u32 = 21500;
pub const FC_CACHE_VERSION_NUMBER: u32 = 9;
pub const FcFalse: u32 = 0;
pub const FcTrue: u32 = 1;
pub const FcDontCare: u32 = 2;
pub const FC_FAMILY: &[u8; 7] = b"family\0";
pub const FC_STYLE: &[u8; 6] = b"style\0";
pub const FC_SLANT: &[u8; 6] = b"slant\0";
pub const FC_WEIGHT: &[u8; 7] = b"weight\0";
pub const FC_SIZE: &[u8; 5] = b"size\0";
pub const FC_ASPECT: &[u8; 7] = b"aspect\0";
pub const FC_PIXEL_SIZE: &[u8; 10] = b"pixelsize\0";
pub const FC_SPACING: &[u8; 8] = b"spacing\0";
pub const FC_FOUNDRY: &[u8; 8] = b"foundry\0";
pub const FC_ANTIALIAS: &[u8; 10] = b"antialias\0";
pub const FC_HINTING: &[u8; 8] = b"hinting\0";
pub const FC_HINT_STYLE: &[u8; 10] = b"hintstyle\0";
pub const FC_VERTICAL_LAYOUT: &[u8; 15] = b"verticallayout\0";
pub const FC_AUTOHINT: &[u8; 9] = b"autohint\0";
pub const FC_GLOBAL_ADVANCE: &[u8; 14] = b"globaladvance\0";
pub const FC_WIDTH: &[u8; 6] = b"width\0";
pub const FC_FILE: &[u8; 5] = b"file\0";
pub const FC_INDEX: &[u8; 6] = b"index\0";
pub const FC_FT_FACE: &[u8; 7] = b"ftface\0";
pub const FC_RASTERIZER: &[u8; 11] = b"rasterizer\0";
pub const FC_OUTLINE: &[u8; 8] = b"outline\0";
pub const FC_SCALABLE: &[u8; 9] = b"scalable\0";
pub const FC_COLOR: &[u8; 6] = b"color\0";
pub const FC_VARIABLE: &[u8; 9] = b"variable\0";
pub const FC_SCALE: &[u8; 6] = b"scale\0";
pub const FC_SYMBOL: &[u8; 7] = b"symbol\0";
pub const FC_DPI: &[u8; 4] = b"dpi\0";
pub const FC_RGBA: &[u8; 5] = b"rgba\0";
pub const FC_MINSPACE: &[u8; 9] = b"minspace\0";
pub const FC_SOURCE: &[u8; 7] = b"source\0";
pub const FC_CHARSET: &[u8; 8] = b"charset\0";
pub const FC_LANG: &[u8; 5] = b"lang\0";
pub const FC_FONTVERSION: &[u8; 12] = b"fontversion\0";
pub const FC_FULLNAME: &[u8; 9] = b"fullname\0";
pub const FC_FAMILYLANG: &[u8; 11] = b"familylang\0";
pub const FC_STYLELANG: &[u8; 10] = b"stylelang\0";
pub const FC_FULLNAMELANG: &[u8; 13] = b"fullnamelang\0";
pub const FC_CAPABILITY: &[u8; 11] = b"capability\0";
pub const FC_FONTFORMAT: &[u8; 11] = b"fontformat\0";
pub const FC_EMBOLDEN: &[u8; 9] = b"embolden\0";
pub const FC_EMBEDDED_BITMAP: &[u8; 15] = b"embeddedbitmap\0";
pub const FC_DECORATIVE: &[u8; 11] = b"decorative\0";
pub const FC_LCD_FILTER: &[u8; 10] = b"lcdfilter\0";
pub const FC_FONT_FEATURES: &[u8; 13] = b"fontfeatures\0";
pub const FC_FONT_VARIATIONS: &[u8; 15] = b"fontvariations\0";
pub const FC_NAMELANG: &[u8; 9] = b"namelang\0";
pub const FC_PRGNAME: &[u8; 8] = b"prgname\0";
pub const FC_HASH: &[u8; 5] = b"hash\0";
pub const FC_POSTSCRIPT_NAME: &[u8; 15] = b"postscriptname\0";
pub const FC_FONT_HAS_HINT: &[u8; 12] = b"fonthashint\0";
pub const FC_ORDER: &[u8; 6] = b"order\0";
pub const FC_DESKTOP_NAME: &[u8; 8] = b"desktop\0";
pub const FC_NAMED_INSTANCE: &[u8; 14] = b"namedinstance\0";
pub const FC_FONT_WRAPPER: &[u8; 12] = b"fontwrapper\0";
pub const FC_CHARWIDTH: &[u8; 10] = b"charwidth\0";
pub const FC_CHAR_WIDTH: &[u8; 10] = b"charwidth\0";
pub const FC_CHAR_HEIGHT: &[u8; 11] = b"charheight\0";
pub const FC_MATRIX: &[u8; 7] = b"matrix\0";
pub const FC_WEIGHT_THIN: u32 = 0;
pub const FC_WEIGHT_EXTRALIGHT: u32 = 40;
pub const FC_WEIGHT_ULTRALIGHT: u32 = 40;
pub const FC_WEIGHT_LIGHT: u32 = 50;
pub const FC_WEIGHT_DEMILIGHT: u32 = 55;
pub const FC_WEIGHT_SEMILIGHT: u32 = 55;
pub const FC_WEIGHT_BOOK: u32 = 75;
pub const FC_WEIGHT_REGULAR: u32 = 80;
pub const FC_WEIGHT_NORMAL: u32 = 80;
pub const FC_WEIGHT_MEDIUM: u32 = 100;
pub const FC_WEIGHT_DEMIBOLD: u32 = 180;
pub const FC_WEIGHT_SEMIBOLD: u32 = 180;
pub const FC_WEIGHT_BOLD: u32 = 200;
pub const FC_WEIGHT_EXTRABOLD: u32 = 205;
pub const FC_WEIGHT_ULTRABOLD: u32 = 205;
pub const FC_WEIGHT_BLACK: u32 = 210;
pub const FC_WEIGHT_HEAVY: u32 = 210;
pub const FC_WEIGHT_EXTRABLACK: u32 = 215;
pub const FC_WEIGHT_ULTRABLACK: u32 = 215;
pub const FC_SLANT_ROMAN: u32 = 0;
pub const FC_SLANT_ITALIC: u32 = 100;
pub const FC_SLANT_OBLIQUE: u32 = 110;
pub const FC_WIDTH_ULTRACONDENSED: u32 = 50;
pub const FC_WIDTH_EXTRACONDENSED: u32 = 63;
pub const FC_WIDTH_CONDENSED: u32 = 75;
pub const FC_WIDTH_SEMICONDENSED: u32 = 87;
pub const FC_WIDTH_NORMAL: u32 = 100;
pub const FC_WIDTH_SEMIEXPANDED: u32 = 113;
pub const FC_WIDTH_EXPANDED: u32 = 125;
pub const FC_WIDTH_EXTRAEXPANDED: u32 = 150;
pub const FC_WIDTH_ULTRAEXPANDED: u32 = 200;
pub const FC_PROPORTIONAL: u32 = 0;
pub const FC_DUAL: u32 = 90;
pub const FC_MONO: u32 = 100;
pub const FC_CHARCELL: u32 = 110;
pub const FC_RGBA_UNKNOWN: u32 = 0;
pub const FC_RGBA_RGB: u32 = 1;
pub const FC_RGBA_BGR: u32 = 2;
pub const FC_RGBA_VRGB: u32 = 3;
pub const FC_RGBA_VBGR: u32 = 4;
pub const FC_RGBA_NONE: u32 = 5;
pub const FC_HINT_NONE: u32 = 0;
pub const FC_HINT_SLIGHT: u32 = 1;
pub const FC_HINT_MEDIUM: u32 = 2;
pub const FC_HINT_FULL: u32 = 3;
pub const FC_LCD_NONE: u32 = 0;
pub const FC_LCD_DEFAULT: u32 = 1;
pub const FC_LCD_LIGHT: u32 = 2;
pub const FC_LCD_LEGACY: u32 = 3;
pub const FC_CHARSET_MAP_SIZE: u32 = 8;
pub const FC_UTF8_MAX_LEN: u32 = 6;
pub const NoValue: u32 = 0;
pub const XValue: u32 = 1;
pub const YValue: u32 = 2;
pub const WidthValue: u32 = 4;
pub const HeightValue: u32 = 8;
pub const AllValues: u32 = 15;
pub const XNegative: u32 = 16;
pub const YNegative: u32 = 32;
pub const USPosition: u32 = 1;
pub const USSize: u32 = 2;
pub const PPosition: u32 = 4;
pub const PSize: u32 = 8;
pub const PMinSize: u32 = 16;
pub const PMaxSize: u32 = 32;
pub const PResizeInc: u32 = 64;
pub const PAspect: u32 = 128;
pub const PBaseSize: u32 = 256;
pub const PWinGravity: u32 = 512;
pub const PAllHints: u32 = 252;
pub const InputHint: u32 = 1;
pub const StateHint: u32 = 2;
pub const IconPixmapHint: u32 = 4;
pub const IconWindowHint: u32 = 8;
pub const IconPositionHint: u32 = 16;
pub const IconMaskHint: u32 = 32;
pub const WindowGroupHint: u32 = 64;
pub const AllHints: u32 = 127;
pub const XUrgencyHint: u32 = 256;
pub const WithdrawnState: u32 = 0;
pub const NormalState: u32 = 1;
pub const IconicState: u32 = 3;
pub const DontCareState: u32 = 0;
pub const ZoomState: u32 = 2;
pub const InactiveState: u32 = 4;
pub const XNoMemory: i32 = -1;
pub const XLocaleNotSupported: i32 = -2;
pub const XConverterNotFound: i32 = -3;
pub const RectangleOut: u32 = 0;
pub const RectangleIn: u32 = 1;
pub const RectanglePart: u32 = 2;
pub const VisualNoMask: u32 = 0;
pub const VisualIDMask: u32 = 1;
pub const VisualScreenMask: u32 = 2;
pub const VisualDepthMask: u32 = 4;
pub const VisualClassMask: u32 = 8;
pub const VisualRedMaskMask: u32 = 16;
pub const VisualGreenMaskMask: u32 = 32;
pub const VisualBlueMaskMask: u32 = 64;
pub const VisualColormapSizeMask: u32 = 128;
pub const VisualBitsPerRGBMask: u32 = 256;
pub const VisualAllMask: u32 = 511;
pub const BitmapSuccess: u32 = 0;
pub const BitmapOpenFailed: u32 = 1;
pub const BitmapFileInvalid: u32 = 2;
pub const BitmapNoMemory: u32 = 3;
pub const XCSUCCESS: u32 = 0;
pub const XCNOMEM: u32 = 1;
pub const XCNOENT: u32 = 2;
pub const RENDER_NAME: &[u8; 7] = b"RENDER\0";
pub const RENDER_MAJOR: u32 = 0;
pub const RENDER_MINOR: u32 = 11;
pub const X_RenderQueryVersion: u32 = 0;
pub const X_RenderQueryPictFormats: u32 = 1;
pub const X_RenderQueryPictIndexValues: u32 = 2;
pub const X_RenderQueryDithers: u32 = 3;
pub const X_RenderCreatePicture: u32 = 4;
pub const X_RenderChangePicture: u32 = 5;
pub const X_RenderSetPictureClipRectangles: u32 = 6;
pub const X_RenderFreePicture: u32 = 7;
pub const X_RenderComposite: u32 = 8;
pub const X_RenderScale: u32 = 9;
pub const X_RenderTrapezoids: u32 = 10;
pub const X_RenderTriangles: u32 = 11;
pub const X_RenderTriStrip: u32 = 12;
pub const X_RenderTriFan: u32 = 13;
pub const X_RenderColorTrapezoids: u32 = 14;
pub const X_RenderColorTriangles: u32 = 15;
pub const X_RenderCreateGlyphSet: u32 = 17;
pub const X_RenderReferenceGlyphSet: u32 = 18;
pub const X_RenderFreeGlyphSet: u32 = 19;
pub const X_RenderAddGlyphs: u32 = 20;
pub const X_RenderAddGlyphsFromPicture: u32 = 21;
pub const X_RenderFreeGlyphs: u32 = 22;
pub const X_RenderCompositeGlyphs8: u32 = 23;
pub const X_RenderCompositeGlyphs16: u32 = 24;
pub const X_RenderCompositeGlyphs32: u32 = 25;
pub const X_RenderFillRectangles: u32 = 26;
pub const X_RenderCreateCursor: u32 = 27;
pub const X_RenderSetPictureTransform: u32 = 28;
pub const X_RenderQueryFilters: u32 = 29;
pub const X_RenderSetPictureFilter: u32 = 30;
pub const X_RenderCreateAnimCursor: u32 = 31;
pub const X_RenderAddTraps: u32 = 32;
pub const X_RenderCreateSolidFill: u32 = 33;
pub const X_RenderCreateLinearGradient: u32 = 34;
pub const X_RenderCreateRadialGradient: u32 = 35;
pub const X_RenderCreateConicalGradient: u32 = 36;
pub const RenderNumberRequests: u32 = 37;
pub const BadPictFormat: u32 = 0;
pub const BadPicture: u32 = 1;
pub const BadPictOp: u32 = 2;
pub const BadGlyphSet: u32 = 3;
pub const BadGlyph: u32 = 4;
pub const RenderNumberErrors: u32 = 5;
pub const PictTypeIndexed: u32 = 0;
pub const PictTypeDirect: u32 = 1;
pub const PictOpMinimum: u32 = 0;
pub const PictOpClear: u32 = 0;
pub const PictOpSrc: u32 = 1;
pub const PictOpDst: u32 = 2;
pub const PictOpOver: u32 = 3;
pub const PictOpOverReverse: u32 = 4;
pub const PictOpIn: u32 = 5;
pub const PictOpInReverse: u32 = 6;
pub const PictOpOut: u32 = 7;
pub const PictOpOutReverse: u32 = 8;
pub const PictOpAtop: u32 = 9;
pub const PictOpAtopReverse: u32 = 10;
pub const PictOpXor: u32 = 11;
pub const PictOpAdd: u32 = 12;
pub const PictOpSaturate: u32 = 13;
pub const PictOpMaximum: u32 = 13;
pub const PictOpDisjointMinimum: u32 = 16;
pub const PictOpDisjointClear: u32 = 16;
pub const PictOpDisjointSrc: u32 = 17;
pub const PictOpDisjointDst: u32 = 18;
pub const PictOpDisjointOver: u32 = 19;
pub const PictOpDisjointOverReverse: u32 = 20;
pub const PictOpDisjointIn: u32 = 21;
pub const PictOpDisjointInReverse: u32 = 22;
pub const PictOpDisjointOut: u32 = 23;
pub const PictOpDisjointOutReverse: u32 = 24;
pub const PictOpDisjointAtop: u32 = 25;
pub const PictOpDisjointAtopReverse: u32 = 26;
pub const PictOpDisjointXor: u32 = 27;
pub const PictOpDisjointMaximum: u32 = 27;
pub const PictOpConjointMinimum: u32 = 32;
pub const PictOpConjointClear: u32 = 32;
pub const PictOpConjointSrc: u32 = 33;
pub const PictOpConjointDst: u32 = 34;
pub const PictOpConjointOver: u32 = 35;
pub const PictOpConjointOverReverse: u32 = 36;
pub const PictOpConjointIn: u32 = 37;
pub const PictOpConjointInReverse: u32 = 38;
pub const PictOpConjointOut: u32 = 39;
pub const PictOpConjointOutReverse: u32 = 40;
pub const PictOpConjointAtop: u32 = 41;
pub const PictOpConjointAtopReverse: u32 = 42;
pub const PictOpConjointXor: u32 = 43;
pub const PictOpConjointMaximum: u32 = 43;
pub const PictOpBlendMinimum: u32 = 48;
pub const PictOpMultiply: u32 = 48;
pub const PictOpScreen: u32 = 49;
pub const PictOpOverlay: u32 = 50;
pub const PictOpDarken: u32 = 51;
pub const PictOpLighten: u32 = 52;
pub const PictOpColorDodge: u32 = 53;
pub const PictOpColorBurn: u32 = 54;
pub const PictOpHardLight: u32 = 55;
pub const PictOpSoftLight: u32 = 56;
pub const PictOpDifference: u32 = 57;
pub const PictOpExclusion: u32 = 58;
pub const PictOpHSLHue: u32 = 59;
pub const PictOpHSLSaturation: u32 = 60;
pub const PictOpHSLColor: u32 = 61;
pub const PictOpHSLLuminosity: u32 = 62;
pub const PictOpBlendMaximum: u32 = 62;
pub const PolyEdgeSharp: u32 = 0;
pub const PolyEdgeSmooth: u32 = 1;
pub const PolyModePrecise: u32 = 0;
pub const PolyModeImprecise: u32 = 1;
pub const CPRepeat: u32 = 1;
pub const CPAlphaMap: u32 = 2;
pub const CPAlphaXOrigin: u32 = 4;
pub const CPAlphaYOrigin: u32 = 8;
pub const CPClipXOrigin: u32 = 16;
pub const CPClipYOrigin: u32 = 32;
pub const CPClipMask: u32 = 64;
pub const CPGraphicsExposure: u32 = 128;
pub const CPSubwindowMode: u32 = 256;
pub const CPPolyEdge: u32 = 512;
pub const CPPolyMode: u32 = 1024;
pub const CPDither: u32 = 2048;
pub const CPComponentAlpha: u32 = 4096;
pub const CPLastBit: u32 = 12;
pub const FilterNearest: &[u8; 8] = b"nearest\0";
pub const FilterBilinear: &[u8; 9] = b"bilinear\0";
pub const FilterConvolution: &[u8; 12] = b"convolution\0";
pub const FilterFast: &[u8; 5] = b"fast\0";
pub const FilterGood: &[u8; 5] = b"good\0";
pub const FilterBest: &[u8; 5] = b"best\0";
pub const FilterAliasNone: i32 = -1;
pub const SubPixelUnknown: u32 = 0;
pub const SubPixelHorizontalRGB: u32 = 1;
pub const SubPixelHorizontalBGR: u32 = 2;
pub const SubPixelVerticalRGB: u32 = 3;
pub const SubPixelVerticalBGR: u32 = 4;
pub const SubPixelNone: u32 = 5;
pub const RepeatNone: u32 = 0;
pub const RepeatNormal: u32 = 1;
pub const RepeatPad: u32 = 2;
pub const RepeatReflect: u32 = 3;
pub const PictFormatID: u32 = 1;
pub const PictFormatType: u32 = 2;
pub const PictFormatDepth: u32 = 4;
pub const PictFormatRed: u32 = 8;
pub const PictFormatRedMask: u32 = 16;
pub const PictFormatGreen: u32 = 32;
pub const PictFormatGreenMask: u32 = 64;
pub const PictFormatBlue: u32 = 128;
pub const PictFormatBlueMask: u32 = 256;
pub const PictFormatAlpha: u32 = 512;
pub const PictFormatAlphaMask: u32 = 1024;
pub const PictFormatColormap: u32 = 2048;
pub const PictStandardARGB32: u32 = 0;
pub const PictStandardRGB24: u32 = 1;
pub const PictStandardA8: u32 = 2;
pub const PictStandardA4: u32 = 3;
pub const PictStandardA1: u32 = 4;
pub const PictStandardNUM: u32 = 5;
pub const XFT_FAMILY: &[u8; 7] = b"family\0";
pub const XFT_STYLE: &[u8; 6] = b"style\0";
pub const XFT_SLANT: &[u8; 6] = b"slant\0";
pub const XFT_WEIGHT: &[u8; 7] = b"weight\0";
pub const XFT_SIZE: &[u8; 5] = b"size\0";
pub const XFT_PIXEL_SIZE: &[u8; 10] = b"pixelsize\0";
pub const XFT_SPACING: &[u8; 8] = b"spacing\0";
pub const XFT_FOUNDRY: &[u8; 8] = b"foundry\0";
pub const XFT_ANTIALIAS: &[u8; 10] = b"antialias\0";
pub const XFT_FILE: &[u8; 5] = b"file\0";
pub const XFT_INDEX: &[u8; 6] = b"index\0";
pub const XFT_RASTERIZER: &[u8; 11] = b"rasterizer\0";
pub const XFT_OUTLINE: &[u8; 8] = b"outline\0";
pub const XFT_SCALABLE: &[u8; 9] = b"scalable\0";
pub const XFT_RGBA: &[u8; 5] = b"rgba\0";
pub const XFT_SCALE: &[u8; 6] = b"scale\0";
pub const XFT_MINSPACE: &[u8; 9] = b"minspace\0";
pub const XFT_DPI: &[u8; 4] = b"dpi\0";
pub const XFT_CHAR_WIDTH: &[u8; 10] = b"charwidth\0";
pub const XFT_CHAR_HEIGHT: &[u8; 11] = b"charheight\0";
pub const XFT_MATRIX: &[u8; 7] = b"matrix\0";
pub const XFT_WEIGHT_LIGHT: u32 = 50;
pub const XFT_WEIGHT_MEDIUM: u32 = 100;
pub const XFT_WEIGHT_DEMIBOLD: u32 = 180;
pub const XFT_WEIGHT_BOLD: u32 = 200;
pub const XFT_WEIGHT_BLACK: u32 = 210;
pub const XFT_SLANT_ROMAN: u32 = 0;
pub const XFT_SLANT_ITALIC: u32 = 100;
pub const XFT_SLANT_OBLIQUE: u32 = 110;
pub const XFT_PROPORTIONAL: u32 = 0;
pub const XFT_MONO: u32 = 100;
pub const XFT_CHARCELL: u32 = 110;
pub const XFT_RGBA_UNKNOWN: u32 = 0;
pub const XFT_RGBA_RGB: u32 = 1;
pub const XFT_RGBA_BGR: u32 = 2;
pub const XFT_RGBA_VRGB: u32 = 3;
pub const XFT_RGBA_VBGR: u32 = 4;
pub const XFT_RGBA_NONE: u32 = 5;
pub const XFT_ENCODING: &[u8; 9] = b"encoding\0";
pub const XFT_CORE: &[u8; 5] = b"core\0";
pub const XFT_RENDER: &[u8; 7] = b"render\0";
pub const XFT_XLFD: &[u8; 5] = b"xlfd\0";
pub const XFT_MAX_GLYPH_MEMORY: &[u8; 15] = b"maxglyphmemory\0";
pub const XFT_MAX_UNREF_FONTS: &[u8; 14] = b"maxunreffonts\0";
pub const XFT_TRACK_MEM_USAGE: &[u8; 14] = b"trackmemusage\0";
pub const XFT_NMISSING: u32 = 256;
pub const X_kbUseExtension: u32 = 0;
pub const X_kbSelectEvents: u32 = 1;
pub const X_kbBell: u32 = 3;
pub const X_kbGetState: u32 = 4;
pub const X_kbLatchLockState: u32 = 5;
pub const X_kbGetControls: u32 = 6;
pub const X_kbSetControls: u32 = 7;
pub const X_kbGetMap: u32 = 8;
pub const X_kbSetMap: u32 = 9;
pub const X_kbGetCompatMap: u32 = 10;
pub const X_kbSetCompatMap: u32 = 11;
pub const X_kbGetIndicatorState: u32 = 12;
pub const X_kbGetIndicatorMap: u32 = 13;
pub const X_kbSetIndicatorMap: u32 = 14;
pub const X_kbGetNamedIndicator: u32 = 15;
pub const X_kbSetNamedIndicator: u32 = 16;
pub const X_kbGetNames: u32 = 17;
pub const X_kbSetNames: u32 = 18;
pub const X_kbGetGeometry: u32 = 19;
pub const X_kbSetGeometry: u32 = 20;
pub const X_kbPerClientFlags: u32 = 21;
pub const X_kbListComponents: u32 = 22;
pub const X_kbGetKbdByName: u32 = 23;
pub const X_kbGetDeviceInfo: u32 = 24;
pub const X_kbSetDeviceInfo: u32 = 25;
pub const X_kbSetDebuggingFlags: u32 = 101;
pub const XkbEventCode: u32 = 0;
pub const XkbNumberEvents: u32 = 1;
pub const XkbNewKeyboardNotify: u32 = 0;
pub const XkbMapNotify: u32 = 1;
pub const XkbStateNotify: u32 = 2;
pub const XkbControlsNotify: u32 = 3;
pub const XkbIndicatorStateNotify: u32 = 4;
pub const XkbIndicatorMapNotify: u32 = 5;
pub const XkbNamesNotify: u32 = 6;
pub const XkbCompatMapNotify: u32 = 7;
pub const XkbBellNotify: u32 = 8;
pub const XkbActionMessage: u32 = 9;
pub const XkbAccessXNotify: u32 = 10;
pub const XkbExtensionDeviceNotify: u32 = 11;
pub const XkbNewKeyboardNotifyMask: u32 = 1;
pub const XkbMapNotifyMask: u32 = 2;
pub const XkbStateNotifyMask: u32 = 4;
pub const XkbControlsNotifyMask: u32 = 8;
pub const XkbIndicatorStateNotifyMask: u32 = 16;
pub const XkbIndicatorMapNotifyMask: u32 = 32;
pub const XkbNamesNotifyMask: u32 = 64;
pub const XkbCompatMapNotifyMask: u32 = 128;
pub const XkbBellNotifyMask: u32 = 256;
pub const XkbActionMessageMask: u32 = 512;
pub const XkbAccessXNotifyMask: u32 = 1024;
pub const XkbExtensionDeviceNotifyMask: u32 = 2048;
pub const XkbAllEventsMask: u32 = 4095;
pub const XkbNKN_KeycodesMask: u32 = 1;
pub const XkbNKN_GeometryMask: u32 = 2;
pub const XkbNKN_DeviceIDMask: u32 = 4;
pub const XkbAllNewKeyboardEventsMask: u32 = 7;
pub const XkbAXN_SKPress: u32 = 0;
pub const XkbAXN_SKAccept: u32 = 1;
pub const XkbAXN_SKReject: u32 = 2;
pub const XkbAXN_SKRelease: u32 = 3;
pub const XkbAXN_BKAccept: u32 = 4;
pub const XkbAXN_BKReject: u32 = 5;
pub const XkbAXN_AXKWarning: u32 = 6;
pub const XkbAXN_SKPressMask: u32 = 1;
pub const XkbAXN_SKAcceptMask: u32 = 2;
pub const XkbAXN_SKRejectMask: u32 = 4;
pub const XkbAXN_SKReleaseMask: u32 = 8;
pub const XkbAXN_BKAcceptMask: u32 = 16;
pub const XkbAXN_BKRejectMask: u32 = 32;
pub const XkbAXN_AXKWarningMask: u32 = 64;
pub const XkbAllAccessXEventsMask: u32 = 127;
pub const XkbAllBellEventsMask: u32 = 1;
pub const XkbAllActionMessagesMask: u32 = 1;
pub const XkbKeyboard: u32 = 0;
pub const XkbNumberErrors: u32 = 1;
pub const XkbErr_BadDevice: u32 = 255;
pub const XkbErr_BadClass: u32 = 254;
pub const XkbErr_BadId: u32 = 253;
pub const XkbClientMapMask: u32 = 1;
pub const XkbServerMapMask: u32 = 2;
pub const XkbCompatMapMask: u32 = 4;
pub const XkbIndicatorMapMask: u32 = 8;
pub const XkbNamesMask: u32 = 16;
pub const XkbGeometryMask: u32 = 32;
pub const XkbControlsMask: u32 = 64;
pub const XkbAllComponentsMask: u32 = 127;
pub const XkbModifierStateMask: u32 = 1;
pub const XkbModifierBaseMask: u32 = 2;
pub const XkbModifierLatchMask: u32 = 4;
pub const XkbModifierLockMask: u32 = 8;
pub const XkbGroupStateMask: u32 = 16;
pub const XkbGroupBaseMask: u32 = 32;
pub const XkbGroupLatchMask: u32 = 64;
pub const XkbGroupLockMask: u32 = 128;
pub const XkbCompatStateMask: u32 = 256;
pub const XkbGrabModsMask: u32 = 512;
pub const XkbCompatGrabModsMask: u32 = 1024;
pub const XkbLookupModsMask: u32 = 2048;
pub const XkbCompatLookupModsMask: u32 = 4096;
pub const XkbPointerButtonMask: u32 = 8192;
pub const XkbAllStateComponentsMask: u32 = 16383;
pub const XkbRepeatKeysMask: u32 = 1;
pub const XkbSlowKeysMask: u32 = 2;
pub const XkbBounceKeysMask: u32 = 4;
pub const XkbStickyKeysMask: u32 = 8;
pub const XkbMouseKeysMask: u32 = 16;
pub const XkbMouseKeysAccelMask: u32 = 32;
pub const XkbAccessXKeysMask: u32 = 64;
pub const XkbAccessXTimeoutMask: u32 = 128;
pub const XkbAccessXFeedbackMask: u32 = 256;
pub const XkbAudibleBellMask: u32 = 512;
pub const XkbOverlay1Mask: u32 = 1024;
pub const XkbOverlay2Mask: u32 = 2048;
pub const XkbIgnoreGroupLockMask: u32 = 4096;
pub const XkbGroupsWrapMask: u32 = 134217728;
pub const XkbInternalModsMask: u32 = 268435456;
pub const XkbIgnoreLockModsMask: u32 = 536870912;
pub const XkbPerKeyRepeatMask: u32 = 1073741824;
pub const XkbControlsEnabledMask: u32 = 2147483648;
pub const XkbAccessXOptionsMask: u32 = 264;
pub const XkbAllBooleanCtrlsMask: u32 = 8191;
pub const XkbAllControlsMask: u32 = 4160757759;
pub const XkbAllControlEventsMask: u32 = 4160757759;
pub const XkbAX_SKPressFBMask: u32 = 1;
pub const XkbAX_SKAcceptFBMask: u32 = 2;
pub const XkbAX_FeatureFBMask: u32 = 4;
pub const XkbAX_SlowWarnFBMask: u32 = 8;
pub const XkbAX_IndicatorFBMask: u32 = 16;
pub const XkbAX_StickyKeysFBMask: u32 = 32;
pub const XkbAX_TwoKeysMask: u32 = 64;
pub const XkbAX_LatchToLockMask: u32 = 128;
pub const XkbAX_SKReleaseFBMask: u32 = 256;
pub const XkbAX_SKRejectFBMask: u32 = 512;
pub const XkbAX_BKRejectFBMask: u32 = 1024;
pub const XkbAX_DumbBellFBMask: u32 = 2048;
pub const XkbAX_FBOptionsMask: u32 = 3903;
pub const XkbAX_SKOptionsMask: u32 = 192;
pub const XkbAX_AllOptionsMask: u32 = 4095;
pub const XkbUseCoreKbd: u32 = 256;
pub const XkbUseCorePtr: u32 = 512;
pub const XkbDfltXIClass: u32 = 768;
pub const XkbDfltXIId: u32 = 1024;
pub const XkbAllXIClasses: u32 = 1280;
pub const XkbAllXIIds: u32 = 1536;
pub const XkbXINone: u32 = 65280;
pub const XkbNoModifier: u32 = 255;
pub const XkbNoShiftLevel: u32 = 255;
pub const XkbNoShape: u32 = 255;
pub const XkbNoIndicator: u32 = 255;
pub const XkbNoModifierMask: u32 = 0;
pub const XkbAllModifiersMask: u32 = 255;
pub const XkbAllVirtualModsMask: u32 = 65535;
pub const XkbNumKbdGroups: u32 = 4;
pub const XkbMaxKbdGroup: u32 = 3;
pub const XkbMaxMouseKeysBtn: u32 = 4;
pub const XkbGroup1Index: u32 = 0;
pub const XkbGroup2Index: u32 = 1;
pub const XkbGroup3Index: u32 = 2;
pub const XkbGroup4Index: u32 = 3;
pub const XkbAnyGroup: u32 = 254;
pub const XkbAllGroups: u32 = 255;
pub const XkbGroup1Mask: u32 = 1;
pub const XkbGroup2Mask: u32 = 2;
pub const XkbGroup3Mask: u32 = 4;
pub const XkbGroup4Mask: u32 = 8;
pub const XkbAnyGroupMask: u32 = 128;
pub const XkbAllGroupsMask: u32 = 15;
pub const XkbWrapIntoRange: u32 = 0;
pub const XkbClampIntoRange: u32 = 64;
pub const XkbRedirectIntoRange: u32 = 128;
pub const XkbSA_ClearLocks: u32 = 1;
pub const XkbSA_LatchToLock: u32 = 2;
pub const XkbSA_LockNoLock: u32 = 1;
pub const XkbSA_LockNoUnlock: u32 = 2;
pub const XkbSA_UseModMapMods: u32 = 4;
pub const XkbSA_GroupAbsolute: u32 = 4;
pub const XkbSA_UseDfltButton: u32 = 0;
pub const XkbSA_NoAcceleration: u32 = 1;
pub const XkbSA_MoveAbsoluteX: u32 = 2;
pub const XkbSA_MoveAbsoluteY: u32 = 4;
pub const XkbSA_ISODfltIsGroup: u32 = 128;
pub const XkbSA_ISONoAffectMods: u32 = 64;
pub const XkbSA_ISONoAffectGroup: u32 = 32;
pub const XkbSA_ISONoAffectPtr: u32 = 16;
pub const XkbSA_ISONoAffectCtrls: u32 = 8;
pub const XkbSA_ISOAffectMask: u32 = 120;
pub const XkbSA_MessageOnPress: u32 = 1;
pub const XkbSA_MessageOnRelease: u32 = 2;
pub const XkbSA_MessageGenKeyEvent: u32 = 4;
pub const XkbSA_AffectDfltBtn: u32 = 1;
pub const XkbSA_DfltBtnAbsolute: u32 = 4;
pub const XkbSA_SwitchApplication: u32 = 1;
pub const XkbSA_SwitchAbsolute: u32 = 4;
pub const XkbSA_IgnoreVal: u32 = 0;
pub const XkbSA_SetValMin: u32 = 16;
pub const XkbSA_SetValCenter: u32 = 32;
pub const XkbSA_SetValMax: u32 = 48;
pub const XkbSA_SetValRelative: u32 = 64;
pub const XkbSA_SetValAbsolute: u32 = 80;
pub const XkbSA_ValOpMask: u32 = 112;
pub const XkbSA_ValScaleMask: u32 = 7;
pub const XkbSA_NoAction: u32 = 0;
pub const XkbSA_SetMods: u32 = 1;
pub const XkbSA_LatchMods: u32 = 2;
pub const XkbSA_LockMods: u32 = 3;
pub const XkbSA_SetGroup: u32 = 4;
pub const XkbSA_LatchGroup: u32 = 5;
pub const XkbSA_LockGroup: u32 = 6;
pub const XkbSA_MovePtr: u32 = 7;
pub const XkbSA_PtrBtn: u32 = 8;
pub const XkbSA_LockPtrBtn: u32 = 9;
pub const XkbSA_SetPtrDflt: u32 = 10;
pub const XkbSA_ISOLock: u32 = 11;
pub const XkbSA_Terminate: u32 = 12;
pub const XkbSA_SwitchScreen: u32 = 13;
pub const XkbSA_SetControls: u32 = 14;
pub const XkbSA_LockControls: u32 = 15;
pub const XkbSA_ActionMessage: u32 = 16;
pub const XkbSA_RedirectKey: u32 = 17;
pub const XkbSA_DeviceBtn: u32 = 18;
pub const XkbSA_LockDeviceBtn: u32 = 19;
pub const XkbSA_DeviceValuator: u32 = 20;
pub const XkbSA_LastAction: u32 = 20;
pub const XkbSA_NumActions: u32 = 21;
pub const XkbSA_XFree86Private: u32 = 134;
pub const XkbSA_BreakLatch: u32 = 1045249;
pub const XkbKB_Permanent: u32 = 128;
pub const XkbKB_OpMask: u32 = 127;
pub const XkbKB_Default: u32 = 0;
pub const XkbKB_Lock: u32 = 1;
pub const XkbKB_RadioGroup: u32 = 2;
pub const XkbKB_Overlay1: u32 = 3;
pub const XkbKB_Overlay2: u32 = 4;
pub const XkbKB_RGAllowNone: u32 = 128;
pub const XkbMinLegalKeyCode: u32 = 8;
pub const XkbMaxLegalKeyCode: u32 = 255;
pub const XkbMaxKeyCount: u32 = 248;
pub const XkbPerKeyBitArraySize: u32 = 32;
pub const XkbNumModifiers: u32 = 8;
pub const XkbNumVirtualMods: u32 = 16;
pub const XkbNumIndicators: u32 = 32;
pub const XkbAllIndicatorsMask: u32 = 4294967295;
pub const XkbMaxRadioGroups: u32 = 32;
pub const XkbAllRadioGroupsMask: u32 = 4294967295;
pub const XkbMaxShiftLevel: u32 = 63;
pub const XkbMaxSymsPerKey: u32 = 252;
pub const XkbRGMaxMembers: u32 = 12;
pub const XkbActionMessageLength: u32 = 6;
pub const XkbKeyNameLength: u32 = 4;
pub const XkbMaxRedirectCount: u32 = 8;
pub const XkbGeomPtsPerMM: u32 = 10;
pub const XkbGeomMaxColors: u32 = 32;
pub const XkbGeomMaxLabelColors: u32 = 3;
pub const XkbGeomMaxPriority: u32 = 255;
pub const XkbOneLevelIndex: u32 = 0;
pub const XkbTwoLevelIndex: u32 = 1;
pub const XkbAlphabeticIndex: u32 = 2;
pub const XkbKeypadIndex: u32 = 3;
pub const XkbLastRequiredType: u32 = 3;
pub const XkbNumRequiredTypes: u32 = 4;
pub const XkbMaxKeyTypes: u32 = 255;
pub const XkbOneLevelMask: u32 = 1;
pub const XkbTwoLevelMask: u32 = 2;
pub const XkbAlphabeticMask: u32 = 4;
pub const XkbKeypadMask: u32 = 8;
pub const XkbAllRequiredTypes: u32 = 15;
pub const XkbName: &[u8; 10] = b"XKEYBOARD\0";
pub const XkbMajorVersion: u32 = 1;
pub const XkbMinorVersion: u32 = 0;
pub const XkbExplicitKeyTypesMask: u32 = 15;
pub const XkbExplicitKeyType1Mask: u32 = 1;
pub const XkbExplicitKeyType2Mask: u32 = 2;
pub const XkbExplicitKeyType3Mask: u32 = 4;
pub const XkbExplicitKeyType4Mask: u32 = 8;
pub const XkbExplicitInterpretMask: u32 = 16;
pub const XkbExplicitAutoRepeatMask: u32 = 32;
pub const XkbExplicitBehaviorMask: u32 = 64;
pub const XkbExplicitVModMapMask: u32 = 128;
pub const XkbAllExplicitMask: u32 = 255;
pub const XkbKeyTypesMask: u32 = 1;
pub const XkbKeySymsMask: u32 = 2;
pub const XkbModifierMapMask: u32 = 4;
pub const XkbExplicitComponentsMask: u32 = 8;
pub const XkbKeyActionsMask: u32 = 16;
pub const XkbKeyBehaviorsMask: u32 = 32;
pub const XkbVirtualModsMask: u32 = 64;
pub const XkbVirtualModMapMask: u32 = 128;
pub const XkbAllClientInfoMask: u32 = 7;
pub const XkbAllServerInfoMask: u32 = 248;
pub const XkbAllMapComponentsMask: u32 = 255;
pub const XkbSI_AutoRepeat: u32 = 1;
pub const XkbSI_LockingKey: u32 = 2;
pub const XkbSI_LevelOneOnly: u32 = 128;
pub const XkbSI_OpMask: u32 = 127;
pub const XkbSI_NoneOf: u32 = 0;
pub const XkbSI_AnyOfOrNone: u32 = 1;
pub const XkbSI_AnyOf: u32 = 2;
pub const XkbSI_AllOf: u32 = 3;
pub const XkbSI_Exactly: u32 = 4;
pub const XkbIM_NoExplicit: u32 = 128;
pub const XkbIM_NoAutomatic: u32 = 64;
pub const XkbIM_LEDDrivesKB: u32 = 32;
pub const XkbIM_UseBase: u32 = 1;
pub const XkbIM_UseLatched: u32 = 2;
pub const XkbIM_UseLocked: u32 = 4;
pub const XkbIM_UseEffective: u32 = 8;
pub const XkbIM_UseCompat: u32 = 16;
pub const XkbIM_UseNone: u32 = 0;
pub const XkbIM_UseAnyGroup: u32 = 15;
pub const XkbIM_UseAnyMods: u32 = 31;
pub const XkbSymInterpMask: u32 = 1;
pub const XkbGroupCompatMask: u32 = 2;
pub const XkbAllCompatMask: u32 = 3;
pub const XkbKeycodesNameMask: u32 = 1;
pub const XkbGeometryNameMask: u32 = 2;
pub const XkbSymbolsNameMask: u32 = 4;
pub const XkbPhysSymbolsNameMask: u32 = 8;
pub const XkbTypesNameMask: u32 = 16;
pub const XkbCompatNameMask: u32 = 32;
pub const XkbKeyTypeNamesMask: u32 = 64;
pub const XkbKTLevelNamesMask: u32 = 128;
pub const XkbIndicatorNamesMask: u32 = 256;
pub const XkbKeyNamesMask: u32 = 512;
pub const XkbKeyAliasesMask: u32 = 1024;
pub const XkbVirtualModNamesMask: u32 = 2048;
pub const XkbGroupNamesMask: u32 = 4096;
pub const XkbRGNamesMask: u32 = 8192;
pub const XkbComponentNamesMask: u32 = 63;
pub const XkbAllNamesMask: u32 = 16383;
pub const XkbGBN_TypesMask: u32 = 1;
pub const XkbGBN_CompatMapMask: u32 = 2;
pub const XkbGBN_ClientSymbolsMask: u32 = 4;
pub const XkbGBN_ServerSymbolsMask: u32 = 8;
pub const XkbGBN_SymbolsMask: u32 = 12;
pub const XkbGBN_IndicatorMapMask: u32 = 16;
pub const XkbGBN_KeyNamesMask: u32 = 32;
pub const XkbGBN_GeometryMask: u32 = 64;
pub const XkbGBN_OtherNamesMask: u32 = 128;
pub const XkbGBN_AllComponentsMask: u32 = 255;
pub const XkbLC_Hidden: u32 = 1;
pub const XkbLC_Default: u32 = 2;
pub const XkbLC_Partial: u32 = 4;
pub const XkbLC_AlphanumericKeys: u32 = 256;
pub const XkbLC_ModifierKeys: u32 = 512;
pub const XkbLC_KeypadKeys: u32 = 1024;
pub const XkbLC_FunctionKeys: u32 = 2048;
pub const XkbLC_AlternateGroup: u32 = 4096;
pub const XkbXI_KeyboardsMask: u32 = 1;
pub const XkbXI_ButtonActionsMask: u32 = 2;
pub const XkbXI_IndicatorNamesMask: u32 = 4;
pub const XkbXI_IndicatorMapsMask: u32 = 8;
pub const XkbXI_IndicatorStateMask: u32 = 16;
pub const XkbXI_UnsupportedFeatureMask: u32 = 32768;
pub const XkbXI_AllFeaturesMask: u32 = 31;
pub const XkbXI_AllDeviceFeaturesMask: u32 = 30;
pub const XkbXI_IndicatorsMask: u32 = 28;
pub const XkbAllExtensionDeviceEventsMask: u32 = 32799;
pub const XkbPCF_DetectableAutoRepeatMask: u32 = 1;
pub const XkbPCF_GrabsUseXKBStateMask: u32 = 2;
pub const XkbPCF_AutoResetControlsMask: u32 = 4;
pub const XkbPCF_LookupStateWhenGrabbed: u32 = 8;
pub const XkbPCF_SendEventUsesXKBState: u32 = 16;
pub const XkbPCF_AllFlagsMask: u32 = 31;
pub const XkbDF_DisableLocks: u32 = 1;
pub const XkbAnyActionDataSize: u32 = 7;
pub const XkbOD_Success: u32 = 0;
pub const XkbOD_BadLibraryVersion: u32 = 1;
pub const XkbOD_ConnectionRefused: u32 = 2;
pub const XkbOD_NonXkbServer: u32 = 3;
pub const XkbOD_BadServerVersion: u32 = 4;
pub const XkbLC_ForceLatin1Lookup: u32 = 1;
pub const XkbLC_ConsumeLookupMods: u32 = 2;
pub const XkbLC_AlwaysConsumeShiftAndLock: u32 = 4;
pub const XkbLC_IgnoreNewKeyboards: u32 = 8;
pub const XkbLC_ControlFallback: u32 = 16;
pub const XkbLC_ConsumeKeysOnComposeFail: u32 = 536870912;
pub const XkbLC_ComposeLED: u32 = 1073741824;
pub const XkbLC_BeepOnComposeFail: u32 = 2147483648;
pub const XkbLC_AllComposeControls: u32 = 3221225472;
pub const XkbLC_AllControls: u32 = 3221225503;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type XID = ::std::os::raw::c_ulong;
pub type Mask = ::std::os::raw::c_ulong;
pub type Atom = ::std::os::raw::c_ulong;
pub type VisualID = ::std::os::raw::c_ulong;
pub type Time = ::std::os::raw::c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Cursor = XID;
pub type Colormap = XID;
pub type GContext = XID;
pub type KeySym = XID;
pub type KeyCode = ::std::os::raw::c_uchar;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
extern "C" {
    pub fn _Xmblen(
        str_: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type XPointer = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XExtData {
    pub number: ::std::os::raw::c_int,
    pub next: *mut _XExtData,
    pub free_private: ::std::option::Option<
        unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
    >,
    pub private_data: XPointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XExtData"][::std::mem::size_of::<_XExtData>() - 32usize];
    ["Alignment of _XExtData"][::std::mem::align_of::<_XExtData>() - 8usize];
    ["Offset of field: _XExtData::number"][::std::mem::offset_of!(_XExtData, number) - 0usize];
    ["Offset of field: _XExtData::next"][::std::mem::offset_of!(_XExtData, next) - 8usize];
    ["Offset of field: _XExtData::free_private"]
        [::std::mem::offset_of!(_XExtData, free_private) - 16usize];
    ["Offset of field: _XExtData::private_data"]
        [::std::mem::offset_of!(_XExtData, private_data) - 24usize];
};
pub type XExtData = _XExtData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExtCodes {
    pub extension: ::std::os::raw::c_int,
    pub major_opcode: ::std::os::raw::c_int,
    pub first_event: ::std::os::raw::c_int,
    pub first_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExtCodes"][::std::mem::size_of::<XExtCodes>() - 16usize];
    ["Alignment of XExtCodes"][::std::mem::align_of::<XExtCodes>() - 4usize];
    ["Offset of field: XExtCodes::extension"]
        [::std::mem::offset_of!(XExtCodes, extension) - 0usize];
    ["Offset of field: XExtCodes::major_opcode"]
        [::std::mem::offset_of!(XExtCodes, major_opcode) - 4usize];
    ["Offset of field: XExtCodes::first_event"]
        [::std::mem::offset_of!(XExtCodes, first_event) - 8usize];
    ["Offset of field: XExtCodes::first_error"]
        [::std::mem::offset_of!(XExtCodes, first_error) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPixmapFormatValues {
    pub depth: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub scanline_pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPixmapFormatValues"][::std::mem::size_of::<XPixmapFormatValues>() - 12usize];
    ["Alignment of XPixmapFormatValues"][::std::mem::align_of::<XPixmapFormatValues>() - 4usize];
    ["Offset of field: XPixmapFormatValues::depth"]
        [::std::mem::offset_of!(XPixmapFormatValues, depth) - 0usize];
    ["Offset of field: XPixmapFormatValues::bits_per_pixel"]
        [::std::mem::offset_of!(XPixmapFormatValues, bits_per_pixel) - 4usize];
    ["Offset of field: XPixmapFormatValues::scanline_pad"]
        [::std::mem::offset_of!(XPixmapFormatValues, scanline_pad) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGCValues {
    pub function: ::std::os::raw::c_int,
    pub plane_mask: ::std::os::raw::c_ulong,
    pub foreground: ::std::os::raw::c_ulong,
    pub background: ::std::os::raw::c_ulong,
    pub line_width: ::std::os::raw::c_int,
    pub line_style: ::std::os::raw::c_int,
    pub cap_style: ::std::os::raw::c_int,
    pub join_style: ::std::os::raw::c_int,
    pub fill_style: ::std::os::raw::c_int,
    pub fill_rule: ::std::os::raw::c_int,
    pub arc_mode: ::std::os::raw::c_int,
    pub tile: Pixmap,
    pub stipple: Pixmap,
    pub ts_x_origin: ::std::os::raw::c_int,
    pub ts_y_origin: ::std::os::raw::c_int,
    pub font: Font,
    pub subwindow_mode: ::std::os::raw::c_int,
    pub graphics_exposures: ::std::os::raw::c_int,
    pub clip_x_origin: ::std::os::raw::c_int,
    pub clip_y_origin: ::std::os::raw::c_int,
    pub clip_mask: Pixmap,
    pub dash_offset: ::std::os::raw::c_int,
    pub dashes: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGCValues"][::std::mem::size_of::<XGCValues>() - 128usize];
    ["Alignment of XGCValues"][::std::mem::align_of::<XGCValues>() - 8usize];
    ["Offset of field: XGCValues::function"][::std::mem::offset_of!(XGCValues, function) - 0usize];
    ["Offset of field: XGCValues::plane_mask"]
        [::std::mem::offset_of!(XGCValues, plane_mask) - 8usize];
    ["Offset of field: XGCValues::foreground"]
        [::std::mem::offset_of!(XGCValues, foreground) - 16usize];
    ["Offset of field: XGCValues::background"]
        [::std::mem::offset_of!(XGCValues, background) - 24usize];
    ["Offset of field: XGCValues::line_width"]
        [::std::mem::offset_of!(XGCValues, line_width) - 32usize];
    ["Offset of field: XGCValues::line_style"]
        [::std::mem::offset_of!(XGCValues, line_style) - 36usize];
    ["Offset of field: XGCValues::cap_style"]
        [::std::mem::offset_of!(XGCValues, cap_style) - 40usize];
    ["Offset of field: XGCValues::join_style"]
        [::std::mem::offset_of!(XGCValues, join_style) - 44usize];
    ["Offset of field: XGCValues::fill_style"]
        [::std::mem::offset_of!(XGCValues, fill_style) - 48usize];
    ["Offset of field: XGCValues::fill_rule"]
        [::std::mem::offset_of!(XGCValues, fill_rule) - 52usize];
    ["Offset of field: XGCValues::arc_mode"][::std::mem::offset_of!(XGCValues, arc_mode) - 56usize];
    ["Offset of field: XGCValues::tile"][::std::mem::offset_of!(XGCValues, tile) - 64usize];
    ["Offset of field: XGCValues::stipple"][::std::mem::offset_of!(XGCValues, stipple) - 72usize];
    ["Offset of field: XGCValues::ts_x_origin"]
        [::std::mem::offset_of!(XGCValues, ts_x_origin) - 80usize];
    ["Offset of field: XGCValues::ts_y_origin"]
        [::std::mem::offset_of!(XGCValues, ts_y_origin) - 84usize];
    ["Offset of field: XGCValues::font"][::std::mem::offset_of!(XGCValues, font) - 88usize];
    ["Offset of field: XGCValues::subwindow_mode"]
        [::std::mem::offset_of!(XGCValues, subwindow_mode) - 96usize];
    ["Offset of field: XGCValues::graphics_exposures"]
        [::std::mem::offset_of!(XGCValues, graphics_exposures) - 100usize];
    ["Offset of field: XGCValues::clip_x_origin"]
        [::std::mem::offset_of!(XGCValues, clip_x_origin) - 104usize];
    ["Offset of field: XGCValues::clip_y_origin"]
        [::std::mem::offset_of!(XGCValues, clip_y_origin) - 108usize];
    ["Offset of field: XGCValues::clip_mask"]
        [::std::mem::offset_of!(XGCValues, clip_mask) - 112usize];
    ["Offset of field: XGCValues::dash_offset"]
        [::std::mem::offset_of!(XGCValues, dash_offset) - 120usize];
    ["Offset of field: XGCValues::dashes"][::std::mem::offset_of!(XGCValues, dashes) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGC {
    _unused: [u8; 0],
}
pub type GC = *mut _XGC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Visual {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub bits_per_rgb: ::std::os::raw::c_int,
    pub map_entries: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Visual"][::std::mem::size_of::<Visual>() - 56usize];
    ["Alignment of Visual"][::std::mem::align_of::<Visual>() - 8usize];
    ["Offset of field: Visual::ext_data"][::std::mem::offset_of!(Visual, ext_data) - 0usize];
    ["Offset of field: Visual::visualid"][::std::mem::offset_of!(Visual, visualid) - 8usize];
    ["Offset of field: Visual::class"][::std::mem::offset_of!(Visual, class) - 16usize];
    ["Offset of field: Visual::red_mask"][::std::mem::offset_of!(Visual, red_mask) - 24usize];
    ["Offset of field: Visual::green_mask"][::std::mem::offset_of!(Visual, green_mask) - 32usize];
    ["Offset of field: Visual::blue_mask"][::std::mem::offset_of!(Visual, blue_mask) - 40usize];
    ["Offset of field: Visual::bits_per_rgb"]
        [::std::mem::offset_of!(Visual, bits_per_rgb) - 48usize];
    ["Offset of field: Visual::map_entries"][::std::mem::offset_of!(Visual, map_entries) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Depth {
    pub depth: ::std::os::raw::c_int,
    pub nvisuals: ::std::os::raw::c_int,
    pub visuals: *mut Visual,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Depth"][::std::mem::size_of::<Depth>() - 16usize];
    ["Alignment of Depth"][::std::mem::align_of::<Depth>() - 8usize];
    ["Offset of field: Depth::depth"][::std::mem::offset_of!(Depth, depth) - 0usize];
    ["Offset of field: Depth::nvisuals"][::std::mem::offset_of!(Depth, nvisuals) - 4usize];
    ["Offset of field: Depth::visuals"][::std::mem::offset_of!(Depth, visuals) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Screen {
    pub ext_data: *mut XExtData,
    pub display: *mut _XDisplay,
    pub root: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub mwidth: ::std::os::raw::c_int,
    pub mheight: ::std::os::raw::c_int,
    pub ndepths: ::std::os::raw::c_int,
    pub depths: *mut Depth,
    pub root_depth: ::std::os::raw::c_int,
    pub root_visual: *mut Visual,
    pub default_gc: GC,
    pub cmap: Colormap,
    pub white_pixel: ::std::os::raw::c_ulong,
    pub black_pixel: ::std::os::raw::c_ulong,
    pub max_maps: ::std::os::raw::c_int,
    pub min_maps: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub save_unders: ::std::os::raw::c_int,
    pub root_input_mask: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Screen"][::std::mem::size_of::<Screen>() - 128usize];
    ["Alignment of Screen"][::std::mem::align_of::<Screen>() - 8usize];
    ["Offset of field: Screen::ext_data"][::std::mem::offset_of!(Screen, ext_data) - 0usize];
    ["Offset of field: Screen::display"][::std::mem::offset_of!(Screen, display) - 8usize];
    ["Offset of field: Screen::root"][::std::mem::offset_of!(Screen, root) - 16usize];
    ["Offset of field: Screen::width"][::std::mem::offset_of!(Screen, width) - 24usize];
    ["Offset of field: Screen::height"][::std::mem::offset_of!(Screen, height) - 28usize];
    ["Offset of field: Screen::mwidth"][::std::mem::offset_of!(Screen, mwidth) - 32usize];
    ["Offset of field: Screen::mheight"][::std::mem::offset_of!(Screen, mheight) - 36usize];
    ["Offset of field: Screen::ndepths"][::std::mem::offset_of!(Screen, ndepths) - 40usize];
    ["Offset of field: Screen::depths"][::std::mem::offset_of!(Screen, depths) - 48usize];
    ["Offset of field: Screen::root_depth"][::std::mem::offset_of!(Screen, root_depth) - 56usize];
    ["Offset of field: Screen::root_visual"][::std::mem::offset_of!(Screen, root_visual) - 64usize];
    ["Offset of field: Screen::default_gc"][::std::mem::offset_of!(Screen, default_gc) - 72usize];
    ["Offset of field: Screen::cmap"][::std::mem::offset_of!(Screen, cmap) - 80usize];
    ["Offset of field: Screen::white_pixel"][::std::mem::offset_of!(Screen, white_pixel) - 88usize];
    ["Offset of field: Screen::black_pixel"][::std::mem::offset_of!(Screen, black_pixel) - 96usize];
    ["Offset of field: Screen::max_maps"][::std::mem::offset_of!(Screen, max_maps) - 104usize];
    ["Offset of field: Screen::min_maps"][::std::mem::offset_of!(Screen, min_maps) - 108usize];
    ["Offset of field: Screen::backing_store"]
        [::std::mem::offset_of!(Screen, backing_store) - 112usize];
    ["Offset of field: Screen::save_unders"]
        [::std::mem::offset_of!(Screen, save_unders) - 116usize];
    ["Offset of field: Screen::root_input_mask"]
        [::std::mem::offset_of!(Screen, root_input_mask) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScreenFormat {
    pub ext_data: *mut XExtData,
    pub depth: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub scanline_pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScreenFormat"][::std::mem::size_of::<ScreenFormat>() - 24usize];
    ["Alignment of ScreenFormat"][::std::mem::align_of::<ScreenFormat>() - 8usize];
    ["Offset of field: ScreenFormat::ext_data"]
        [::std::mem::offset_of!(ScreenFormat, ext_data) - 0usize];
    ["Offset of field: ScreenFormat::depth"][::std::mem::offset_of!(ScreenFormat, depth) - 8usize];
    ["Offset of field: ScreenFormat::bits_per_pixel"]
        [::std::mem::offset_of!(ScreenFormat, bits_per_pixel) - 12usize];
    ["Offset of field: ScreenFormat::scanline_pad"]
        [::std::mem::offset_of!(ScreenFormat, scanline_pad) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSetWindowAttributes {
    pub background_pixmap: Pixmap,
    pub background_pixel: ::std::os::raw::c_ulong,
    pub border_pixmap: Pixmap,
    pub border_pixel: ::std::os::raw::c_ulong,
    pub bit_gravity: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub backing_planes: ::std::os::raw::c_ulong,
    pub backing_pixel: ::std::os::raw::c_ulong,
    pub save_under: ::std::os::raw::c_int,
    pub event_mask: ::std::os::raw::c_long,
    pub do_not_propagate_mask: ::std::os::raw::c_long,
    pub override_redirect: ::std::os::raw::c_int,
    pub colormap: Colormap,
    pub cursor: Cursor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSetWindowAttributes"][::std::mem::size_of::<XSetWindowAttributes>() - 112usize];
    ["Alignment of XSetWindowAttributes"][::std::mem::align_of::<XSetWindowAttributes>() - 8usize];
    ["Offset of field: XSetWindowAttributes::background_pixmap"]
        [::std::mem::offset_of!(XSetWindowAttributes, background_pixmap) - 0usize];
    ["Offset of field: XSetWindowAttributes::background_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, background_pixel) - 8usize];
    ["Offset of field: XSetWindowAttributes::border_pixmap"]
        [::std::mem::offset_of!(XSetWindowAttributes, border_pixmap) - 16usize];
    ["Offset of field: XSetWindowAttributes::border_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, border_pixel) - 24usize];
    ["Offset of field: XSetWindowAttributes::bit_gravity"]
        [::std::mem::offset_of!(XSetWindowAttributes, bit_gravity) - 32usize];
    ["Offset of field: XSetWindowAttributes::win_gravity"]
        [::std::mem::offset_of!(XSetWindowAttributes, win_gravity) - 36usize];
    ["Offset of field: XSetWindowAttributes::backing_store"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_store) - 40usize];
    ["Offset of field: XSetWindowAttributes::backing_planes"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_planes) - 48usize];
    ["Offset of field: XSetWindowAttributes::backing_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_pixel) - 56usize];
    ["Offset of field: XSetWindowAttributes::save_under"]
        [::std::mem::offset_of!(XSetWindowAttributes, save_under) - 64usize];
    ["Offset of field: XSetWindowAttributes::event_mask"]
        [::std::mem::offset_of!(XSetWindowAttributes, event_mask) - 72usize];
    ["Offset of field: XSetWindowAttributes::do_not_propagate_mask"]
        [::std::mem::offset_of!(XSetWindowAttributes, do_not_propagate_mask) - 80usize];
    ["Offset of field: XSetWindowAttributes::override_redirect"]
        [::std::mem::offset_of!(XSetWindowAttributes, override_redirect) - 88usize];
    ["Offset of field: XSetWindowAttributes::colormap"]
        [::std::mem::offset_of!(XSetWindowAttributes, colormap) - 96usize];
    ["Offset of field: XSetWindowAttributes::cursor"]
        [::std::mem::offset_of!(XSetWindowAttributes, cursor) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWindowAttributes {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub visual: *mut Visual,
    pub root: Window,
    pub class: ::std::os::raw::c_int,
    pub bit_gravity: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub backing_planes: ::std::os::raw::c_ulong,
    pub backing_pixel: ::std::os::raw::c_ulong,
    pub save_under: ::std::os::raw::c_int,
    pub colormap: Colormap,
    pub map_installed: ::std::os::raw::c_int,
    pub map_state: ::std::os::raw::c_int,
    pub all_event_masks: ::std::os::raw::c_long,
    pub your_event_mask: ::std::os::raw::c_long,
    pub do_not_propagate_mask: ::std::os::raw::c_long,
    pub override_redirect: ::std::os::raw::c_int,
    pub screen: *mut Screen,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWindowAttributes"][::std::mem::size_of::<XWindowAttributes>() - 136usize];
    ["Alignment of XWindowAttributes"][::std::mem::align_of::<XWindowAttributes>() - 8usize];
    ["Offset of field: XWindowAttributes::x"]
        [::std::mem::offset_of!(XWindowAttributes, x) - 0usize];
    ["Offset of field: XWindowAttributes::y"]
        [::std::mem::offset_of!(XWindowAttributes, y) - 4usize];
    ["Offset of field: XWindowAttributes::width"]
        [::std::mem::offset_of!(XWindowAttributes, width) - 8usize];
    ["Offset of field: XWindowAttributes::height"]
        [::std::mem::offset_of!(XWindowAttributes, height) - 12usize];
    ["Offset of field: XWindowAttributes::border_width"]
        [::std::mem::offset_of!(XWindowAttributes, border_width) - 16usize];
    ["Offset of field: XWindowAttributes::depth"]
        [::std::mem::offset_of!(XWindowAttributes, depth) - 20usize];
    ["Offset of field: XWindowAttributes::visual"]
        [::std::mem::offset_of!(XWindowAttributes, visual) - 24usize];
    ["Offset of field: XWindowAttributes::root"]
        [::std::mem::offset_of!(XWindowAttributes, root) - 32usize];
    ["Offset of field: XWindowAttributes::class"]
        [::std::mem::offset_of!(XWindowAttributes, class) - 40usize];
    ["Offset of field: XWindowAttributes::bit_gravity"]
        [::std::mem::offset_of!(XWindowAttributes, bit_gravity) - 44usize];
    ["Offset of field: XWindowAttributes::win_gravity"]
        [::std::mem::offset_of!(XWindowAttributes, win_gravity) - 48usize];
    ["Offset of field: XWindowAttributes::backing_store"]
        [::std::mem::offset_of!(XWindowAttributes, backing_store) - 52usize];
    ["Offset of field: XWindowAttributes::backing_planes"]
        [::std::mem::offset_of!(XWindowAttributes, backing_planes) - 56usize];
    ["Offset of field: XWindowAttributes::backing_pixel"]
        [::std::mem::offset_of!(XWindowAttributes, backing_pixel) - 64usize];
    ["Offset of field: XWindowAttributes::save_under"]
        [::std::mem::offset_of!(XWindowAttributes, save_under) - 72usize];
    ["Offset of field: XWindowAttributes::colormap"]
        [::std::mem::offset_of!(XWindowAttributes, colormap) - 80usize];
    ["Offset of field: XWindowAttributes::map_installed"]
        [::std::mem::offset_of!(XWindowAttributes, map_installed) - 88usize];
    ["Offset of field: XWindowAttributes::map_state"]
        [::std::mem::offset_of!(XWindowAttributes, map_state) - 92usize];
    ["Offset of field: XWindowAttributes::all_event_masks"]
        [::std::mem::offset_of!(XWindowAttributes, all_event_masks) - 96usize];
    ["Offset of field: XWindowAttributes::your_event_mask"]
        [::std::mem::offset_of!(XWindowAttributes, your_event_mask) - 104usize];
    ["Offset of field: XWindowAttributes::do_not_propagate_mask"]
        [::std::mem::offset_of!(XWindowAttributes, do_not_propagate_mask) - 112usize];
    ["Offset of field: XWindowAttributes::override_redirect"]
        [::std::mem::offset_of!(XWindowAttributes, override_redirect) - 120usize];
    ["Offset of field: XWindowAttributes::screen"]
        [::std::mem::offset_of!(XWindowAttributes, screen) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XHostAddress {
    pub family: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub address: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XHostAddress"][::std::mem::size_of::<XHostAddress>() - 16usize];
    ["Alignment of XHostAddress"][::std::mem::align_of::<XHostAddress>() - 8usize];
    ["Offset of field: XHostAddress::family"]
        [::std::mem::offset_of!(XHostAddress, family) - 0usize];
    ["Offset of field: XHostAddress::length"]
        [::std::mem::offset_of!(XHostAddress, length) - 4usize];
    ["Offset of field: XHostAddress::address"]
        [::std::mem::offset_of!(XHostAddress, address) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XServerInterpretedAddress {
    pub typelength: ::std::os::raw::c_int,
    pub valuelength: ::std::os::raw::c_int,
    pub type_: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XServerInterpretedAddress"]
        [::std::mem::size_of::<XServerInterpretedAddress>() - 24usize];
    ["Alignment of XServerInterpretedAddress"]
        [::std::mem::align_of::<XServerInterpretedAddress>() - 8usize];
    ["Offset of field: XServerInterpretedAddress::typelength"]
        [::std::mem::offset_of!(XServerInterpretedAddress, typelength) - 0usize];
    ["Offset of field: XServerInterpretedAddress::valuelength"]
        [::std::mem::offset_of!(XServerInterpretedAddress, valuelength) - 4usize];
    ["Offset of field: XServerInterpretedAddress::type_"]
        [::std::mem::offset_of!(XServerInterpretedAddress, type_) - 8usize];
    ["Offset of field: XServerInterpretedAddress::value"]
        [::std::mem::offset_of!(XServerInterpretedAddress, value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XImage {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub xoffset: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub bytes_per_line: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub obdata: XPointer,
    pub f: _XImage_funcs,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XImage_funcs {
    pub create_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XDisplay,
            arg2: *mut Visual,
            arg3: ::std::os::raw::c_uint,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_char,
            arg7: ::std::os::raw::c_uint,
            arg8: ::std::os::raw::c_uint,
            arg9: ::std::os::raw::c_int,
            arg10: ::std::os::raw::c_int,
        ) -> *mut _XImage,
    >,
    pub destroy_image:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int>,
    pub get_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub put_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub sub_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_uint,
            arg5: ::std::os::raw::c_uint,
        ) -> *mut _XImage,
    >,
    pub add_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XImage_funcs"][::std::mem::size_of::<_XImage_funcs>() - 48usize];
    ["Alignment of _XImage_funcs"][::std::mem::align_of::<_XImage_funcs>() - 8usize];
    ["Offset of field: _XImage_funcs::create_image"]
        [::std::mem::offset_of!(_XImage_funcs, create_image) - 0usize];
    ["Offset of field: _XImage_funcs::destroy_image"]
        [::std::mem::offset_of!(_XImage_funcs, destroy_image) - 8usize];
    ["Offset of field: _XImage_funcs::get_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, get_pixel) - 16usize];
    ["Offset of field: _XImage_funcs::put_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, put_pixel) - 24usize];
    ["Offset of field: _XImage_funcs::sub_image"]
        [::std::mem::offset_of!(_XImage_funcs, sub_image) - 32usize];
    ["Offset of field: _XImage_funcs::add_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, add_pixel) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XImage"][::std::mem::size_of::<_XImage>() - 136usize];
    ["Alignment of _XImage"][::std::mem::align_of::<_XImage>() - 8usize];
    ["Offset of field: _XImage::width"][::std::mem::offset_of!(_XImage, width) - 0usize];
    ["Offset of field: _XImage::height"][::std::mem::offset_of!(_XImage, height) - 4usize];
    ["Offset of field: _XImage::xoffset"][::std::mem::offset_of!(_XImage, xoffset) - 8usize];
    ["Offset of field: _XImage::format"][::std::mem::offset_of!(_XImage, format) - 12usize];
    ["Offset of field: _XImage::data"][::std::mem::offset_of!(_XImage, data) - 16usize];
    ["Offset of field: _XImage::byte_order"][::std::mem::offset_of!(_XImage, byte_order) - 24usize];
    ["Offset of field: _XImage::bitmap_unit"]
        [::std::mem::offset_of!(_XImage, bitmap_unit) - 28usize];
    ["Offset of field: _XImage::bitmap_bit_order"]
        [::std::mem::offset_of!(_XImage, bitmap_bit_order) - 32usize];
    ["Offset of field: _XImage::bitmap_pad"][::std::mem::offset_of!(_XImage, bitmap_pad) - 36usize];
    ["Offset of field: _XImage::depth"][::std::mem::offset_of!(_XImage, depth) - 40usize];
    ["Offset of field: _XImage::bytes_per_line"]
        [::std::mem::offset_of!(_XImage, bytes_per_line) - 44usize];
    ["Offset of field: _XImage::bits_per_pixel"]
        [::std::mem::offset_of!(_XImage, bits_per_pixel) - 48usize];
    ["Offset of field: _XImage::red_mask"][::std::mem::offset_of!(_XImage, red_mask) - 56usize];
    ["Offset of field: _XImage::green_mask"][::std::mem::offset_of!(_XImage, green_mask) - 64usize];
    ["Offset of field: _XImage::blue_mask"][::std::mem::offset_of!(_XImage, blue_mask) - 72usize];
    ["Offset of field: _XImage::obdata"][::std::mem::offset_of!(_XImage, obdata) - 80usize];
    ["Offset of field: _XImage::f"][::std::mem::offset_of!(_XImage, f) - 88usize];
};
pub type XImage = _XImage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWindowChanges {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub sibling: Window,
    pub stack_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWindowChanges"][::std::mem::size_of::<XWindowChanges>() - 40usize];
    ["Alignment of XWindowChanges"][::std::mem::align_of::<XWindowChanges>() - 8usize];
    ["Offset of field: XWindowChanges::x"][::std::mem::offset_of!(XWindowChanges, x) - 0usize];
    ["Offset of field: XWindowChanges::y"][::std::mem::offset_of!(XWindowChanges, y) - 4usize];
    ["Offset of field: XWindowChanges::width"]
        [::std::mem::offset_of!(XWindowChanges, width) - 8usize];
    ["Offset of field: XWindowChanges::height"]
        [::std::mem::offset_of!(XWindowChanges, height) - 12usize];
    ["Offset of field: XWindowChanges::border_width"]
        [::std::mem::offset_of!(XWindowChanges, border_width) - 16usize];
    ["Offset of field: XWindowChanges::sibling"]
        [::std::mem::offset_of!(XWindowChanges, sibling) - 24usize];
    ["Offset of field: XWindowChanges::stack_mode"]
        [::std::mem::offset_of!(XWindowChanges, stack_mode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XColor {
    pub pixel: ::std::os::raw::c_ulong,
    pub red: ::std::os::raw::c_ushort,
    pub green: ::std::os::raw::c_ushort,
    pub blue: ::std::os::raw::c_ushort,
    pub flags: ::std::os::raw::c_char,
    pub pad: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XColor"][::std::mem::size_of::<XColor>() - 16usize];
    ["Alignment of XColor"][::std::mem::align_of::<XColor>() - 8usize];
    ["Offset of field: XColor::pixel"][::std::mem::offset_of!(XColor, pixel) - 0usize];
    ["Offset of field: XColor::red"][::std::mem::offset_of!(XColor, red) - 8usize];
    ["Offset of field: XColor::green"][::std::mem::offset_of!(XColor, green) - 10usize];
    ["Offset of field: XColor::blue"][::std::mem::offset_of!(XColor, blue) - 12usize];
    ["Offset of field: XColor::flags"][::std::mem::offset_of!(XColor, flags) - 14usize];
    ["Offset of field: XColor::pad"][::std::mem::offset_of!(XColor, pad) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSegment {
    pub x1: ::std::os::raw::c_short,
    pub y1: ::std::os::raw::c_short,
    pub x2: ::std::os::raw::c_short,
    pub y2: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSegment"][::std::mem::size_of::<XSegment>() - 8usize];
    ["Alignment of XSegment"][::std::mem::align_of::<XSegment>() - 2usize];
    ["Offset of field: XSegment::x1"][::std::mem::offset_of!(XSegment, x1) - 0usize];
    ["Offset of field: XSegment::y1"][::std::mem::offset_of!(XSegment, y1) - 2usize];
    ["Offset of field: XSegment::x2"][::std::mem::offset_of!(XSegment, x2) - 4usize];
    ["Offset of field: XSegment::y2"][::std::mem::offset_of!(XSegment, y2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPoint {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPoint"][::std::mem::size_of::<XPoint>() - 4usize];
    ["Alignment of XPoint"][::std::mem::align_of::<XPoint>() - 2usize];
    ["Offset of field: XPoint::x"][::std::mem::offset_of!(XPoint, x) - 0usize];
    ["Offset of field: XPoint::y"][::std::mem::offset_of!(XPoint, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XRectangle {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRectangle"][::std::mem::size_of::<XRectangle>() - 8usize];
    ["Alignment of XRectangle"][::std::mem::align_of::<XRectangle>() - 2usize];
    ["Offset of field: XRectangle::x"][::std::mem::offset_of!(XRectangle, x) - 0usize];
    ["Offset of field: XRectangle::y"][::std::mem::offset_of!(XRectangle, y) - 2usize];
    ["Offset of field: XRectangle::width"][::std::mem::offset_of!(XRectangle, width) - 4usize];
    ["Offset of field: XRectangle::height"][::std::mem::offset_of!(XRectangle, height) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XArc {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub angle1: ::std::os::raw::c_short,
    pub angle2: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XArc"][::std::mem::size_of::<XArc>() - 12usize];
    ["Alignment of XArc"][::std::mem::align_of::<XArc>() - 2usize];
    ["Offset of field: XArc::x"][::std::mem::offset_of!(XArc, x) - 0usize];
    ["Offset of field: XArc::y"][::std::mem::offset_of!(XArc, y) - 2usize];
    ["Offset of field: XArc::width"][::std::mem::offset_of!(XArc, width) - 4usize];
    ["Offset of field: XArc::height"][::std::mem::offset_of!(XArc, height) - 6usize];
    ["Offset of field: XArc::angle1"][::std::mem::offset_of!(XArc, angle1) - 8usize];
    ["Offset of field: XArc::angle2"][::std::mem::offset_of!(XArc, angle2) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyboardControl {
    pub key_click_percent: ::std::os::raw::c_int,
    pub bell_percent: ::std::os::raw::c_int,
    pub bell_pitch: ::std::os::raw::c_int,
    pub bell_duration: ::std::os::raw::c_int,
    pub led: ::std::os::raw::c_int,
    pub led_mode: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub auto_repeat_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyboardControl"][::std::mem::size_of::<XKeyboardControl>() - 32usize];
    ["Alignment of XKeyboardControl"][::std::mem::align_of::<XKeyboardControl>() - 4usize];
    ["Offset of field: XKeyboardControl::key_click_percent"]
        [::std::mem::offset_of!(XKeyboardControl, key_click_percent) - 0usize];
    ["Offset of field: XKeyboardControl::bell_percent"]
        [::std::mem::offset_of!(XKeyboardControl, bell_percent) - 4usize];
    ["Offset of field: XKeyboardControl::bell_pitch"]
        [::std::mem::offset_of!(XKeyboardControl, bell_pitch) - 8usize];
    ["Offset of field: XKeyboardControl::bell_duration"]
        [::std::mem::offset_of!(XKeyboardControl, bell_duration) - 12usize];
    ["Offset of field: XKeyboardControl::led"]
        [::std::mem::offset_of!(XKeyboardControl, led) - 16usize];
    ["Offset of field: XKeyboardControl::led_mode"]
        [::std::mem::offset_of!(XKeyboardControl, led_mode) - 20usize];
    ["Offset of field: XKeyboardControl::key"]
        [::std::mem::offset_of!(XKeyboardControl, key) - 24usize];
    ["Offset of field: XKeyboardControl::auto_repeat_mode"]
        [::std::mem::offset_of!(XKeyboardControl, auto_repeat_mode) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyboardState {
    pub key_click_percent: ::std::os::raw::c_int,
    pub bell_percent: ::std::os::raw::c_int,
    pub bell_pitch: ::std::os::raw::c_uint,
    pub bell_duration: ::std::os::raw::c_uint,
    pub led_mask: ::std::os::raw::c_ulong,
    pub global_auto_repeat: ::std::os::raw::c_int,
    pub auto_repeats: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyboardState"][::std::mem::size_of::<XKeyboardState>() - 64usize];
    ["Alignment of XKeyboardState"][::std::mem::align_of::<XKeyboardState>() - 8usize];
    ["Offset of field: XKeyboardState::key_click_percent"]
        [::std::mem::offset_of!(XKeyboardState, key_click_percent) - 0usize];
    ["Offset of field: XKeyboardState::bell_percent"]
        [::std::mem::offset_of!(XKeyboardState, bell_percent) - 4usize];
    ["Offset of field: XKeyboardState::bell_pitch"]
        [::std::mem::offset_of!(XKeyboardState, bell_pitch) - 8usize];
    ["Offset of field: XKeyboardState::bell_duration"]
        [::std::mem::offset_of!(XKeyboardState, bell_duration) - 12usize];
    ["Offset of field: XKeyboardState::led_mask"]
        [::std::mem::offset_of!(XKeyboardState, led_mask) - 16usize];
    ["Offset of field: XKeyboardState::global_auto_repeat"]
        [::std::mem::offset_of!(XKeyboardState, global_auto_repeat) - 24usize];
    ["Offset of field: XKeyboardState::auto_repeats"]
        [::std::mem::offset_of!(XKeyboardState, auto_repeats) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTimeCoord {
    pub time: Time,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTimeCoord"][::std::mem::size_of::<XTimeCoord>() - 16usize];
    ["Alignment of XTimeCoord"][::std::mem::align_of::<XTimeCoord>() - 8usize];
    ["Offset of field: XTimeCoord::time"][::std::mem::offset_of!(XTimeCoord, time) - 0usize];
    ["Offset of field: XTimeCoord::x"][::std::mem::offset_of!(XTimeCoord, x) - 8usize];
    ["Offset of field: XTimeCoord::y"][::std::mem::offset_of!(XTimeCoord, y) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XModifierKeymap {
    pub max_keypermod: ::std::os::raw::c_int,
    pub modifiermap: *mut KeyCode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XModifierKeymap"][::std::mem::size_of::<XModifierKeymap>() - 16usize];
    ["Alignment of XModifierKeymap"][::std::mem::align_of::<XModifierKeymap>() - 8usize];
    ["Offset of field: XModifierKeymap::max_keypermod"]
        [::std::mem::offset_of!(XModifierKeymap, max_keypermod) - 0usize];
    ["Offset of field: XModifierKeymap::modifiermap"]
        [::std::mem::offset_of!(XModifierKeymap, modifiermap) - 8usize];
};
pub type Display = _XDisplay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XrmHashBucketRec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub ext_data: *mut XExtData,
    pub private1: *mut _XPrivate,
    pub fd: ::std::os::raw::c_int,
    pub private2: ::std::os::raw::c_int,
    pub proto_major_version: ::std::os::raw::c_int,
    pub proto_minor_version: ::std::os::raw::c_int,
    pub vendor: *mut ::std::os::raw::c_char,
    pub private3: XID,
    pub private4: XID,
    pub private5: XID,
    pub private6: ::std::os::raw::c_int,
    pub resource_alloc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID>,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub nformats: ::std::os::raw::c_int,
    pub pixmap_format: *mut ScreenFormat,
    pub private8: ::std::os::raw::c_int,
    pub release: ::std::os::raw::c_int,
    pub private9: *mut _XPrivate,
    pub private10: *mut _XPrivate,
    pub qlen: ::std::os::raw::c_int,
    pub last_request_read: ::std::os::raw::c_ulong,
    pub request: ::std::os::raw::c_ulong,
    pub private11: XPointer,
    pub private12: XPointer,
    pub private13: XPointer,
    pub private14: XPointer,
    pub max_request_size: ::std::os::raw::c_uint,
    pub db: *mut _XrmHashBucketRec,
    pub private15:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int>,
    pub display_name: *mut ::std::os::raw::c_char,
    pub default_screen: ::std::os::raw::c_int,
    pub nscreens: ::std::os::raw::c_int,
    pub screens: *mut Screen,
    pub motion_buffer: ::std::os::raw::c_ulong,
    pub private16: ::std::os::raw::c_ulong,
    pub min_keycode: ::std::os::raw::c_int,
    pub max_keycode: ::std::os::raw::c_int,
    pub private17: XPointer,
    pub private18: XPointer,
    pub private19: ::std::os::raw::c_int,
    pub xdefaults: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_1"][::std::mem::size_of::<_bindgen_ty_1>() - 296usize];
    ["Alignment of _bindgen_ty_1"][::std::mem::align_of::<_bindgen_ty_1>() - 8usize];
    ["Offset of field: _bindgen_ty_1::ext_data"]
        [::std::mem::offset_of!(_bindgen_ty_1, ext_data) - 0usize];
    ["Offset of field: _bindgen_ty_1::private1"]
        [::std::mem::offset_of!(_bindgen_ty_1, private1) - 8usize];
    ["Offset of field: _bindgen_ty_1::fd"][::std::mem::offset_of!(_bindgen_ty_1, fd) - 16usize];
    ["Offset of field: _bindgen_ty_1::private2"]
        [::std::mem::offset_of!(_bindgen_ty_1, private2) - 20usize];
    ["Offset of field: _bindgen_ty_1::proto_major_version"]
        [::std::mem::offset_of!(_bindgen_ty_1, proto_major_version) - 24usize];
    ["Offset of field: _bindgen_ty_1::proto_minor_version"]
        [::std::mem::offset_of!(_bindgen_ty_1, proto_minor_version) - 28usize];
    ["Offset of field: _bindgen_ty_1::vendor"]
        [::std::mem::offset_of!(_bindgen_ty_1, vendor) - 32usize];
    ["Offset of field: _bindgen_ty_1::private3"]
        [::std::mem::offset_of!(_bindgen_ty_1, private3) - 40usize];
    ["Offset of field: _bindgen_ty_1::private4"]
        [::std::mem::offset_of!(_bindgen_ty_1, private4) - 48usize];
    ["Offset of field: _bindgen_ty_1::private5"]
        [::std::mem::offset_of!(_bindgen_ty_1, private5) - 56usize];
    ["Offset of field: _bindgen_ty_1::private6"]
        [::std::mem::offset_of!(_bindgen_ty_1, private6) - 64usize];
    ["Offset of field: _bindgen_ty_1::resource_alloc"]
        [::std::mem::offset_of!(_bindgen_ty_1, resource_alloc) - 72usize];
    ["Offset of field: _bindgen_ty_1::byte_order"]
        [::std::mem::offset_of!(_bindgen_ty_1, byte_order) - 80usize];
    ["Offset of field: _bindgen_ty_1::bitmap_unit"]
        [::std::mem::offset_of!(_bindgen_ty_1, bitmap_unit) - 84usize];
    ["Offset of field: _bindgen_ty_1::bitmap_pad"]
        [::std::mem::offset_of!(_bindgen_ty_1, bitmap_pad) - 88usize];
    ["Offset of field: _bindgen_ty_1::bitmap_bit_order"]
        [::std::mem::offset_of!(_bindgen_ty_1, bitmap_bit_order) - 92usize];
    ["Offset of field: _bindgen_ty_1::nformats"]
        [::std::mem::offset_of!(_bindgen_ty_1, nformats) - 96usize];
    ["Offset of field: _bindgen_ty_1::pixmap_format"]
        [::std::mem::offset_of!(_bindgen_ty_1, pixmap_format) - 104usize];
    ["Offset of field: _bindgen_ty_1::private8"]
        [::std::mem::offset_of!(_bindgen_ty_1, private8) - 112usize];
    ["Offset of field: _bindgen_ty_1::release"]
        [::std::mem::offset_of!(_bindgen_ty_1, release) - 116usize];
    ["Offset of field: _bindgen_ty_1::private9"]
        [::std::mem::offset_of!(_bindgen_ty_1, private9) - 120usize];
    ["Offset of field: _bindgen_ty_1::private10"]
        [::std::mem::offset_of!(_bindgen_ty_1, private10) - 128usize];
    ["Offset of field: _bindgen_ty_1::qlen"]
        [::std::mem::offset_of!(_bindgen_ty_1, qlen) - 136usize];
    ["Offset of field: _bindgen_ty_1::last_request_read"]
        [::std::mem::offset_of!(_bindgen_ty_1, last_request_read) - 144usize];
    ["Offset of field: _bindgen_ty_1::request"]
        [::std::mem::offset_of!(_bindgen_ty_1, request) - 152usize];
    ["Offset of field: _bindgen_ty_1::private11"]
        [::std::mem::offset_of!(_bindgen_ty_1, private11) - 160usize];
    ["Offset of field: _bindgen_ty_1::private12"]
        [::std::mem::offset_of!(_bindgen_ty_1, private12) - 168usize];
    ["Offset of field: _bindgen_ty_1::private13"]
        [::std::mem::offset_of!(_bindgen_ty_1, private13) - 176usize];
    ["Offset of field: _bindgen_ty_1::private14"]
        [::std::mem::offset_of!(_bindgen_ty_1, private14) - 184usize];
    ["Offset of field: _bindgen_ty_1::max_request_size"]
        [::std::mem::offset_of!(_bindgen_ty_1, max_request_size) - 192usize];
    ["Offset of field: _bindgen_ty_1::db"][::std::mem::offset_of!(_bindgen_ty_1, db) - 200usize];
    ["Offset of field: _bindgen_ty_1::private15"]
        [::std::mem::offset_of!(_bindgen_ty_1, private15) - 208usize];
    ["Offset of field: _bindgen_ty_1::display_name"]
        [::std::mem::offset_of!(_bindgen_ty_1, display_name) - 216usize];
    ["Offset of field: _bindgen_ty_1::default_screen"]
        [::std::mem::offset_of!(_bindgen_ty_1, default_screen) - 224usize];
    ["Offset of field: _bindgen_ty_1::nscreens"]
        [::std::mem::offset_of!(_bindgen_ty_1, nscreens) - 228usize];
    ["Offset of field: _bindgen_ty_1::screens"]
        [::std::mem::offset_of!(_bindgen_ty_1, screens) - 232usize];
    ["Offset of field: _bindgen_ty_1::motion_buffer"]
        [::std::mem::offset_of!(_bindgen_ty_1, motion_buffer) - 240usize];
    ["Offset of field: _bindgen_ty_1::private16"]
        [::std::mem::offset_of!(_bindgen_ty_1, private16) - 248usize];
    ["Offset of field: _bindgen_ty_1::min_keycode"]
        [::std::mem::offset_of!(_bindgen_ty_1, min_keycode) - 256usize];
    ["Offset of field: _bindgen_ty_1::max_keycode"]
        [::std::mem::offset_of!(_bindgen_ty_1, max_keycode) - 260usize];
    ["Offset of field: _bindgen_ty_1::private17"]
        [::std::mem::offset_of!(_bindgen_ty_1, private17) - 264usize];
    ["Offset of field: _bindgen_ty_1::private18"]
        [::std::mem::offset_of!(_bindgen_ty_1, private18) - 272usize];
    ["Offset of field: _bindgen_ty_1::private19"]
        [::std::mem::offset_of!(_bindgen_ty_1, private19) - 280usize];
    ["Offset of field: _bindgen_ty_1::xdefaults"]
        [::std::mem::offset_of!(_bindgen_ty_1, xdefaults) - 288usize];
};
pub type _XPrivDisplay = *mut _bindgen_ty_1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub keycode: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyEvent"][::std::mem::size_of::<XKeyEvent>() - 96usize];
    ["Alignment of XKeyEvent"][::std::mem::align_of::<XKeyEvent>() - 8usize];
    ["Offset of field: XKeyEvent::type_"][::std::mem::offset_of!(XKeyEvent, type_) - 0usize];
    ["Offset of field: XKeyEvent::serial"][::std::mem::offset_of!(XKeyEvent, serial) - 8usize];
    ["Offset of field: XKeyEvent::send_event"]
        [::std::mem::offset_of!(XKeyEvent, send_event) - 16usize];
    ["Offset of field: XKeyEvent::display"][::std::mem::offset_of!(XKeyEvent, display) - 24usize];
    ["Offset of field: XKeyEvent::window"][::std::mem::offset_of!(XKeyEvent, window) - 32usize];
    ["Offset of field: XKeyEvent::root"][::std::mem::offset_of!(XKeyEvent, root) - 40usize];
    ["Offset of field: XKeyEvent::subwindow"]
        [::std::mem::offset_of!(XKeyEvent, subwindow) - 48usize];
    ["Offset of field: XKeyEvent::time"][::std::mem::offset_of!(XKeyEvent, time) - 56usize];
    ["Offset of field: XKeyEvent::x"][::std::mem::offset_of!(XKeyEvent, x) - 64usize];
    ["Offset of field: XKeyEvent::y"][::std::mem::offset_of!(XKeyEvent, y) - 68usize];
    ["Offset of field: XKeyEvent::x_root"][::std::mem::offset_of!(XKeyEvent, x_root) - 72usize];
    ["Offset of field: XKeyEvent::y_root"][::std::mem::offset_of!(XKeyEvent, y_root) - 76usize];
    ["Offset of field: XKeyEvent::state"][::std::mem::offset_of!(XKeyEvent, state) - 80usize];
    ["Offset of field: XKeyEvent::keycode"][::std::mem::offset_of!(XKeyEvent, keycode) - 84usize];
    ["Offset of field: XKeyEvent::same_screen"]
        [::std::mem::offset_of!(XKeyEvent, same_screen) - 88usize];
};
pub type XKeyPressedEvent = XKeyEvent;
pub type XKeyReleasedEvent = XKeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonEvent"][::std::mem::size_of::<XButtonEvent>() - 96usize];
    ["Alignment of XButtonEvent"][::std::mem::align_of::<XButtonEvent>() - 8usize];
    ["Offset of field: XButtonEvent::type_"][::std::mem::offset_of!(XButtonEvent, type_) - 0usize];
    ["Offset of field: XButtonEvent::serial"]
        [::std::mem::offset_of!(XButtonEvent, serial) - 8usize];
    ["Offset of field: XButtonEvent::send_event"]
        [::std::mem::offset_of!(XButtonEvent, send_event) - 16usize];
    ["Offset of field: XButtonEvent::display"]
        [::std::mem::offset_of!(XButtonEvent, display) - 24usize];
    ["Offset of field: XButtonEvent::window"]
        [::std::mem::offset_of!(XButtonEvent, window) - 32usize];
    ["Offset of field: XButtonEvent::root"][::std::mem::offset_of!(XButtonEvent, root) - 40usize];
    ["Offset of field: XButtonEvent::subwindow"]
        [::std::mem::offset_of!(XButtonEvent, subwindow) - 48usize];
    ["Offset of field: XButtonEvent::time"][::std::mem::offset_of!(XButtonEvent, time) - 56usize];
    ["Offset of field: XButtonEvent::x"][::std::mem::offset_of!(XButtonEvent, x) - 64usize];
    ["Offset of field: XButtonEvent::y"][::std::mem::offset_of!(XButtonEvent, y) - 68usize];
    ["Offset of field: XButtonEvent::x_root"]
        [::std::mem::offset_of!(XButtonEvent, x_root) - 72usize];
    ["Offset of field: XButtonEvent::y_root"]
        [::std::mem::offset_of!(XButtonEvent, y_root) - 76usize];
    ["Offset of field: XButtonEvent::state"][::std::mem::offset_of!(XButtonEvent, state) - 80usize];
    ["Offset of field: XButtonEvent::button"]
        [::std::mem::offset_of!(XButtonEvent, button) - 84usize];
    ["Offset of field: XButtonEvent::same_screen"]
        [::std::mem::offset_of!(XButtonEvent, same_screen) - 88usize];
};
pub type XButtonPressedEvent = XButtonEvent;
pub type XButtonReleasedEvent = XButtonEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMotionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub is_hint: ::std::os::raw::c_char,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMotionEvent"][::std::mem::size_of::<XMotionEvent>() - 96usize];
    ["Alignment of XMotionEvent"][::std::mem::align_of::<XMotionEvent>() - 8usize];
    ["Offset of field: XMotionEvent::type_"][::std::mem::offset_of!(XMotionEvent, type_) - 0usize];
    ["Offset of field: XMotionEvent::serial"]
        [::std::mem::offset_of!(XMotionEvent, serial) - 8usize];
    ["Offset of field: XMotionEvent::send_event"]
        [::std::mem::offset_of!(XMotionEvent, send_event) - 16usize];
    ["Offset of field: XMotionEvent::display"]
        [::std::mem::offset_of!(XMotionEvent, display) - 24usize];
    ["Offset of field: XMotionEvent::window"]
        [::std::mem::offset_of!(XMotionEvent, window) - 32usize];
    ["Offset of field: XMotionEvent::root"][::std::mem::offset_of!(XMotionEvent, root) - 40usize];
    ["Offset of field: XMotionEvent::subwindow"]
        [::std::mem::offset_of!(XMotionEvent, subwindow) - 48usize];
    ["Offset of field: XMotionEvent::time"][::std::mem::offset_of!(XMotionEvent, time) - 56usize];
    ["Offset of field: XMotionEvent::x"][::std::mem::offset_of!(XMotionEvent, x) - 64usize];
    ["Offset of field: XMotionEvent::y"][::std::mem::offset_of!(XMotionEvent, y) - 68usize];
    ["Offset of field: XMotionEvent::x_root"]
        [::std::mem::offset_of!(XMotionEvent, x_root) - 72usize];
    ["Offset of field: XMotionEvent::y_root"]
        [::std::mem::offset_of!(XMotionEvent, y_root) - 76usize];
    ["Offset of field: XMotionEvent::state"][::std::mem::offset_of!(XMotionEvent, state) - 80usize];
    ["Offset of field: XMotionEvent::is_hint"]
        [::std::mem::offset_of!(XMotionEvent, is_hint) - 84usize];
    ["Offset of field: XMotionEvent::same_screen"]
        [::std::mem::offset_of!(XMotionEvent, same_screen) - 88usize];
};
pub type XPointerMovedEvent = XMotionEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCrossingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub same_screen: ::std::os::raw::c_int,
    pub focus: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCrossingEvent"][::std::mem::size_of::<XCrossingEvent>() - 104usize];
    ["Alignment of XCrossingEvent"][::std::mem::align_of::<XCrossingEvent>() - 8usize];
    ["Offset of field: XCrossingEvent::type_"]
        [::std::mem::offset_of!(XCrossingEvent, type_) - 0usize];
    ["Offset of field: XCrossingEvent::serial"]
        [::std::mem::offset_of!(XCrossingEvent, serial) - 8usize];
    ["Offset of field: XCrossingEvent::send_event"]
        [::std::mem::offset_of!(XCrossingEvent, send_event) - 16usize];
    ["Offset of field: XCrossingEvent::display"]
        [::std::mem::offset_of!(XCrossingEvent, display) - 24usize];
    ["Offset of field: XCrossingEvent::window"]
        [::std::mem::offset_of!(XCrossingEvent, window) - 32usize];
    ["Offset of field: XCrossingEvent::root"]
        [::std::mem::offset_of!(XCrossingEvent, root) - 40usize];
    ["Offset of field: XCrossingEvent::subwindow"]
        [::std::mem::offset_of!(XCrossingEvent, subwindow) - 48usize];
    ["Offset of field: XCrossingEvent::time"]
        [::std::mem::offset_of!(XCrossingEvent, time) - 56usize];
    ["Offset of field: XCrossingEvent::x"][::std::mem::offset_of!(XCrossingEvent, x) - 64usize];
    ["Offset of field: XCrossingEvent::y"][::std::mem::offset_of!(XCrossingEvent, y) - 68usize];
    ["Offset of field: XCrossingEvent::x_root"]
        [::std::mem::offset_of!(XCrossingEvent, x_root) - 72usize];
    ["Offset of field: XCrossingEvent::y_root"]
        [::std::mem::offset_of!(XCrossingEvent, y_root) - 76usize];
    ["Offset of field: XCrossingEvent::mode"]
        [::std::mem::offset_of!(XCrossingEvent, mode) - 80usize];
    ["Offset of field: XCrossingEvent::detail"]
        [::std::mem::offset_of!(XCrossingEvent, detail) - 84usize];
    ["Offset of field: XCrossingEvent::same_screen"]
        [::std::mem::offset_of!(XCrossingEvent, same_screen) - 88usize];
    ["Offset of field: XCrossingEvent::focus"]
        [::std::mem::offset_of!(XCrossingEvent, focus) - 92usize];
    ["Offset of field: XCrossingEvent::state"]
        [::std::mem::offset_of!(XCrossingEvent, state) - 96usize];
};
pub type XEnterWindowEvent = XCrossingEvent;
pub type XLeaveWindowEvent = XCrossingEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFocusChangeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFocusChangeEvent"][::std::mem::size_of::<XFocusChangeEvent>() - 48usize];
    ["Alignment of XFocusChangeEvent"][::std::mem::align_of::<XFocusChangeEvent>() - 8usize];
    ["Offset of field: XFocusChangeEvent::type_"]
        [::std::mem::offset_of!(XFocusChangeEvent, type_) - 0usize];
    ["Offset of field: XFocusChangeEvent::serial"]
        [::std::mem::offset_of!(XFocusChangeEvent, serial) - 8usize];
    ["Offset of field: XFocusChangeEvent::send_event"]
        [::std::mem::offset_of!(XFocusChangeEvent, send_event) - 16usize];
    ["Offset of field: XFocusChangeEvent::display"]
        [::std::mem::offset_of!(XFocusChangeEvent, display) - 24usize];
    ["Offset of field: XFocusChangeEvent::window"]
        [::std::mem::offset_of!(XFocusChangeEvent, window) - 32usize];
    ["Offset of field: XFocusChangeEvent::mode"]
        [::std::mem::offset_of!(XFocusChangeEvent, mode) - 40usize];
    ["Offset of field: XFocusChangeEvent::detail"]
        [::std::mem::offset_of!(XFocusChangeEvent, detail) - 44usize];
};
pub type XFocusInEvent = XFocusChangeEvent;
pub type XFocusOutEvent = XFocusChangeEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeymapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub key_vector: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeymapEvent"][::std::mem::size_of::<XKeymapEvent>() - 72usize];
    ["Alignment of XKeymapEvent"][::std::mem::align_of::<XKeymapEvent>() - 8usize];
    ["Offset of field: XKeymapEvent::type_"][::std::mem::offset_of!(XKeymapEvent, type_) - 0usize];
    ["Offset of field: XKeymapEvent::serial"]
        [::std::mem::offset_of!(XKeymapEvent, serial) - 8usize];
    ["Offset of field: XKeymapEvent::send_event"]
        [::std::mem::offset_of!(XKeymapEvent, send_event) - 16usize];
    ["Offset of field: XKeymapEvent::display"]
        [::std::mem::offset_of!(XKeymapEvent, display) - 24usize];
    ["Offset of field: XKeymapEvent::window"]
        [::std::mem::offset_of!(XKeymapEvent, window) - 32usize];
    ["Offset of field: XKeymapEvent::key_vector"]
        [::std::mem::offset_of!(XKeymapEvent, key_vector) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExposeEvent"][::std::mem::size_of::<XExposeEvent>() - 64usize];
    ["Alignment of XExposeEvent"][::std::mem::align_of::<XExposeEvent>() - 8usize];
    ["Offset of field: XExposeEvent::type_"][::std::mem::offset_of!(XExposeEvent, type_) - 0usize];
    ["Offset of field: XExposeEvent::serial"]
        [::std::mem::offset_of!(XExposeEvent, serial) - 8usize];
    ["Offset of field: XExposeEvent::send_event"]
        [::std::mem::offset_of!(XExposeEvent, send_event) - 16usize];
    ["Offset of field: XExposeEvent::display"]
        [::std::mem::offset_of!(XExposeEvent, display) - 24usize];
    ["Offset of field: XExposeEvent::window"]
        [::std::mem::offset_of!(XExposeEvent, window) - 32usize];
    ["Offset of field: XExposeEvent::x"][::std::mem::offset_of!(XExposeEvent, x) - 40usize];
    ["Offset of field: XExposeEvent::y"][::std::mem::offset_of!(XExposeEvent, y) - 44usize];
    ["Offset of field: XExposeEvent::width"][::std::mem::offset_of!(XExposeEvent, width) - 48usize];
    ["Offset of field: XExposeEvent::height"]
        [::std::mem::offset_of!(XExposeEvent, height) - 52usize];
    ["Offset of field: XExposeEvent::count"][::std::mem::offset_of!(XExposeEvent, count) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGraphicsExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGraphicsExposeEvent"][::std::mem::size_of::<XGraphicsExposeEvent>() - 72usize];
    ["Alignment of XGraphicsExposeEvent"][::std::mem::align_of::<XGraphicsExposeEvent>() - 8usize];
    ["Offset of field: XGraphicsExposeEvent::type_"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, type_) - 0usize];
    ["Offset of field: XGraphicsExposeEvent::serial"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, serial) - 8usize];
    ["Offset of field: XGraphicsExposeEvent::send_event"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, send_event) - 16usize];
    ["Offset of field: XGraphicsExposeEvent::display"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, display) - 24usize];
    ["Offset of field: XGraphicsExposeEvent::drawable"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, drawable) - 32usize];
    ["Offset of field: XGraphicsExposeEvent::x"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, x) - 40usize];
    ["Offset of field: XGraphicsExposeEvent::y"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, y) - 44usize];
    ["Offset of field: XGraphicsExposeEvent::width"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, width) - 48usize];
    ["Offset of field: XGraphicsExposeEvent::height"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, height) - 52usize];
    ["Offset of field: XGraphicsExposeEvent::count"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, count) - 56usize];
    ["Offset of field: XGraphicsExposeEvent::major_code"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, major_code) - 60usize];
    ["Offset of field: XGraphicsExposeEvent::minor_code"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, minor_code) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XNoExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XNoExposeEvent"][::std::mem::size_of::<XNoExposeEvent>() - 48usize];
    ["Alignment of XNoExposeEvent"][::std::mem::align_of::<XNoExposeEvent>() - 8usize];
    ["Offset of field: XNoExposeEvent::type_"]
        [::std::mem::offset_of!(XNoExposeEvent, type_) - 0usize];
    ["Offset of field: XNoExposeEvent::serial"]
        [::std::mem::offset_of!(XNoExposeEvent, serial) - 8usize];
    ["Offset of field: XNoExposeEvent::send_event"]
        [::std::mem::offset_of!(XNoExposeEvent, send_event) - 16usize];
    ["Offset of field: XNoExposeEvent::display"]
        [::std::mem::offset_of!(XNoExposeEvent, display) - 24usize];
    ["Offset of field: XNoExposeEvent::drawable"]
        [::std::mem::offset_of!(XNoExposeEvent, drawable) - 32usize];
    ["Offset of field: XNoExposeEvent::major_code"]
        [::std::mem::offset_of!(XNoExposeEvent, major_code) - 40usize];
    ["Offset of field: XNoExposeEvent::minor_code"]
        [::std::mem::offset_of!(XNoExposeEvent, minor_code) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XVisibilityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XVisibilityEvent"][::std::mem::size_of::<XVisibilityEvent>() - 48usize];
    ["Alignment of XVisibilityEvent"][::std::mem::align_of::<XVisibilityEvent>() - 8usize];
    ["Offset of field: XVisibilityEvent::type_"]
        [::std::mem::offset_of!(XVisibilityEvent, type_) - 0usize];
    ["Offset of field: XVisibilityEvent::serial"]
        [::std::mem::offset_of!(XVisibilityEvent, serial) - 8usize];
    ["Offset of field: XVisibilityEvent::send_event"]
        [::std::mem::offset_of!(XVisibilityEvent, send_event) - 16usize];
    ["Offset of field: XVisibilityEvent::display"]
        [::std::mem::offset_of!(XVisibilityEvent, display) - 24usize];
    ["Offset of field: XVisibilityEvent::window"]
        [::std::mem::offset_of!(XVisibilityEvent, window) - 32usize];
    ["Offset of field: XVisibilityEvent::state"]
        [::std::mem::offset_of!(XVisibilityEvent, state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCreateWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCreateWindowEvent"][::std::mem::size_of::<XCreateWindowEvent>() - 72usize];
    ["Alignment of XCreateWindowEvent"][::std::mem::align_of::<XCreateWindowEvent>() - 8usize];
    ["Offset of field: XCreateWindowEvent::type_"]
        [::std::mem::offset_of!(XCreateWindowEvent, type_) - 0usize];
    ["Offset of field: XCreateWindowEvent::serial"]
        [::std::mem::offset_of!(XCreateWindowEvent, serial) - 8usize];
    ["Offset of field: XCreateWindowEvent::send_event"]
        [::std::mem::offset_of!(XCreateWindowEvent, send_event) - 16usize];
    ["Offset of field: XCreateWindowEvent::display"]
        [::std::mem::offset_of!(XCreateWindowEvent, display) - 24usize];
    ["Offset of field: XCreateWindowEvent::parent"]
        [::std::mem::offset_of!(XCreateWindowEvent, parent) - 32usize];
    ["Offset of field: XCreateWindowEvent::window"]
        [::std::mem::offset_of!(XCreateWindowEvent, window) - 40usize];
    ["Offset of field: XCreateWindowEvent::x"]
        [::std::mem::offset_of!(XCreateWindowEvent, x) - 48usize];
    ["Offset of field: XCreateWindowEvent::y"]
        [::std::mem::offset_of!(XCreateWindowEvent, y) - 52usize];
    ["Offset of field: XCreateWindowEvent::width"]
        [::std::mem::offset_of!(XCreateWindowEvent, width) - 56usize];
    ["Offset of field: XCreateWindowEvent::height"]
        [::std::mem::offset_of!(XCreateWindowEvent, height) - 60usize];
    ["Offset of field: XCreateWindowEvent::border_width"]
        [::std::mem::offset_of!(XCreateWindowEvent, border_width) - 64usize];
    ["Offset of field: XCreateWindowEvent::override_redirect"]
        [::std::mem::offset_of!(XCreateWindowEvent, override_redirect) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDestroyWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDestroyWindowEvent"][::std::mem::size_of::<XDestroyWindowEvent>() - 48usize];
    ["Alignment of XDestroyWindowEvent"][::std::mem::align_of::<XDestroyWindowEvent>() - 8usize];
    ["Offset of field: XDestroyWindowEvent::type_"]
        [::std::mem::offset_of!(XDestroyWindowEvent, type_) - 0usize];
    ["Offset of field: XDestroyWindowEvent::serial"]
        [::std::mem::offset_of!(XDestroyWindowEvent, serial) - 8usize];
    ["Offset of field: XDestroyWindowEvent::send_event"]
        [::std::mem::offset_of!(XDestroyWindowEvent, send_event) - 16usize];
    ["Offset of field: XDestroyWindowEvent::display"]
        [::std::mem::offset_of!(XDestroyWindowEvent, display) - 24usize];
    ["Offset of field: XDestroyWindowEvent::event"]
        [::std::mem::offset_of!(XDestroyWindowEvent, event) - 32usize];
    ["Offset of field: XDestroyWindowEvent::window"]
        [::std::mem::offset_of!(XDestroyWindowEvent, window) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XUnmapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub from_configure: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XUnmapEvent"][::std::mem::size_of::<XUnmapEvent>() - 56usize];
    ["Alignment of XUnmapEvent"][::std::mem::align_of::<XUnmapEvent>() - 8usize];
    ["Offset of field: XUnmapEvent::type_"][::std::mem::offset_of!(XUnmapEvent, type_) - 0usize];
    ["Offset of field: XUnmapEvent::serial"][::std::mem::offset_of!(XUnmapEvent, serial) - 8usize];
    ["Offset of field: XUnmapEvent::send_event"]
        [::std::mem::offset_of!(XUnmapEvent, send_event) - 16usize];
    ["Offset of field: XUnmapEvent::display"]
        [::std::mem::offset_of!(XUnmapEvent, display) - 24usize];
    ["Offset of field: XUnmapEvent::event"][::std::mem::offset_of!(XUnmapEvent, event) - 32usize];
    ["Offset of field: XUnmapEvent::window"][::std::mem::offset_of!(XUnmapEvent, window) - 40usize];
    ["Offset of field: XUnmapEvent::from_configure"]
        [::std::mem::offset_of!(XUnmapEvent, from_configure) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMapEvent"][::std::mem::size_of::<XMapEvent>() - 56usize];
    ["Alignment of XMapEvent"][::std::mem::align_of::<XMapEvent>() - 8usize];
    ["Offset of field: XMapEvent::type_"][::std::mem::offset_of!(XMapEvent, type_) - 0usize];
    ["Offset of field: XMapEvent::serial"][::std::mem::offset_of!(XMapEvent, serial) - 8usize];
    ["Offset of field: XMapEvent::send_event"]
        [::std::mem::offset_of!(XMapEvent, send_event) - 16usize];
    ["Offset of field: XMapEvent::display"][::std::mem::offset_of!(XMapEvent, display) - 24usize];
    ["Offset of field: XMapEvent::event"][::std::mem::offset_of!(XMapEvent, event) - 32usize];
    ["Offset of field: XMapEvent::window"][::std::mem::offset_of!(XMapEvent, window) - 40usize];
    ["Offset of field: XMapEvent::override_redirect"]
        [::std::mem::offset_of!(XMapEvent, override_redirect) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMapRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMapRequestEvent"][::std::mem::size_of::<XMapRequestEvent>() - 48usize];
    ["Alignment of XMapRequestEvent"][::std::mem::align_of::<XMapRequestEvent>() - 8usize];
    ["Offset of field: XMapRequestEvent::type_"]
        [::std::mem::offset_of!(XMapRequestEvent, type_) - 0usize];
    ["Offset of field: XMapRequestEvent::serial"]
        [::std::mem::offset_of!(XMapRequestEvent, serial) - 8usize];
    ["Offset of field: XMapRequestEvent::send_event"]
        [::std::mem::offset_of!(XMapRequestEvent, send_event) - 16usize];
    ["Offset of field: XMapRequestEvent::display"]
        [::std::mem::offset_of!(XMapRequestEvent, display) - 24usize];
    ["Offset of field: XMapRequestEvent::parent"]
        [::std::mem::offset_of!(XMapRequestEvent, parent) - 32usize];
    ["Offset of field: XMapRequestEvent::window"]
        [::std::mem::offset_of!(XMapRequestEvent, window) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XReparentEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub parent: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XReparentEvent"][::std::mem::size_of::<XReparentEvent>() - 72usize];
    ["Alignment of XReparentEvent"][::std::mem::align_of::<XReparentEvent>() - 8usize];
    ["Offset of field: XReparentEvent::type_"]
        [::std::mem::offset_of!(XReparentEvent, type_) - 0usize];
    ["Offset of field: XReparentEvent::serial"]
        [::std::mem::offset_of!(XReparentEvent, serial) - 8usize];
    ["Offset of field: XReparentEvent::send_event"]
        [::std::mem::offset_of!(XReparentEvent, send_event) - 16usize];
    ["Offset of field: XReparentEvent::display"]
        [::std::mem::offset_of!(XReparentEvent, display) - 24usize];
    ["Offset of field: XReparentEvent::event"]
        [::std::mem::offset_of!(XReparentEvent, event) - 32usize];
    ["Offset of field: XReparentEvent::window"]
        [::std::mem::offset_of!(XReparentEvent, window) - 40usize];
    ["Offset of field: XReparentEvent::parent"]
        [::std::mem::offset_of!(XReparentEvent, parent) - 48usize];
    ["Offset of field: XReparentEvent::x"][::std::mem::offset_of!(XReparentEvent, x) - 56usize];
    ["Offset of field: XReparentEvent::y"][::std::mem::offset_of!(XReparentEvent, y) - 60usize];
    ["Offset of field: XReparentEvent::override_redirect"]
        [::std::mem::offset_of!(XReparentEvent, override_redirect) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XConfigureEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XConfigureEvent"][::std::mem::size_of::<XConfigureEvent>() - 88usize];
    ["Alignment of XConfigureEvent"][::std::mem::align_of::<XConfigureEvent>() - 8usize];
    ["Offset of field: XConfigureEvent::type_"]
        [::std::mem::offset_of!(XConfigureEvent, type_) - 0usize];
    ["Offset of field: XConfigureEvent::serial"]
        [::std::mem::offset_of!(XConfigureEvent, serial) - 8usize];
    ["Offset of field: XConfigureEvent::send_event"]
        [::std::mem::offset_of!(XConfigureEvent, send_event) - 16usize];
    ["Offset of field: XConfigureEvent::display"]
        [::std::mem::offset_of!(XConfigureEvent, display) - 24usize];
    ["Offset of field: XConfigureEvent::event"]
        [::std::mem::offset_of!(XConfigureEvent, event) - 32usize];
    ["Offset of field: XConfigureEvent::window"]
        [::std::mem::offset_of!(XConfigureEvent, window) - 40usize];
    ["Offset of field: XConfigureEvent::x"][::std::mem::offset_of!(XConfigureEvent, x) - 48usize];
    ["Offset of field: XConfigureEvent::y"][::std::mem::offset_of!(XConfigureEvent, y) - 52usize];
    ["Offset of field: XConfigureEvent::width"]
        [::std::mem::offset_of!(XConfigureEvent, width) - 56usize];
    ["Offset of field: XConfigureEvent::height"]
        [::std::mem::offset_of!(XConfigureEvent, height) - 60usize];
    ["Offset of field: XConfigureEvent::border_width"]
        [::std::mem::offset_of!(XConfigureEvent, border_width) - 64usize];
    ["Offset of field: XConfigureEvent::above"]
        [::std::mem::offset_of!(XConfigureEvent, above) - 72usize];
    ["Offset of field: XConfigureEvent::override_redirect"]
        [::std::mem::offset_of!(XConfigureEvent, override_redirect) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGravityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGravityEvent"][::std::mem::size_of::<XGravityEvent>() - 56usize];
    ["Alignment of XGravityEvent"][::std::mem::align_of::<XGravityEvent>() - 8usize];
    ["Offset of field: XGravityEvent::type_"]
        [::std::mem::offset_of!(XGravityEvent, type_) - 0usize];
    ["Offset of field: XGravityEvent::serial"]
        [::std::mem::offset_of!(XGravityEvent, serial) - 8usize];
    ["Offset of field: XGravityEvent::send_event"]
        [::std::mem::offset_of!(XGravityEvent, send_event) - 16usize];
    ["Offset of field: XGravityEvent::display"]
        [::std::mem::offset_of!(XGravityEvent, display) - 24usize];
    ["Offset of field: XGravityEvent::event"]
        [::std::mem::offset_of!(XGravityEvent, event) - 32usize];
    ["Offset of field: XGravityEvent::window"]
        [::std::mem::offset_of!(XGravityEvent, window) - 40usize];
    ["Offset of field: XGravityEvent::x"][::std::mem::offset_of!(XGravityEvent, x) - 48usize];
    ["Offset of field: XGravityEvent::y"][::std::mem::offset_of!(XGravityEvent, y) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XResizeRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XResizeRequestEvent"][::std::mem::size_of::<XResizeRequestEvent>() - 48usize];
    ["Alignment of XResizeRequestEvent"][::std::mem::align_of::<XResizeRequestEvent>() - 8usize];
    ["Offset of field: XResizeRequestEvent::type_"]
        [::std::mem::offset_of!(XResizeRequestEvent, type_) - 0usize];
    ["Offset of field: XResizeRequestEvent::serial"]
        [::std::mem::offset_of!(XResizeRequestEvent, serial) - 8usize];
    ["Offset of field: XResizeRequestEvent::send_event"]
        [::std::mem::offset_of!(XResizeRequestEvent, send_event) - 16usize];
    ["Offset of field: XResizeRequestEvent::display"]
        [::std::mem::offset_of!(XResizeRequestEvent, display) - 24usize];
    ["Offset of field: XResizeRequestEvent::window"]
        [::std::mem::offset_of!(XResizeRequestEvent, window) - 32usize];
    ["Offset of field: XResizeRequestEvent::width"]
        [::std::mem::offset_of!(XResizeRequestEvent, width) - 40usize];
    ["Offset of field: XResizeRequestEvent::height"]
        [::std::mem::offset_of!(XResizeRequestEvent, height) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XConfigureRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub detail: ::std::os::raw::c_int,
    pub value_mask: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XConfigureRequestEvent"][::std::mem::size_of::<XConfigureRequestEvent>() - 96usize];
    ["Alignment of XConfigureRequestEvent"]
        [::std::mem::align_of::<XConfigureRequestEvent>() - 8usize];
    ["Offset of field: XConfigureRequestEvent::type_"]
        [::std::mem::offset_of!(XConfigureRequestEvent, type_) - 0usize];
    ["Offset of field: XConfigureRequestEvent::serial"]
        [::std::mem::offset_of!(XConfigureRequestEvent, serial) - 8usize];
    ["Offset of field: XConfigureRequestEvent::send_event"]
        [::std::mem::offset_of!(XConfigureRequestEvent, send_event) - 16usize];
    ["Offset of field: XConfigureRequestEvent::display"]
        [::std::mem::offset_of!(XConfigureRequestEvent, display) - 24usize];
    ["Offset of field: XConfigureRequestEvent::parent"]
        [::std::mem::offset_of!(XConfigureRequestEvent, parent) - 32usize];
    ["Offset of field: XConfigureRequestEvent::window"]
        [::std::mem::offset_of!(XConfigureRequestEvent, window) - 40usize];
    ["Offset of field: XConfigureRequestEvent::x"]
        [::std::mem::offset_of!(XConfigureRequestEvent, x) - 48usize];
    ["Offset of field: XConfigureRequestEvent::y"]
        [::std::mem::offset_of!(XConfigureRequestEvent, y) - 52usize];
    ["Offset of field: XConfigureRequestEvent::width"]
        [::std::mem::offset_of!(XConfigureRequestEvent, width) - 56usize];
    ["Offset of field: XConfigureRequestEvent::height"]
        [::std::mem::offset_of!(XConfigureRequestEvent, height) - 60usize];
    ["Offset of field: XConfigureRequestEvent::border_width"]
        [::std::mem::offset_of!(XConfigureRequestEvent, border_width) - 64usize];
    ["Offset of field: XConfigureRequestEvent::above"]
        [::std::mem::offset_of!(XConfigureRequestEvent, above) - 72usize];
    ["Offset of field: XConfigureRequestEvent::detail"]
        [::std::mem::offset_of!(XConfigureRequestEvent, detail) - 80usize];
    ["Offset of field: XConfigureRequestEvent::value_mask"]
        [::std::mem::offset_of!(XConfigureRequestEvent, value_mask) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCirculateEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCirculateEvent"][::std::mem::size_of::<XCirculateEvent>() - 56usize];
    ["Alignment of XCirculateEvent"][::std::mem::align_of::<XCirculateEvent>() - 8usize];
    ["Offset of field: XCirculateEvent::type_"]
        [::std::mem::offset_of!(XCirculateEvent, type_) - 0usize];
    ["Offset of field: XCirculateEvent::serial"]
        [::std::mem::offset_of!(XCirculateEvent, serial) - 8usize];
    ["Offset of field: XCirculateEvent::send_event"]
        [::std::mem::offset_of!(XCirculateEvent, send_event) - 16usize];
    ["Offset of field: XCirculateEvent::display"]
        [::std::mem::offset_of!(XCirculateEvent, display) - 24usize];
    ["Offset of field: XCirculateEvent::event"]
        [::std::mem::offset_of!(XCirculateEvent, event) - 32usize];
    ["Offset of field: XCirculateEvent::window"]
        [::std::mem::offset_of!(XCirculateEvent, window) - 40usize];
    ["Offset of field: XCirculateEvent::place"]
        [::std::mem::offset_of!(XCirculateEvent, place) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCirculateRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCirculateRequestEvent"][::std::mem::size_of::<XCirculateRequestEvent>() - 56usize];
    ["Alignment of XCirculateRequestEvent"]
        [::std::mem::align_of::<XCirculateRequestEvent>() - 8usize];
    ["Offset of field: XCirculateRequestEvent::type_"]
        [::std::mem::offset_of!(XCirculateRequestEvent, type_) - 0usize];
    ["Offset of field: XCirculateRequestEvent::serial"]
        [::std::mem::offset_of!(XCirculateRequestEvent, serial) - 8usize];
    ["Offset of field: XCirculateRequestEvent::send_event"]
        [::std::mem::offset_of!(XCirculateRequestEvent, send_event) - 16usize];
    ["Offset of field: XCirculateRequestEvent::display"]
        [::std::mem::offset_of!(XCirculateRequestEvent, display) - 24usize];
    ["Offset of field: XCirculateRequestEvent::parent"]
        [::std::mem::offset_of!(XCirculateRequestEvent, parent) - 32usize];
    ["Offset of field: XCirculateRequestEvent::window"]
        [::std::mem::offset_of!(XCirculateRequestEvent, window) - 40usize];
    ["Offset of field: XCirculateRequestEvent::place"]
        [::std::mem::offset_of!(XCirculateRequestEvent, place) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPropertyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub atom: Atom,
    pub time: Time,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPropertyEvent"][::std::mem::size_of::<XPropertyEvent>() - 64usize];
    ["Alignment of XPropertyEvent"][::std::mem::align_of::<XPropertyEvent>() - 8usize];
    ["Offset of field: XPropertyEvent::type_"]
        [::std::mem::offset_of!(XPropertyEvent, type_) - 0usize];
    ["Offset of field: XPropertyEvent::serial"]
        [::std::mem::offset_of!(XPropertyEvent, serial) - 8usize];
    ["Offset of field: XPropertyEvent::send_event"]
        [::std::mem::offset_of!(XPropertyEvent, send_event) - 16usize];
    ["Offset of field: XPropertyEvent::display"]
        [::std::mem::offset_of!(XPropertyEvent, display) - 24usize];
    ["Offset of field: XPropertyEvent::window"]
        [::std::mem::offset_of!(XPropertyEvent, window) - 32usize];
    ["Offset of field: XPropertyEvent::atom"]
        [::std::mem::offset_of!(XPropertyEvent, atom) - 40usize];
    ["Offset of field: XPropertyEvent::time"]
        [::std::mem::offset_of!(XPropertyEvent, time) - 48usize];
    ["Offset of field: XPropertyEvent::state"]
        [::std::mem::offset_of!(XPropertyEvent, state) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionClearEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub selection: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionClearEvent"][::std::mem::size_of::<XSelectionClearEvent>() - 56usize];
    ["Alignment of XSelectionClearEvent"][::std::mem::align_of::<XSelectionClearEvent>() - 8usize];
    ["Offset of field: XSelectionClearEvent::type_"]
        [::std::mem::offset_of!(XSelectionClearEvent, type_) - 0usize];
    ["Offset of field: XSelectionClearEvent::serial"]
        [::std::mem::offset_of!(XSelectionClearEvent, serial) - 8usize];
    ["Offset of field: XSelectionClearEvent::send_event"]
        [::std::mem::offset_of!(XSelectionClearEvent, send_event) - 16usize];
    ["Offset of field: XSelectionClearEvent::display"]
        [::std::mem::offset_of!(XSelectionClearEvent, display) - 24usize];
    ["Offset of field: XSelectionClearEvent::window"]
        [::std::mem::offset_of!(XSelectionClearEvent, window) - 32usize];
    ["Offset of field: XSelectionClearEvent::selection"]
        [::std::mem::offset_of!(XSelectionClearEvent, selection) - 40usize];
    ["Offset of field: XSelectionClearEvent::time"]
        [::std::mem::offset_of!(XSelectionClearEvent, time) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub owner: Window,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionRequestEvent"][::std::mem::size_of::<XSelectionRequestEvent>() - 80usize];
    ["Alignment of XSelectionRequestEvent"]
        [::std::mem::align_of::<XSelectionRequestEvent>() - 8usize];
    ["Offset of field: XSelectionRequestEvent::type_"]
        [::std::mem::offset_of!(XSelectionRequestEvent, type_) - 0usize];
    ["Offset of field: XSelectionRequestEvent::serial"]
        [::std::mem::offset_of!(XSelectionRequestEvent, serial) - 8usize];
    ["Offset of field: XSelectionRequestEvent::send_event"]
        [::std::mem::offset_of!(XSelectionRequestEvent, send_event) - 16usize];
    ["Offset of field: XSelectionRequestEvent::display"]
        [::std::mem::offset_of!(XSelectionRequestEvent, display) - 24usize];
    ["Offset of field: XSelectionRequestEvent::owner"]
        [::std::mem::offset_of!(XSelectionRequestEvent, owner) - 32usize];
    ["Offset of field: XSelectionRequestEvent::requestor"]
        [::std::mem::offset_of!(XSelectionRequestEvent, requestor) - 40usize];
    ["Offset of field: XSelectionRequestEvent::selection"]
        [::std::mem::offset_of!(XSelectionRequestEvent, selection) - 48usize];
    ["Offset of field: XSelectionRequestEvent::target"]
        [::std::mem::offset_of!(XSelectionRequestEvent, target) - 56usize];
    ["Offset of field: XSelectionRequestEvent::property"]
        [::std::mem::offset_of!(XSelectionRequestEvent, property) - 64usize];
    ["Offset of field: XSelectionRequestEvent::time"]
        [::std::mem::offset_of!(XSelectionRequestEvent, time) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionEvent"][::std::mem::size_of::<XSelectionEvent>() - 72usize];
    ["Alignment of XSelectionEvent"][::std::mem::align_of::<XSelectionEvent>() - 8usize];
    ["Offset of field: XSelectionEvent::type_"]
        [::std::mem::offset_of!(XSelectionEvent, type_) - 0usize];
    ["Offset of field: XSelectionEvent::serial"]
        [::std::mem::offset_of!(XSelectionEvent, serial) - 8usize];
    ["Offset of field: XSelectionEvent::send_event"]
        [::std::mem::offset_of!(XSelectionEvent, send_event) - 16usize];
    ["Offset of field: XSelectionEvent::display"]
        [::std::mem::offset_of!(XSelectionEvent, display) - 24usize];
    ["Offset of field: XSelectionEvent::requestor"]
        [::std::mem::offset_of!(XSelectionEvent, requestor) - 32usize];
    ["Offset of field: XSelectionEvent::selection"]
        [::std::mem::offset_of!(XSelectionEvent, selection) - 40usize];
    ["Offset of field: XSelectionEvent::target"]
        [::std::mem::offset_of!(XSelectionEvent, target) - 48usize];
    ["Offset of field: XSelectionEvent::property"]
        [::std::mem::offset_of!(XSelectionEvent, property) - 56usize];
    ["Offset of field: XSelectionEvent::time"]
        [::std::mem::offset_of!(XSelectionEvent, time) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XColormapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub colormap: Colormap,
    pub new: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XColormapEvent"][::std::mem::size_of::<XColormapEvent>() - 56usize];
    ["Alignment of XColormapEvent"][::std::mem::align_of::<XColormapEvent>() - 8usize];
    ["Offset of field: XColormapEvent::type_"]
        [::std::mem::offset_of!(XColormapEvent, type_) - 0usize];
    ["Offset of field: XColormapEvent::serial"]
        [::std::mem::offset_of!(XColormapEvent, serial) - 8usize];
    ["Offset of field: XColormapEvent::send_event"]
        [::std::mem::offset_of!(XColormapEvent, send_event) - 16usize];
    ["Offset of field: XColormapEvent::display"]
        [::std::mem::offset_of!(XColormapEvent, display) - 24usize];
    ["Offset of field: XColormapEvent::window"]
        [::std::mem::offset_of!(XColormapEvent, window) - 32usize];
    ["Offset of field: XColormapEvent::colormap"]
        [::std::mem::offset_of!(XColormapEvent, colormap) - 40usize];
    ["Offset of field: XColormapEvent::new"][::std::mem::offset_of!(XColormapEvent, new) - 48usize];
    ["Offset of field: XColormapEvent::state"]
        [::std::mem::offset_of!(XColormapEvent, state) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XClientMessageEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub message_type: Atom,
    pub format: ::std::os::raw::c_int,
    pub data: XClientMessageEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XClientMessageEvent__bindgen_ty_1 {
    pub b: [::std::os::raw::c_char; 20usize],
    pub s: [::std::os::raw::c_short; 10usize],
    pub l: [::std::os::raw::c_long; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClientMessageEvent__bindgen_ty_1"]
        [::std::mem::size_of::<XClientMessageEvent__bindgen_ty_1>() - 40usize];
    ["Alignment of XClientMessageEvent__bindgen_ty_1"]
        [::std::mem::align_of::<XClientMessageEvent__bindgen_ty_1>() - 8usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::b"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, b) - 0usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::s"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, s) - 0usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::l"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, l) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClientMessageEvent"][::std::mem::size_of::<XClientMessageEvent>() - 96usize];
    ["Alignment of XClientMessageEvent"][::std::mem::align_of::<XClientMessageEvent>() - 8usize];
    ["Offset of field: XClientMessageEvent::type_"]
        [::std::mem::offset_of!(XClientMessageEvent, type_) - 0usize];
    ["Offset of field: XClientMessageEvent::serial"]
        [::std::mem::offset_of!(XClientMessageEvent, serial) - 8usize];
    ["Offset of field: XClientMessageEvent::send_event"]
        [::std::mem::offset_of!(XClientMessageEvent, send_event) - 16usize];
    ["Offset of field: XClientMessageEvent::display"]
        [::std::mem::offset_of!(XClientMessageEvent, display) - 24usize];
    ["Offset of field: XClientMessageEvent::window"]
        [::std::mem::offset_of!(XClientMessageEvent, window) - 32usize];
    ["Offset of field: XClientMessageEvent::message_type"]
        [::std::mem::offset_of!(XClientMessageEvent, message_type) - 40usize];
    ["Offset of field: XClientMessageEvent::format"]
        [::std::mem::offset_of!(XClientMessageEvent, format) - 48usize];
    ["Offset of field: XClientMessageEvent::data"]
        [::std::mem::offset_of!(XClientMessageEvent, data) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMappingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub request: ::std::os::raw::c_int,
    pub first_keycode: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMappingEvent"][::std::mem::size_of::<XMappingEvent>() - 56usize];
    ["Alignment of XMappingEvent"][::std::mem::align_of::<XMappingEvent>() - 8usize];
    ["Offset of field: XMappingEvent::type_"]
        [::std::mem::offset_of!(XMappingEvent, type_) - 0usize];
    ["Offset of field: XMappingEvent::serial"]
        [::std::mem::offset_of!(XMappingEvent, serial) - 8usize];
    ["Offset of field: XMappingEvent::send_event"]
        [::std::mem::offset_of!(XMappingEvent, send_event) - 16usize];
    ["Offset of field: XMappingEvent::display"]
        [::std::mem::offset_of!(XMappingEvent, display) - 24usize];
    ["Offset of field: XMappingEvent::window"]
        [::std::mem::offset_of!(XMappingEvent, window) - 32usize];
    ["Offset of field: XMappingEvent::request"]
        [::std::mem::offset_of!(XMappingEvent, request) - 40usize];
    ["Offset of field: XMappingEvent::first_keycode"]
        [::std::mem::offset_of!(XMappingEvent, first_keycode) - 44usize];
    ["Offset of field: XMappingEvent::count"]
        [::std::mem::offset_of!(XMappingEvent, count) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XErrorEvent {
    pub type_: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub resourceid: XID,
    pub serial: ::std::os::raw::c_ulong,
    pub error_code: ::std::os::raw::c_uchar,
    pub request_code: ::std::os::raw::c_uchar,
    pub minor_code: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XErrorEvent"][::std::mem::size_of::<XErrorEvent>() - 40usize];
    ["Alignment of XErrorEvent"][::std::mem::align_of::<XErrorEvent>() - 8usize];
    ["Offset of field: XErrorEvent::type_"][::std::mem::offset_of!(XErrorEvent, type_) - 0usize];
    ["Offset of field: XErrorEvent::display"]
        [::std::mem::offset_of!(XErrorEvent, display) - 8usize];
    ["Offset of field: XErrorEvent::resourceid"]
        [::std::mem::offset_of!(XErrorEvent, resourceid) - 16usize];
    ["Offset of field: XErrorEvent::serial"][::std::mem::offset_of!(XErrorEvent, serial) - 24usize];
    ["Offset of field: XErrorEvent::error_code"]
        [::std::mem::offset_of!(XErrorEvent, error_code) - 32usize];
    ["Offset of field: XErrorEvent::request_code"]
        [::std::mem::offset_of!(XErrorEvent, request_code) - 33usize];
    ["Offset of field: XErrorEvent::minor_code"]
        [::std::mem::offset_of!(XErrorEvent, minor_code) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XAnyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XAnyEvent"][::std::mem::size_of::<XAnyEvent>() - 40usize];
    ["Alignment of XAnyEvent"][::std::mem::align_of::<XAnyEvent>() - 8usize];
    ["Offset of field: XAnyEvent::type_"][::std::mem::offset_of!(XAnyEvent, type_) - 0usize];
    ["Offset of field: XAnyEvent::serial"][::std::mem::offset_of!(XAnyEvent, serial) - 8usize];
    ["Offset of field: XAnyEvent::send_event"]
        [::std::mem::offset_of!(XAnyEvent, send_event) - 16usize];
    ["Offset of field: XAnyEvent::display"][::std::mem::offset_of!(XAnyEvent, display) - 24usize];
    ["Offset of field: XAnyEvent::window"][::std::mem::offset_of!(XAnyEvent, window) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGenericEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGenericEvent"][::std::mem::size_of::<XGenericEvent>() - 40usize];
    ["Alignment of XGenericEvent"][::std::mem::align_of::<XGenericEvent>() - 8usize];
    ["Offset of field: XGenericEvent::type_"]
        [::std::mem::offset_of!(XGenericEvent, type_) - 0usize];
    ["Offset of field: XGenericEvent::serial"]
        [::std::mem::offset_of!(XGenericEvent, serial) - 8usize];
    ["Offset of field: XGenericEvent::send_event"]
        [::std::mem::offset_of!(XGenericEvent, send_event) - 16usize];
    ["Offset of field: XGenericEvent::display"]
        [::std::mem::offset_of!(XGenericEvent, display) - 24usize];
    ["Offset of field: XGenericEvent::extension"]
        [::std::mem::offset_of!(XGenericEvent, extension) - 32usize];
    ["Offset of field: XGenericEvent::evtype"]
        [::std::mem::offset_of!(XGenericEvent, evtype) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGenericEventCookie {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
    pub cookie: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGenericEventCookie"][::std::mem::size_of::<XGenericEventCookie>() - 56usize];
    ["Alignment of XGenericEventCookie"][::std::mem::align_of::<XGenericEventCookie>() - 8usize];
    ["Offset of field: XGenericEventCookie::type_"]
        [::std::mem::offset_of!(XGenericEventCookie, type_) - 0usize];
    ["Offset of field: XGenericEventCookie::serial"]
        [::std::mem::offset_of!(XGenericEventCookie, serial) - 8usize];
    ["Offset of field: XGenericEventCookie::send_event"]
        [::std::mem::offset_of!(XGenericEventCookie, send_event) - 16usize];
    ["Offset of field: XGenericEventCookie::display"]
        [::std::mem::offset_of!(XGenericEventCookie, display) - 24usize];
    ["Offset of field: XGenericEventCookie::extension"]
        [::std::mem::offset_of!(XGenericEventCookie, extension) - 32usize];
    ["Offset of field: XGenericEventCookie::evtype"]
        [::std::mem::offset_of!(XGenericEventCookie, evtype) - 36usize];
    ["Offset of field: XGenericEventCookie::cookie"]
        [::std::mem::offset_of!(XGenericEventCookie, cookie) - 40usize];
    ["Offset of field: XGenericEventCookie::data"]
        [::std::mem::offset_of!(XGenericEventCookie, data) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XEvent {
    pub type_: ::std::os::raw::c_int,
    pub xany: XAnyEvent,
    pub xkey: XKeyEvent,
    pub xbutton: XButtonEvent,
    pub xmotion: XMotionEvent,
    pub xcrossing: XCrossingEvent,
    pub xfocus: XFocusChangeEvent,
    pub xexpose: XExposeEvent,
    pub xgraphicsexpose: XGraphicsExposeEvent,
    pub xnoexpose: XNoExposeEvent,
    pub xvisibility: XVisibilityEvent,
    pub xcreatewindow: XCreateWindowEvent,
    pub xdestroywindow: XDestroyWindowEvent,
    pub xunmap: XUnmapEvent,
    pub xmap: XMapEvent,
    pub xmaprequest: XMapRequestEvent,
    pub xreparent: XReparentEvent,
    pub xconfigure: XConfigureEvent,
    pub xgravity: XGravityEvent,
    pub xresizerequest: XResizeRequestEvent,
    pub xconfigurerequest: XConfigureRequestEvent,
    pub xcirculate: XCirculateEvent,
    pub xcirculaterequest: XCirculateRequestEvent,
    pub xproperty: XPropertyEvent,
    pub xselectionclear: XSelectionClearEvent,
    pub xselectionrequest: XSelectionRequestEvent,
    pub xselection: XSelectionEvent,
    pub xcolormap: XColormapEvent,
    pub xclient: XClientMessageEvent,
    pub xmapping: XMappingEvent,
    pub xerror: XErrorEvent,
    pub xkeymap: XKeymapEvent,
    pub xgeneric: XGenericEvent,
    pub xcookie: XGenericEventCookie,
    pub pad: [::std::os::raw::c_long; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XEvent"][::std::mem::size_of::<_XEvent>() - 192usize];
    ["Alignment of _XEvent"][::std::mem::align_of::<_XEvent>() - 8usize];
    ["Offset of field: _XEvent::type_"][::std::mem::offset_of!(_XEvent, type_) - 0usize];
    ["Offset of field: _XEvent::xany"][::std::mem::offset_of!(_XEvent, xany) - 0usize];
    ["Offset of field: _XEvent::xkey"][::std::mem::offset_of!(_XEvent, xkey) - 0usize];
    ["Offset of field: _XEvent::xbutton"][::std::mem::offset_of!(_XEvent, xbutton) - 0usize];
    ["Offset of field: _XEvent::xmotion"][::std::mem::offset_of!(_XEvent, xmotion) - 0usize];
    ["Offset of field: _XEvent::xcrossing"][::std::mem::offset_of!(_XEvent, xcrossing) - 0usize];
    ["Offset of field: _XEvent::xfocus"][::std::mem::offset_of!(_XEvent, xfocus) - 0usize];
    ["Offset of field: _XEvent::xexpose"][::std::mem::offset_of!(_XEvent, xexpose) - 0usize];
    ["Offset of field: _XEvent::xgraphicsexpose"]
        [::std::mem::offset_of!(_XEvent, xgraphicsexpose) - 0usize];
    ["Offset of field: _XEvent::xnoexpose"][::std::mem::offset_of!(_XEvent, xnoexpose) - 0usize];
    ["Offset of field: _XEvent::xvisibility"]
        [::std::mem::offset_of!(_XEvent, xvisibility) - 0usize];
    ["Offset of field: _XEvent::xcreatewindow"]
        [::std::mem::offset_of!(_XEvent, xcreatewindow) - 0usize];
    ["Offset of field: _XEvent::xdestroywindow"]
        [::std::mem::offset_of!(_XEvent, xdestroywindow) - 0usize];
    ["Offset of field: _XEvent::xunmap"][::std::mem::offset_of!(_XEvent, xunmap) - 0usize];
    ["Offset of field: _XEvent::xmap"][::std::mem::offset_of!(_XEvent, xmap) - 0usize];
    ["Offset of field: _XEvent::xmaprequest"]
        [::std::mem::offset_of!(_XEvent, xmaprequest) - 0usize];
    ["Offset of field: _XEvent::xreparent"][::std::mem::offset_of!(_XEvent, xreparent) - 0usize];
    ["Offset of field: _XEvent::xconfigure"][::std::mem::offset_of!(_XEvent, xconfigure) - 0usize];
    ["Offset of field: _XEvent::xgravity"][::std::mem::offset_of!(_XEvent, xgravity) - 0usize];
    ["Offset of field: _XEvent::xresizerequest"]
        [::std::mem::offset_of!(_XEvent, xresizerequest) - 0usize];
    ["Offset of field: _XEvent::xconfigurerequest"]
        [::std::mem::offset_of!(_XEvent, xconfigurerequest) - 0usize];
    ["Offset of field: _XEvent::xcirculate"][::std::mem::offset_of!(_XEvent, xcirculate) - 0usize];
    ["Offset of field: _XEvent::xcirculaterequest"]
        [::std::mem::offset_of!(_XEvent, xcirculaterequest) - 0usize];
    ["Offset of field: _XEvent::xproperty"][::std::mem::offset_of!(_XEvent, xproperty) - 0usize];
    ["Offset of field: _XEvent::xselectionclear"]
        [::std::mem::offset_of!(_XEvent, xselectionclear) - 0usize];
    ["Offset of field: _XEvent::xselectionrequest"]
        [::std::mem::offset_of!(_XEvent, xselectionrequest) - 0usize];
    ["Offset of field: _XEvent::xselection"][::std::mem::offset_of!(_XEvent, xselection) - 0usize];
    ["Offset of field: _XEvent::xcolormap"][::std::mem::offset_of!(_XEvent, xcolormap) - 0usize];
    ["Offset of field: _XEvent::xclient"][::std::mem::offset_of!(_XEvent, xclient) - 0usize];
    ["Offset of field: _XEvent::xmapping"][::std::mem::offset_of!(_XEvent, xmapping) - 0usize];
    ["Offset of field: _XEvent::xerror"][::std::mem::offset_of!(_XEvent, xerror) - 0usize];
    ["Offset of field: _XEvent::xkeymap"][::std::mem::offset_of!(_XEvent, xkeymap) - 0usize];
    ["Offset of field: _XEvent::xgeneric"][::std::mem::offset_of!(_XEvent, xgeneric) - 0usize];
    ["Offset of field: _XEvent::xcookie"][::std::mem::offset_of!(_XEvent, xcookie) - 0usize];
    ["Offset of field: _XEvent::pad"][::std::mem::offset_of!(_XEvent, pad) - 0usize];
};
pub type XEvent = _XEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCharStruct {
    pub lbearing: ::std::os::raw::c_short,
    pub rbearing: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_short,
    pub ascent: ::std::os::raw::c_short,
    pub descent: ::std::os::raw::c_short,
    pub attributes: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCharStruct"][::std::mem::size_of::<XCharStruct>() - 12usize];
    ["Alignment of XCharStruct"][::std::mem::align_of::<XCharStruct>() - 2usize];
    ["Offset of field: XCharStruct::lbearing"]
        [::std::mem::offset_of!(XCharStruct, lbearing) - 0usize];
    ["Offset of field: XCharStruct::rbearing"]
        [::std::mem::offset_of!(XCharStruct, rbearing) - 2usize];
    ["Offset of field: XCharStruct::width"][::std::mem::offset_of!(XCharStruct, width) - 4usize];
    ["Offset of field: XCharStruct::ascent"][::std::mem::offset_of!(XCharStruct, ascent) - 6usize];
    ["Offset of field: XCharStruct::descent"]
        [::std::mem::offset_of!(XCharStruct, descent) - 8usize];
    ["Offset of field: XCharStruct::attributes"]
        [::std::mem::offset_of!(XCharStruct, attributes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontProp {
    pub name: Atom,
    pub card32: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontProp"][::std::mem::size_of::<XFontProp>() - 16usize];
    ["Alignment of XFontProp"][::std::mem::align_of::<XFontProp>() - 8usize];
    ["Offset of field: XFontProp::name"][::std::mem::offset_of!(XFontProp, name) - 0usize];
    ["Offset of field: XFontProp::card32"][::std::mem::offset_of!(XFontProp, card32) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontStruct {
    pub ext_data: *mut XExtData,
    pub fid: Font,
    pub direction: ::std::os::raw::c_uint,
    pub min_char_or_byte2: ::std::os::raw::c_uint,
    pub max_char_or_byte2: ::std::os::raw::c_uint,
    pub min_byte1: ::std::os::raw::c_uint,
    pub max_byte1: ::std::os::raw::c_uint,
    pub all_chars_exist: ::std::os::raw::c_int,
    pub default_char: ::std::os::raw::c_uint,
    pub n_properties: ::std::os::raw::c_int,
    pub properties: *mut XFontProp,
    pub min_bounds: XCharStruct,
    pub max_bounds: XCharStruct,
    pub per_char: *mut XCharStruct,
    pub ascent: ::std::os::raw::c_int,
    pub descent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontStruct"][::std::mem::size_of::<XFontStruct>() - 96usize];
    ["Alignment of XFontStruct"][::std::mem::align_of::<XFontStruct>() - 8usize];
    ["Offset of field: XFontStruct::ext_data"]
        [::std::mem::offset_of!(XFontStruct, ext_data) - 0usize];
    ["Offset of field: XFontStruct::fid"][::std::mem::offset_of!(XFontStruct, fid) - 8usize];
    ["Offset of field: XFontStruct::direction"]
        [::std::mem::offset_of!(XFontStruct, direction) - 16usize];
    ["Offset of field: XFontStruct::min_char_or_byte2"]
        [::std::mem::offset_of!(XFontStruct, min_char_or_byte2) - 20usize];
    ["Offset of field: XFontStruct::max_char_or_byte2"]
        [::std::mem::offset_of!(XFontStruct, max_char_or_byte2) - 24usize];
    ["Offset of field: XFontStruct::min_byte1"]
        [::std::mem::offset_of!(XFontStruct, min_byte1) - 28usize];
    ["Offset of field: XFontStruct::max_byte1"]
        [::std::mem::offset_of!(XFontStruct, max_byte1) - 32usize];
    ["Offset of field: XFontStruct::all_chars_exist"]
        [::std::mem::offset_of!(XFontStruct, all_chars_exist) - 36usize];
    ["Offset of field: XFontStruct::default_char"]
        [::std::mem::offset_of!(XFontStruct, default_char) - 40usize];
    ["Offset of field: XFontStruct::n_properties"]
        [::std::mem::offset_of!(XFontStruct, n_properties) - 44usize];
    ["Offset of field: XFontStruct::properties"]
        [::std::mem::offset_of!(XFontStruct, properties) - 48usize];
    ["Offset of field: XFontStruct::min_bounds"]
        [::std::mem::offset_of!(XFontStruct, min_bounds) - 56usize];
    ["Offset of field: XFontStruct::max_bounds"]
        [::std::mem::offset_of!(XFontStruct, max_bounds) - 68usize];
    ["Offset of field: XFontStruct::per_char"]
        [::std::mem::offset_of!(XFontStruct, per_char) - 80usize];
    ["Offset of field: XFontStruct::ascent"][::std::mem::offset_of!(XFontStruct, ascent) - 88usize];
    ["Offset of field: XFontStruct::descent"]
        [::std::mem::offset_of!(XFontStruct, descent) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextItem {
    pub chars: *mut ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font: Font,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextItem"][::std::mem::size_of::<XTextItem>() - 24usize];
    ["Alignment of XTextItem"][::std::mem::align_of::<XTextItem>() - 8usize];
    ["Offset of field: XTextItem::chars"][::std::mem::offset_of!(XTextItem, chars) - 0usize];
    ["Offset of field: XTextItem::nchars"][::std::mem::offset_of!(XTextItem, nchars) - 8usize];
    ["Offset of field: XTextItem::delta"][::std::mem::offset_of!(XTextItem, delta) - 12usize];
    ["Offset of field: XTextItem::font"][::std::mem::offset_of!(XTextItem, font) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XChar2b {
    pub byte1: ::std::os::raw::c_uchar,
    pub byte2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XChar2b"][::std::mem::size_of::<XChar2b>() - 2usize];
    ["Alignment of XChar2b"][::std::mem::align_of::<XChar2b>() - 1usize];
    ["Offset of field: XChar2b::byte1"][::std::mem::offset_of!(XChar2b, byte1) - 0usize];
    ["Offset of field: XChar2b::byte2"][::std::mem::offset_of!(XChar2b, byte2) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextItem16 {
    pub chars: *mut XChar2b,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font: Font,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextItem16"][::std::mem::size_of::<XTextItem16>() - 24usize];
    ["Alignment of XTextItem16"][::std::mem::align_of::<XTextItem16>() - 8usize];
    ["Offset of field: XTextItem16::chars"][::std::mem::offset_of!(XTextItem16, chars) - 0usize];
    ["Offset of field: XTextItem16::nchars"][::std::mem::offset_of!(XTextItem16, nchars) - 8usize];
    ["Offset of field: XTextItem16::delta"][::std::mem::offset_of!(XTextItem16, delta) - 12usize];
    ["Offset of field: XTextItem16::font"][::std::mem::offset_of!(XTextItem16, font) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union XEDataObject {
    pub display: *mut Display,
    pub gc: GC,
    pub visual: *mut Visual,
    pub screen: *mut Screen,
    pub pixmap_format: *mut ScreenFormat,
    pub font: *mut XFontStruct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XEDataObject"][::std::mem::size_of::<XEDataObject>() - 8usize];
    ["Alignment of XEDataObject"][::std::mem::align_of::<XEDataObject>() - 8usize];
    ["Offset of field: XEDataObject::display"]
        [::std::mem::offset_of!(XEDataObject, display) - 0usize];
    ["Offset of field: XEDataObject::gc"][::std::mem::offset_of!(XEDataObject, gc) - 0usize];
    ["Offset of field: XEDataObject::visual"]
        [::std::mem::offset_of!(XEDataObject, visual) - 0usize];
    ["Offset of field: XEDataObject::screen"]
        [::std::mem::offset_of!(XEDataObject, screen) - 0usize];
    ["Offset of field: XEDataObject::pixmap_format"]
        [::std::mem::offset_of!(XEDataObject, pixmap_format) - 0usize];
    ["Offset of field: XEDataObject::font"][::std::mem::offset_of!(XEDataObject, font) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontSetExtents {
    pub max_ink_extent: XRectangle,
    pub max_logical_extent: XRectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontSetExtents"][::std::mem::size_of::<XFontSetExtents>() - 16usize];
    ["Alignment of XFontSetExtents"][::std::mem::align_of::<XFontSetExtents>() - 2usize];
    ["Offset of field: XFontSetExtents::max_ink_extent"]
        [::std::mem::offset_of!(XFontSetExtents, max_ink_extent) - 0usize];
    ["Offset of field: XFontSetExtents::max_logical_extent"]
        [::std::mem::offset_of!(XFontSetExtents, max_logical_extent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XOM {
    _unused: [u8; 0],
}
pub type XOM = *mut _XOM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XOC {
    _unused: [u8; 0],
}
pub type XOC = *mut _XOC;
pub type XFontSet = *mut _XOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XmbTextItem {
    pub chars: *mut ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font_set: XFontSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XmbTextItem"][::std::mem::size_of::<XmbTextItem>() - 24usize];
    ["Alignment of XmbTextItem"][::std::mem::align_of::<XmbTextItem>() - 8usize];
    ["Offset of field: XmbTextItem::chars"][::std::mem::offset_of!(XmbTextItem, chars) - 0usize];
    ["Offset of field: XmbTextItem::nchars"][::std::mem::offset_of!(XmbTextItem, nchars) - 8usize];
    ["Offset of field: XmbTextItem::delta"][::std::mem::offset_of!(XmbTextItem, delta) - 12usize];
    ["Offset of field: XmbTextItem::font_set"]
        [::std::mem::offset_of!(XmbTextItem, font_set) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XwcTextItem {
    pub chars: *mut wchar_t,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font_set: XFontSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XwcTextItem"][::std::mem::size_of::<XwcTextItem>() - 24usize];
    ["Alignment of XwcTextItem"][::std::mem::align_of::<XwcTextItem>() - 8usize];
    ["Offset of field: XwcTextItem::chars"][::std::mem::offset_of!(XwcTextItem, chars) - 0usize];
    ["Offset of field: XwcTextItem::nchars"][::std::mem::offset_of!(XwcTextItem, nchars) - 8usize];
    ["Offset of field: XwcTextItem::delta"][::std::mem::offset_of!(XwcTextItem, delta) - 12usize];
    ["Offset of field: XwcTextItem::font_set"]
        [::std::mem::offset_of!(XwcTextItem, font_set) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMCharSetList {
    pub charset_count: ::std::os::raw::c_int,
    pub charset_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMCharSetList"][::std::mem::size_of::<XOMCharSetList>() - 16usize];
    ["Alignment of XOMCharSetList"][::std::mem::align_of::<XOMCharSetList>() - 8usize];
    ["Offset of field: XOMCharSetList::charset_count"]
        [::std::mem::offset_of!(XOMCharSetList, charset_count) - 0usize];
    ["Offset of field: XOMCharSetList::charset_list"]
        [::std::mem::offset_of!(XOMCharSetList, charset_list) - 8usize];
};
pub const XOrientation_XOMOrientation_LTR_TTB: XOrientation = 0;
pub const XOrientation_XOMOrientation_RTL_TTB: XOrientation = 1;
pub const XOrientation_XOMOrientation_TTB_LTR: XOrientation = 2;
pub const XOrientation_XOMOrientation_TTB_RTL: XOrientation = 3;
pub const XOrientation_XOMOrientation_Context: XOrientation = 4;
pub type XOrientation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMOrientation {
    pub num_orientation: ::std::os::raw::c_int,
    pub orientation: *mut XOrientation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMOrientation"][::std::mem::size_of::<XOMOrientation>() - 16usize];
    ["Alignment of XOMOrientation"][::std::mem::align_of::<XOMOrientation>() - 8usize];
    ["Offset of field: XOMOrientation::num_orientation"]
        [::std::mem::offset_of!(XOMOrientation, num_orientation) - 0usize];
    ["Offset of field: XOMOrientation::orientation"]
        [::std::mem::offset_of!(XOMOrientation, orientation) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMFontInfo {
    pub num_font: ::std::os::raw::c_int,
    pub font_struct_list: *mut *mut XFontStruct,
    pub font_name_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMFontInfo"][::std::mem::size_of::<XOMFontInfo>() - 24usize];
    ["Alignment of XOMFontInfo"][::std::mem::align_of::<XOMFontInfo>() - 8usize];
    ["Offset of field: XOMFontInfo::num_font"]
        [::std::mem::offset_of!(XOMFontInfo, num_font) - 0usize];
    ["Offset of field: XOMFontInfo::font_struct_list"]
        [::std::mem::offset_of!(XOMFontInfo, font_struct_list) - 8usize];
    ["Offset of field: XOMFontInfo::font_name_list"]
        [::std::mem::offset_of!(XOMFontInfo, font_name_list) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIM {
    _unused: [u8; 0],
}
pub type XIM = *mut _XIM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIC {
    _unused: [u8; 0],
}
pub type XIC = *mut _XIC;
pub type XIMProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: XIM, arg2: XPointer, arg3: XPointer)>;
pub type XICProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: XIC, arg2: XPointer, arg3: XPointer) -> ::std::os::raw::c_int,
>;
pub type XIDProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut Display, arg2: XPointer, arg3: XPointer)>;
pub type XIMStyle = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMStyles {
    pub count_styles: ::std::os::raw::c_ushort,
    pub supported_styles: *mut XIMStyle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMStyles"][::std::mem::size_of::<XIMStyles>() - 16usize];
    ["Alignment of XIMStyles"][::std::mem::align_of::<XIMStyles>() - 8usize];
    ["Offset of field: XIMStyles::count_styles"]
        [::std::mem::offset_of!(XIMStyles, count_styles) - 0usize];
    ["Offset of field: XIMStyles::supported_styles"]
        [::std::mem::offset_of!(XIMStyles, supported_styles) - 8usize];
};
pub type XVaNestedList = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMCallback {
    pub client_data: XPointer,
    pub callback: XIMProc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMCallback"][::std::mem::size_of::<XIMCallback>() - 16usize];
    ["Alignment of XIMCallback"][::std::mem::align_of::<XIMCallback>() - 8usize];
    ["Offset of field: XIMCallback::client_data"]
        [::std::mem::offset_of!(XIMCallback, client_data) - 0usize];
    ["Offset of field: XIMCallback::callback"]
        [::std::mem::offset_of!(XIMCallback, callback) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XICCallback {
    pub client_data: XPointer,
    pub callback: XICProc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XICCallback"][::std::mem::size_of::<XICCallback>() - 16usize];
    ["Alignment of XICCallback"][::std::mem::align_of::<XICCallback>() - 8usize];
    ["Offset of field: XICCallback::client_data"]
        [::std::mem::offset_of!(XICCallback, client_data) - 0usize];
    ["Offset of field: XICCallback::callback"]
        [::std::mem::offset_of!(XICCallback, callback) - 8usize];
};
pub type XIMFeedback = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMText {
    pub length: ::std::os::raw::c_ushort,
    pub feedback: *mut XIMFeedback,
    pub encoding_is_wchar: ::std::os::raw::c_int,
    pub string: _XIMText__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMText__bindgen_ty_1 {
    pub multi_byte: *mut ::std::os::raw::c_char,
    pub wide_char: *mut wchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMText__bindgen_ty_1"][::std::mem::size_of::<_XIMText__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMText__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMText__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMText__bindgen_ty_1::multi_byte"]
        [::std::mem::offset_of!(_XIMText__bindgen_ty_1, multi_byte) - 0usize];
    ["Offset of field: _XIMText__bindgen_ty_1::wide_char"]
        [::std::mem::offset_of!(_XIMText__bindgen_ty_1, wide_char) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMText"][::std::mem::size_of::<_XIMText>() - 32usize];
    ["Alignment of _XIMText"][::std::mem::align_of::<_XIMText>() - 8usize];
    ["Offset of field: _XIMText::length"][::std::mem::offset_of!(_XIMText, length) - 0usize];
    ["Offset of field: _XIMText::feedback"][::std::mem::offset_of!(_XIMText, feedback) - 8usize];
    ["Offset of field: _XIMText::encoding_is_wchar"]
        [::std::mem::offset_of!(_XIMText, encoding_is_wchar) - 16usize];
    ["Offset of field: _XIMText::string"][::std::mem::offset_of!(_XIMText, string) - 24usize];
};
pub type XIMText = _XIMText;
pub type XIMPreeditState = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditStateNotifyCallbackStruct {
    pub state: XIMPreeditState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditStateNotifyCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditStateNotifyCallbackStruct>() - 8usize];
    ["Alignment of _XIMPreeditStateNotifyCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditStateNotifyCallbackStruct>() - 8usize];
    ["Offset of field: _XIMPreeditStateNotifyCallbackStruct::state"]
        [::std::mem::offset_of!(_XIMPreeditStateNotifyCallbackStruct, state) - 0usize];
};
pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct;
pub type XIMResetState = ::std::os::raw::c_ulong;
pub type XIMStringConversionFeedback = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMStringConversionText {
    pub length: ::std::os::raw::c_ushort,
    pub feedback: *mut XIMStringConversionFeedback,
    pub encoding_is_wchar: ::std::os::raw::c_int,
    pub string: _XIMStringConversionText__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMStringConversionText__bindgen_ty_1 {
    pub mbs: *mut ::std::os::raw::c_char,
    pub wcs: *mut wchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionText__bindgen_ty_1"]
        [::std::mem::size_of::<_XIMStringConversionText__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMStringConversionText__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMStringConversionText__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMStringConversionText__bindgen_ty_1::mbs"]
        [::std::mem::offset_of!(_XIMStringConversionText__bindgen_ty_1, mbs) - 0usize];
    ["Offset of field: _XIMStringConversionText__bindgen_ty_1::wcs"]
        [::std::mem::offset_of!(_XIMStringConversionText__bindgen_ty_1, wcs) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionText"]
        [::std::mem::size_of::<_XIMStringConversionText>() - 32usize];
    ["Alignment of _XIMStringConversionText"]
        [::std::mem::align_of::<_XIMStringConversionText>() - 8usize];
    ["Offset of field: _XIMStringConversionText::length"]
        [::std::mem::offset_of!(_XIMStringConversionText, length) - 0usize];
    ["Offset of field: _XIMStringConversionText::feedback"]
        [::std::mem::offset_of!(_XIMStringConversionText, feedback) - 8usize];
    ["Offset of field: _XIMStringConversionText::encoding_is_wchar"]
        [::std::mem::offset_of!(_XIMStringConversionText, encoding_is_wchar) - 16usize];
    ["Offset of field: _XIMStringConversionText::string"]
        [::std::mem::offset_of!(_XIMStringConversionText, string) - 24usize];
};
pub type XIMStringConversionText = _XIMStringConversionText;
pub type XIMStringConversionPosition = ::std::os::raw::c_ushort;
pub type XIMStringConversionType = ::std::os::raw::c_ushort;
pub type XIMStringConversionOperation = ::std::os::raw::c_ushort;
pub const XIMCaretDirection_XIMForwardChar: XIMCaretDirection = 0;
pub const XIMCaretDirection_XIMBackwardChar: XIMCaretDirection = 1;
pub const XIMCaretDirection_XIMForwardWord: XIMCaretDirection = 2;
pub const XIMCaretDirection_XIMBackwardWord: XIMCaretDirection = 3;
pub const XIMCaretDirection_XIMCaretUp: XIMCaretDirection = 4;
pub const XIMCaretDirection_XIMCaretDown: XIMCaretDirection = 5;
pub const XIMCaretDirection_XIMNextLine: XIMCaretDirection = 6;
pub const XIMCaretDirection_XIMPreviousLine: XIMCaretDirection = 7;
pub const XIMCaretDirection_XIMLineStart: XIMCaretDirection = 8;
pub const XIMCaretDirection_XIMLineEnd: XIMCaretDirection = 9;
pub const XIMCaretDirection_XIMAbsolutePosition: XIMCaretDirection = 10;
pub const XIMCaretDirection_XIMDontChange: XIMCaretDirection = 11;
pub type XIMCaretDirection = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMStringConversionCallbackStruct {
    pub position: XIMStringConversionPosition,
    pub direction: XIMCaretDirection,
    pub operation: XIMStringConversionOperation,
    pub factor: ::std::os::raw::c_ushort,
    pub text: *mut XIMStringConversionText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionCallbackStruct"]
        [::std::mem::size_of::<_XIMStringConversionCallbackStruct>() - 24usize];
    ["Alignment of _XIMStringConversionCallbackStruct"]
        [::std::mem::align_of::<_XIMStringConversionCallbackStruct>() - 8usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::position"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, position) - 0usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::direction"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, direction) - 4usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::operation"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, operation) - 8usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::factor"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, factor) - 10usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::text"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, text) - 16usize];
};
pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditDrawCallbackStruct {
    pub caret: ::std::os::raw::c_int,
    pub chg_first: ::std::os::raw::c_int,
    pub chg_length: ::std::os::raw::c_int,
    pub text: *mut XIMText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditDrawCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditDrawCallbackStruct>() - 24usize];
    ["Alignment of _XIMPreeditDrawCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditDrawCallbackStruct>() - 8usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::caret"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, caret) - 0usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::chg_first"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, chg_first) - 4usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::chg_length"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, chg_length) - 8usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::text"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, text) - 16usize];
};
pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct;
pub const XIMCaretStyle_XIMIsInvisible: XIMCaretStyle = 0;
pub const XIMCaretStyle_XIMIsPrimary: XIMCaretStyle = 1;
pub const XIMCaretStyle_XIMIsSecondary: XIMCaretStyle = 2;
pub type XIMCaretStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditCaretCallbackStruct {
    pub position: ::std::os::raw::c_int,
    pub direction: XIMCaretDirection,
    pub style: XIMCaretStyle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditCaretCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditCaretCallbackStruct>() - 12usize];
    ["Alignment of _XIMPreeditCaretCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditCaretCallbackStruct>() - 4usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::position"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, position) - 0usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::direction"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, direction) - 4usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::style"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, style) - 8usize];
};
pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct;
pub const XIMStatusDataType_XIMTextType: XIMStatusDataType = 0;
pub const XIMStatusDataType_XIMBitmapType: XIMStatusDataType = 1;
pub type XIMStatusDataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMStatusDrawCallbackStruct {
    pub type_: XIMStatusDataType,
    pub data: _XIMStatusDrawCallbackStruct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
    pub text: *mut XIMText,
    pub bitmap: Pixmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStatusDrawCallbackStruct__bindgen_ty_1"]
        [::std::mem::size_of::<_XIMStatusDrawCallbackStruct__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMStatusDrawCallbackStruct__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMStatusDrawCallbackStruct__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct__bindgen_ty_1::text"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct__bindgen_ty_1, text) - 0usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct__bindgen_ty_1::bitmap"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct__bindgen_ty_1, bitmap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStatusDrawCallbackStruct"]
        [::std::mem::size_of::<_XIMStatusDrawCallbackStruct>() - 16usize];
    ["Alignment of _XIMStatusDrawCallbackStruct"]
        [::std::mem::align_of::<_XIMStatusDrawCallbackStruct>() - 8usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct::type_"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct, type_) - 0usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct::data"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct, data) - 8usize];
};
pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMHotKeyTrigger {
    pub keysym: KeySym,
    pub modifier: ::std::os::raw::c_int,
    pub modifier_mask: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMHotKeyTrigger"][::std::mem::size_of::<_XIMHotKeyTrigger>() - 16usize];
    ["Alignment of _XIMHotKeyTrigger"][::std::mem::align_of::<_XIMHotKeyTrigger>() - 8usize];
    ["Offset of field: _XIMHotKeyTrigger::keysym"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, keysym) - 0usize];
    ["Offset of field: _XIMHotKeyTrigger::modifier"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, modifier) - 8usize];
    ["Offset of field: _XIMHotKeyTrigger::modifier_mask"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, modifier_mask) - 12usize];
};
pub type XIMHotKeyTrigger = _XIMHotKeyTrigger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMHotKeyTriggers {
    pub num_hot_key: ::std::os::raw::c_int,
    pub key: *mut XIMHotKeyTrigger,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMHotKeyTriggers"][::std::mem::size_of::<_XIMHotKeyTriggers>() - 16usize];
    ["Alignment of _XIMHotKeyTriggers"][::std::mem::align_of::<_XIMHotKeyTriggers>() - 8usize];
    ["Offset of field: _XIMHotKeyTriggers::num_hot_key"]
        [::std::mem::offset_of!(_XIMHotKeyTriggers, num_hot_key) - 0usize];
    ["Offset of field: _XIMHotKeyTriggers::key"]
        [::std::mem::offset_of!(_XIMHotKeyTriggers, key) - 8usize];
};
pub type XIMHotKeyTriggers = _XIMHotKeyTriggers;
pub type XIMHotKeyState = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMValuesList {
    pub count_values: ::std::os::raw::c_ushort,
    pub supported_values: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMValuesList"][::std::mem::size_of::<XIMValuesList>() - 16usize];
    ["Alignment of XIMValuesList"][::std::mem::align_of::<XIMValuesList>() - 8usize];
    ["Offset of field: XIMValuesList::count_values"]
        [::std::mem::offset_of!(XIMValuesList, count_values) - 0usize];
    ["Offset of field: XIMValuesList::supported_values"]
        [::std::mem::offset_of!(XIMValuesList, supported_values) - 8usize];
};
extern "C" {
    pub static mut _Xdebug: ::std::os::raw::c_int;
}
extern "C" {
    pub fn XLoadQueryFont(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XFontStruct;
}
extern "C" {
    pub fn XQueryFont(arg1: *mut Display, arg2: XID) -> *mut XFontStruct;
}
extern "C" {
    pub fn XGetMotionEvents(
        arg1: *mut Display,
        arg2: Window,
        arg3: Time,
        arg4: Time,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut XTimeCoord;
}
extern "C" {
    pub fn XDeleteModifiermapEntry(
        arg1: *mut XModifierKeymap,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XModifierKeymap;
}
extern "C" {
    pub fn XGetModifierMapping(arg1: *mut Display) -> *mut XModifierKeymap;
}
extern "C" {
    pub fn XInsertModifiermapEntry(
        arg1: *mut XModifierKeymap,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XModifierKeymap;
}
extern "C" {
    pub fn XNewModifiermap(arg1: ::std::os::raw::c_int) -> *mut XModifierKeymap;
}
extern "C" {
    pub fn XCreateImage(
        arg1: *mut Display,
        arg2: *mut Visual,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
extern "C" {
    pub fn XInitImage(arg1: *mut XImage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
extern "C" {
    pub fn XGetSubImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_int,
        arg9: *mut XImage,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
extern "C" {
    pub fn XOpenDisplay(arg1: *const ::std::os::raw::c_char) -> *mut Display;
}
extern "C" {
    pub fn XrmInitialize();
}
extern "C" {
    pub fn XFetchBytes(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XFetchBuffer(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XGetAtomName(arg1: *mut Display, arg2: Atom) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XGetAtomNames(
        arg1: *mut Display,
        arg2: *mut Atom,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetDefault(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDisplayName(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XKeysymToString(arg1: KeySym) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XSynchronize(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Display,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn XSetAfterFunction(
        arg1: *mut Display,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Display,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn XInternAtom(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> Atom;
}
extern "C" {
    pub fn XInternAtoms(
        arg1: *mut Display,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCopyColormapAndFree(arg1: *mut Display, arg2: Colormap) -> Colormap;
}
extern "C" {
    pub fn XCreateColormap(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Visual,
        arg4: ::std::os::raw::c_int,
    ) -> Colormap;
}
extern "C" {
    pub fn XCreatePixmapCursor(
        arg1: *mut Display,
        arg2: Pixmap,
        arg3: Pixmap,
        arg4: *mut XColor,
        arg5: *mut XColor,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> Cursor;
}
extern "C" {
    pub fn XCreateGlyphCursor(
        arg1: *mut Display,
        arg2: Font,
        arg3: Font,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *const XColor,
        arg7: *const XColor,
    ) -> Cursor;
}
extern "C" {
    pub fn XCreateFontCursor(arg1: *mut Display, arg2: ::std::os::raw::c_uint) -> Cursor;
}
extern "C" {
    pub fn XLoadFont(arg1: *mut Display, arg2: *const ::std::os::raw::c_char) -> Font;
}
extern "C" {
    pub fn XCreateGC(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> GC;
}
extern "C" {
    pub fn XGContextFromGC(arg1: GC) -> GContext;
}
extern "C" {
    pub fn XFlushGC(arg1: *mut Display, arg2: GC);
}
extern "C" {
    pub fn XCreatePixmap(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
extern "C" {
    pub fn XCreateBitmapFromData(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
extern "C" {
    pub fn XCreatePixmapFromBitmapData(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_ulong,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
extern "C" {
    pub fn XCreateSimpleWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_ulong,
        arg9: ::std::os::raw::c_ulong,
    ) -> Window;
}
extern "C" {
    pub fn XGetSelectionOwner(arg1: *mut Display, arg2: Atom) -> Window;
}
extern "C" {
    pub fn XCreateWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: *mut Visual,
        arg11: ::std::os::raw::c_ulong,
        arg12: *mut XSetWindowAttributes,
    ) -> Window;
}
extern "C" {
    pub fn XListInstalledColormaps(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Colormap;
}
extern "C" {
    pub fn XListFonts(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XListFontsWithInfo(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut XFontStruct,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XGetFontPath(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XListExtensions(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XListProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Atom;
}
extern "C" {
    pub fn XListHosts(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XHostAddress;
}
extern "C" {
    pub fn XKeycodeToKeysym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> KeySym;
}
extern "C" {
    pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: ::std::os::raw::c_int) -> KeySym;
}
extern "C" {
    pub fn XGetKeyboardMapping(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
extern "C" {
    pub fn XStringToKeysym(arg1: *const ::std::os::raw::c_char) -> KeySym;
}
extern "C" {
    pub fn XMaxRequestSize(arg1: *mut Display) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn XExtendedMaxRequestSize(arg1: *mut Display) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn XResourceManagerString(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XScreenResourceString(arg1: *mut Screen) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDisplayMotionBufferSize(arg1: *mut Display) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
}
extern "C" {
    pub fn XInitThreads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeThreads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XLockDisplay(arg1: *mut Display);
}
extern "C" {
    pub fn XUnlockDisplay(arg1: *mut Display);
}
extern "C" {
    pub fn XInitExtension(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XExtCodes;
}
extern "C" {
    pub fn XAddExtension(arg1: *mut Display) -> *mut XExtCodes;
}
extern "C" {
    pub fn XFindOnExtensionList(
        arg1: *mut *mut XExtData,
        arg2: ::std::os::raw::c_int,
    ) -> *mut XExtData;
}
extern "C" {
    pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
}
extern "C" {
    pub fn XRootWindow(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> Window;
}
extern "C" {
    pub fn XDefaultRootWindow(arg1: *mut Display) -> Window;
}
extern "C" {
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
}
extern "C" {
    pub fn XDefaultVisual(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> *mut Visual;
}
extern "C" {
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
}
extern "C" {
    pub fn XDefaultGC(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> GC;
}
extern "C" {
    pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
}
extern "C" {
    pub fn XBlackPixel(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XWhitePixel(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XAllPlanes() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XNextRequest(arg1: *mut Display) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XLastKnownRequestProcessed(arg1: *mut Display) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XServerVendor(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDisplayString(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDefaultColormap(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> Colormap;
}
extern "C" {
    pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
}
extern "C" {
    pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut Display;
}
extern "C" {
    pub fn XScreenOfDisplay(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> *mut Screen;
}
extern "C" {
    pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
}
extern "C" {
    pub fn XEventMaskOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
pub type XErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Display, arg2: *mut XErrorEvent) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
}
pub type XIOErrorHandler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
}
pub type XIOErrorExitHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Display, arg2: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn XSetIOErrorExitHandler(
        arg1: *mut Display,
        arg2: XIOErrorExitHandler,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XListPixmapFormats(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut XPixmapFormatValues;
}
extern "C" {
    pub fn XListDepths(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn XReconfigureWMWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XWindowChanges,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWMProtocols(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut Atom,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWMProtocols(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XIconifyWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWithdrawWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetCommand(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWMColormapWindows(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut Window,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWMColormapWindows(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeStringList(arg1: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn XSetTransientForHint(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XActivateScreenSaver(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAddHost(arg1: *mut Display, arg2: *mut XHostAddress) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAddHosts(
        arg1: *mut Display,
        arg2: *mut XHostAddress,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAddToExtensionList(
        arg1: *mut *mut _XExtData,
        arg2: *mut XExtData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAddToSaveSet(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAllocColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAllocColorCells(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_ulong,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAllocColorPlanes(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_ulong,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAllocNamedColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
        arg5: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAllowEvents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAutoRepeatOff(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XAutoRepeatOn(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XBell(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XBitmapBitOrder(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XBitmapPad(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XBitmapUnit(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCellsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeActivePointerGrab(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: Cursor,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeGC(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeKeyboardControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut XKeyboardControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeKeyboardMapping(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut KeySym,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangePointerControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeProperty(
        arg1: *mut Display,
        arg2: Window,
        arg3: Atom,
        arg4: Atom,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_uchar,
        arg8: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeSaveSet(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XChangeWindowAttributes(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XSetWindowAttributes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCheckIfEvent(
        arg1: *mut Display,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Display,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCheckMaskEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCheckTypedEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCheckTypedWindowEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCheckWindowEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCirculateSubwindows(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCirculateSubwindowsDown(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCirculateSubwindowsUp(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XClearArea(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCloseDisplay(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XConfigureWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut XWindowChanges,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XConnectionNumber(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XConvertSelection(
        arg1: *mut Display,
        arg2: Atom,
        arg3: Atom,
        arg4: Atom,
        arg5: Window,
        arg6: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCopyArea(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: Drawable,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCopyGC(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: GC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCopyPlane(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: Drawable,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDefaultDepth(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDefaultScreen(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDefineCursor(arg1: *mut Display, arg2: Window, arg3: Cursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDeleteProperty(arg1: *mut Display, arg2: Window, arg3: Atom) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDestroySubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDoesBackingStore(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDoesSaveUnders(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisableAccessControl(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayCells(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayHeight(arg1: *mut Display, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayHeightMM(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayKeycodes(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayPlanes(arg1: *mut Display, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayWidth(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDisplayWidthMM(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawArc(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawArcs(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XArc,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawImageString16(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const XChar2b,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawLine(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawLines(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawPoint(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawPoints(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawRectangle(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawRectangles(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XRectangle,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawSegments(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XSegment,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawString16(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const XChar2b,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XTextItem,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDrawText16(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XTextItem16,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XEnableAccessControl(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XEventsQueued(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFetchName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFillArc(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFillArcs(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XArc,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFillPolygon(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFillRectangle(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFillRectangles(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XRectangle,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFlush(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XForceScreenSaver(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFree(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeColors(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeCursor(arg1: *mut Display, arg2: Cursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeExtensionList(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeFont(arg1: *mut Display, arg2: *mut XFontStruct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeFontInfo(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut XFontStruct,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeFontNames(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeFontPath(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreePixmap(arg1: *mut Display, arg2: Pixmap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGeometry(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_int,
        arg11: *mut ::std::os::raw::c_int,
        arg12: *mut ::std::os::raw::c_int,
        arg13: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetErrorDatabaseText(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetErrorText(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetFontProperty(
        arg1: *mut XFontStruct,
        arg2: Atom,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetGCValues(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetGeometry(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *mut Window,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: *mut ::std::os::raw::c_uint,
        arg9: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetIconName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetInputFocus(
        arg1: *mut Display,
        arg2: *mut Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetKeyboardControl(
        arg1: *mut Display,
        arg2: *mut XKeyboardState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetPointerControl(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetPointerMapping(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetScreenSaver(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetTransientForHint(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWindowProperty(
        arg1: *mut Display,
        arg2: Window,
        arg3: Atom,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
        arg8: *mut Atom,
        arg9: *mut ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
        arg12: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWindowAttributes(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XWindowAttributes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGrabButton(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: Window,
        arg10: Cursor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGrabKey(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGrabKeyboard(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGrabPointer(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Window,
        arg8: Cursor,
        arg9: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGrabServer(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XHeightMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XHeightOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XIfEvent(
        arg1: *mut Display,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Display,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XImageByteOrder(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XInstallColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XKeysymToKeycode(arg1: *mut Display, arg2: KeySym) -> KeyCode;
}
extern "C" {
    pub fn XKillClient(arg1: *mut Display, arg2: XID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XLookupColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
        arg5: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XLowerWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMapSubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMapWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMaskEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMoveResizeWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMoveWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XNoOp(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XParseColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XParseGeometry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPeekEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPeekIfEvent(
        arg1: *mut Display,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Display,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPending(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPlanesOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XProtocolRevision(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XProtocolVersion(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPutBackEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPutImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XImage,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQLength(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryBestCursor(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryBestSize(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: Drawable,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryBestStipple(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryBestTile(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryColors(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryExtension(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryKeymap(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryPointer(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
        arg4: *mut Window,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryTextExtents(
        arg1: *mut Display,
        arg2: XID,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryTextExtents16(
        arg1: *mut Display,
        arg2: XID,
        arg3: *const XChar2b,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XQueryTree(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
        arg4: *mut Window,
        arg5: *mut *mut Window,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRaiseWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XReadBitmapFile(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut Pixmap,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XReadBitmapFileData(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut *mut ::std::os::raw::c_uchar,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRebindKeysym(
        arg1: *mut Display,
        arg2: KeySym,
        arg3: *mut KeySym,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_uchar,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRecolorCursor(
        arg1: *mut Display,
        arg2: Cursor,
        arg3: *mut XColor,
        arg4: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRemoveFromSaveSet(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRemoveHost(arg1: *mut Display, arg2: *mut XHostAddress) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRemoveHosts(
        arg1: *mut Display,
        arg2: *mut XHostAddress,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XReparentWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XResetScreenSaver(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XResizeWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRestackWindows(
        arg1: *mut Display,
        arg2: *mut Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRotateBuffers(arg1: *mut Display, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRotateWindowProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XScreenCount(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSelectInput(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSendEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_long,
        arg5: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetAccessControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetArcMode(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetBackground(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetClipMask(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetClipOrigin(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetClipRectangles(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetCloseDownMode(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetCommand(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetDashes(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetFillRule(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetFillStyle(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetFont(arg1: *mut Display, arg2: GC, arg3: Font) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetFontPath(
        arg1: *mut Display,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetForeground(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetFunction(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetGraphicsExposures(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetIconName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetInputFocus(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetLineAttributes(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetModifierMapping(
        arg1: *mut Display,
        arg2: *mut XModifierKeymap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetPlaneMask(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetPointerMapping(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetScreenSaver(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetSelectionOwner(
        arg1: *mut Display,
        arg2: Atom,
        arg3: Window,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetState(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetStipple(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetSubwindowMode(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetTSOrigin(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetTile(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWindowBackground(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWindowBackgroundPixmap(
        arg1: *mut Display,
        arg2: Window,
        arg3: Pixmap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWindowBorder(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWindowBorderPixmap(
        arg1: *mut Display,
        arg2: Window,
        arg3: Pixmap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWindowBorderWidth(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWindowColormap(
        arg1: *mut Display,
        arg2: Window,
        arg3: Colormap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStoreBuffer(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStoreBytes(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStoreColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStoreColors(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStoreName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStoreNamedColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSync(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XTextExtents(
        arg1: *mut XFontStruct,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XTextExtents16(
        arg1: *mut XFontStruct,
        arg2: *const XChar2b,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XTextWidth(
        arg1: *mut XFontStruct,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XTextWidth16(
        arg1: *mut XFontStruct,
        arg2: *const XChar2b,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XTranslateCoordinates(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUndefineCursor(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUngrabButton(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUngrabKey(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUngrabKeyboard(arg1: *mut Display, arg2: Time) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUngrabPointer(arg1: *mut Display, arg2: Time) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUngrabServer(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUninstallColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUnloadFont(arg1: *mut Display, arg2: Font) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUnmapSubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUnmapWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XVendorRelease(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWarpPointer(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWidthMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWidthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWindowEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWriteBitmapFile(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: Pixmap,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSupportsLocale() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetLocaleModifiers(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XOpenOM(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> XOM;
}
extern "C" {
    pub fn XCloseOM(arg1: XOM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XGetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDisplayOfOM(arg1: XOM) -> *mut Display;
}
extern "C" {
    pub fn XLocaleOfOM(arg1: XOM) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XCreateOC(arg1: XOM, ...) -> XOC;
}
extern "C" {
    pub fn XDestroyOC(arg1: XOC);
}
extern "C" {
    pub fn XOMOfOC(arg1: XOC) -> XOM;
}
extern "C" {
    pub fn XSetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XGetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XCreateFontSet(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> XFontSet;
}
extern "C" {
    pub fn XFreeFontSet(arg1: *mut Display, arg2: XFontSet);
}
extern "C" {
    pub fn XFontsOfFontSet(
        arg1: XFontSet,
        arg2: *mut *mut *mut XFontStruct,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XContextDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XContextualDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
}
extern "C" {
    pub fn XmbTextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcTextEscapement(
        arg1: XFontSet,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Xutf8TextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XmbTextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcTextExtents(
        arg1: XFontSet,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Xutf8TextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XmbTextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcTextPerCharExtents(
        arg1: XFontSet,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Xutf8TextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XmbDrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XmbTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XwcDrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XwcTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Xutf8DrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XmbTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XmbDrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XwcDrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const wchar_t,
        arg8: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Xutf8DrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XmbDrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XwcDrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const wchar_t,
        arg8: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Xutf8DrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XOpenIM(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> XIM;
}
extern "C" {
    pub fn XCloseIM(arg1: XIM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XSetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDisplayOfIM(arg1: XIM) -> *mut Display;
}
extern "C" {
    pub fn XLocaleOfIM(arg1: XIM) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XCreateIC(arg1: XIM, ...) -> XIC;
}
extern "C" {
    pub fn XDestroyIC(arg1: XIC);
}
extern "C" {
    pub fn XSetICFocus(arg1: XIC);
}
extern "C" {
    pub fn XUnsetICFocus(arg1: XIC);
}
extern "C" {
    pub fn XwcResetIC(arg1: XIC) -> *mut wchar_t;
}
extern "C" {
    pub fn XmbResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Xutf8ResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XSetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XGetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XIMOfIC(arg1: XIC) -> XIM;
}
extern "C" {
    pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XmbLookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcLookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut wchar_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Xutf8LookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XVaCreateNestedList(arg1: ::std::os::raw::c_int, ...) -> XVaNestedList;
}
extern "C" {
    pub fn XRegisterIMInstantiateCallback(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: XIDProc,
        arg6: XPointer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUnregisterIMInstantiateCallback(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: XIDProc,
        arg6: XPointer,
    ) -> ::std::os::raw::c_int;
}
pub type XConnectionWatchProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Display,
        arg2: XPointer,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XPointer,
    ),
>;
extern "C" {
    pub fn XInternalConnectionNumbers(
        arg1: *mut Display,
        arg2: *mut *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XProcessInternalConnection(arg1: *mut Display, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XAddConnectionWatch(
        arg1: *mut Display,
        arg2: XConnectionWatchProc,
        arg3: XPointer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRemoveConnectionWatch(arg1: *mut Display, arg2: XConnectionWatchProc, arg3: XPointer);
}
extern "C" {
    pub fn XSetAuthorization(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Xmbtowc(
        arg1: *mut wchar_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Xwctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetEventData(
        arg1: *mut Display,
        arg2: *mut XGenericEventCookie,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie);
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type FT_Int16 = ::std::os::raw::c_short;
pub type FT_UInt16 = ::std::os::raw::c_ushort;
pub type FT_Int32 = ::std::os::raw::c_int;
pub type FT_UInt32 = ::std::os::raw::c_uint;
pub type FT_Fast = ::std::os::raw::c_int;
pub type FT_UFast = ::std::os::raw::c_uint;
pub type FT_Int64 = ::std::os::raw::c_long;
pub type FT_UInt64 = ::std::os::raw::c_ulong;
pub type FT_Memory = *mut FT_MemoryRec_;
pub type FT_Alloc_Func = ::std::option::Option<
    unsafe extern "C" fn(
        memory: FT_Memory,
        size: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FT_Free_Func = ::std::option::Option<
    unsafe extern "C" fn(memory: FT_Memory, block: *mut ::std::os::raw::c_void),
>;
pub type FT_Realloc_Func = ::std::option::Option<
    unsafe extern "C" fn(
        memory: FT_Memory,
        cur_size: ::std::os::raw::c_long,
        new_size: ::std::os::raw::c_long,
        block: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_MemoryRec_ {
    pub user: *mut ::std::os::raw::c_void,
    pub alloc: FT_Alloc_Func,
    pub free: FT_Free_Func,
    pub realloc: FT_Realloc_Func,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_MemoryRec_"][::std::mem::size_of::<FT_MemoryRec_>() - 32usize];
    ["Alignment of FT_MemoryRec_"][::std::mem::align_of::<FT_MemoryRec_>() - 8usize];
    ["Offset of field: FT_MemoryRec_::user"][::std::mem::offset_of!(FT_MemoryRec_, user) - 0usize];
    ["Offset of field: FT_MemoryRec_::alloc"]
        [::std::mem::offset_of!(FT_MemoryRec_, alloc) - 8usize];
    ["Offset of field: FT_MemoryRec_::free"][::std::mem::offset_of!(FT_MemoryRec_, free) - 16usize];
    ["Offset of field: FT_MemoryRec_::realloc"]
        [::std::mem::offset_of!(FT_MemoryRec_, realloc) - 24usize];
};
pub type FT_Stream = *mut FT_StreamRec_;
#[repr(C)]
#[derive(Copy, Clone)]
pub union FT_StreamDesc_ {
    pub value: ::std::os::raw::c_long,
    pub pointer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_StreamDesc_"][::std::mem::size_of::<FT_StreamDesc_>() - 8usize];
    ["Alignment of FT_StreamDesc_"][::std::mem::align_of::<FT_StreamDesc_>() - 8usize];
    ["Offset of field: FT_StreamDesc_::value"]
        [::std::mem::offset_of!(FT_StreamDesc_, value) - 0usize];
    ["Offset of field: FT_StreamDesc_::pointer"]
        [::std::mem::offset_of!(FT_StreamDesc_, pointer) - 0usize];
};
pub type FT_StreamDesc = FT_StreamDesc_;
pub type FT_Stream_IoFunc = ::std::option::Option<
    unsafe extern "C" fn(
        stream: FT_Stream,
        offset: ::std::os::raw::c_ulong,
        buffer: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong,
>;
pub type FT_Stream_CloseFunc = ::std::option::Option<unsafe extern "C" fn(stream: FT_Stream)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FT_StreamRec_ {
    pub base: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_ulong,
    pub pos: ::std::os::raw::c_ulong,
    pub descriptor: FT_StreamDesc,
    pub pathname: FT_StreamDesc,
    pub read: FT_Stream_IoFunc,
    pub close: FT_Stream_CloseFunc,
    pub memory: FT_Memory,
    pub cursor: *mut ::std::os::raw::c_uchar,
    pub limit: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_StreamRec_"][::std::mem::size_of::<FT_StreamRec_>() - 80usize];
    ["Alignment of FT_StreamRec_"][::std::mem::align_of::<FT_StreamRec_>() - 8usize];
    ["Offset of field: FT_StreamRec_::base"][::std::mem::offset_of!(FT_StreamRec_, base) - 0usize];
    ["Offset of field: FT_StreamRec_::size"][::std::mem::offset_of!(FT_StreamRec_, size) - 8usize];
    ["Offset of field: FT_StreamRec_::pos"][::std::mem::offset_of!(FT_StreamRec_, pos) - 16usize];
    ["Offset of field: FT_StreamRec_::descriptor"]
        [::std::mem::offset_of!(FT_StreamRec_, descriptor) - 24usize];
    ["Offset of field: FT_StreamRec_::pathname"]
        [::std::mem::offset_of!(FT_StreamRec_, pathname) - 32usize];
    ["Offset of field: FT_StreamRec_::read"][::std::mem::offset_of!(FT_StreamRec_, read) - 40usize];
    ["Offset of field: FT_StreamRec_::close"]
        [::std::mem::offset_of!(FT_StreamRec_, close) - 48usize];
    ["Offset of field: FT_StreamRec_::memory"]
        [::std::mem::offset_of!(FT_StreamRec_, memory) - 56usize];
    ["Offset of field: FT_StreamRec_::cursor"]
        [::std::mem::offset_of!(FT_StreamRec_, cursor) - 64usize];
    ["Offset of field: FT_StreamRec_::limit"]
        [::std::mem::offset_of!(FT_StreamRec_, limit) - 72usize];
};
pub type FT_StreamRec = FT_StreamRec_;
pub type FT_Pos = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Vector_ {
    pub x: FT_Pos,
    pub y: FT_Pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Vector_"][::std::mem::size_of::<FT_Vector_>() - 16usize];
    ["Alignment of FT_Vector_"][::std::mem::align_of::<FT_Vector_>() - 8usize];
    ["Offset of field: FT_Vector_::x"][::std::mem::offset_of!(FT_Vector_, x) - 0usize];
    ["Offset of field: FT_Vector_::y"][::std::mem::offset_of!(FT_Vector_, y) - 8usize];
};
pub type FT_Vector = FT_Vector_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_BBox_ {
    pub xMin: FT_Pos,
    pub yMin: FT_Pos,
    pub xMax: FT_Pos,
    pub yMax: FT_Pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_BBox_"][::std::mem::size_of::<FT_BBox_>() - 32usize];
    ["Alignment of FT_BBox_"][::std::mem::align_of::<FT_BBox_>() - 8usize];
    ["Offset of field: FT_BBox_::xMin"][::std::mem::offset_of!(FT_BBox_, xMin) - 0usize];
    ["Offset of field: FT_BBox_::yMin"][::std::mem::offset_of!(FT_BBox_, yMin) - 8usize];
    ["Offset of field: FT_BBox_::xMax"][::std::mem::offset_of!(FT_BBox_, xMax) - 16usize];
    ["Offset of field: FT_BBox_::yMax"][::std::mem::offset_of!(FT_BBox_, yMax) - 24usize];
};
pub type FT_BBox = FT_BBox_;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_NONE: FT_Pixel_Mode_ = 0;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_MONO: FT_Pixel_Mode_ = 1;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_GRAY: FT_Pixel_Mode_ = 2;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_GRAY2: FT_Pixel_Mode_ = 3;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_GRAY4: FT_Pixel_Mode_ = 4;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_LCD: FT_Pixel_Mode_ = 5;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_LCD_V: FT_Pixel_Mode_ = 6;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_BGRA: FT_Pixel_Mode_ = 7;
pub const FT_Pixel_Mode__FT_PIXEL_MODE_MAX: FT_Pixel_Mode_ = 8;
pub type FT_Pixel_Mode_ = ::std::os::raw::c_uint;
pub use self::FT_Pixel_Mode_ as FT_Pixel_Mode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Bitmap_ {
    pub rows: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_uint,
    pub pitch: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub num_grays: ::std::os::raw::c_ushort,
    pub pixel_mode: ::std::os::raw::c_uchar,
    pub palette_mode: ::std::os::raw::c_uchar,
    pub palette: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Bitmap_"][::std::mem::size_of::<FT_Bitmap_>() - 40usize];
    ["Alignment of FT_Bitmap_"][::std::mem::align_of::<FT_Bitmap_>() - 8usize];
    ["Offset of field: FT_Bitmap_::rows"][::std::mem::offset_of!(FT_Bitmap_, rows) - 0usize];
    ["Offset of field: FT_Bitmap_::width"][::std::mem::offset_of!(FT_Bitmap_, width) - 4usize];
    ["Offset of field: FT_Bitmap_::pitch"][::std::mem::offset_of!(FT_Bitmap_, pitch) - 8usize];
    ["Offset of field: FT_Bitmap_::buffer"][::std::mem::offset_of!(FT_Bitmap_, buffer) - 16usize];
    ["Offset of field: FT_Bitmap_::num_grays"]
        [::std::mem::offset_of!(FT_Bitmap_, num_grays) - 24usize];
    ["Offset of field: FT_Bitmap_::pixel_mode"]
        [::std::mem::offset_of!(FT_Bitmap_, pixel_mode) - 26usize];
    ["Offset of field: FT_Bitmap_::palette_mode"]
        [::std::mem::offset_of!(FT_Bitmap_, palette_mode) - 27usize];
    ["Offset of field: FT_Bitmap_::palette"][::std::mem::offset_of!(FT_Bitmap_, palette) - 32usize];
};
pub type FT_Bitmap = FT_Bitmap_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Outline_ {
    pub n_contours: ::std::os::raw::c_ushort,
    pub n_points: ::std::os::raw::c_ushort,
    pub points: *mut FT_Vector,
    pub tags: *mut ::std::os::raw::c_uchar,
    pub contours: *mut ::std::os::raw::c_ushort,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Outline_"][::std::mem::size_of::<FT_Outline_>() - 40usize];
    ["Alignment of FT_Outline_"][::std::mem::align_of::<FT_Outline_>() - 8usize];
    ["Offset of field: FT_Outline_::n_contours"]
        [::std::mem::offset_of!(FT_Outline_, n_contours) - 0usize];
    ["Offset of field: FT_Outline_::n_points"]
        [::std::mem::offset_of!(FT_Outline_, n_points) - 2usize];
    ["Offset of field: FT_Outline_::points"][::std::mem::offset_of!(FT_Outline_, points) - 8usize];
    ["Offset of field: FT_Outline_::tags"][::std::mem::offset_of!(FT_Outline_, tags) - 16usize];
    ["Offset of field: FT_Outline_::contours"]
        [::std::mem::offset_of!(FT_Outline_, contours) - 24usize];
    ["Offset of field: FT_Outline_::flags"][::std::mem::offset_of!(FT_Outline_, flags) - 32usize];
};
pub type FT_Outline = FT_Outline_;
pub type FT_Outline_MoveToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Outline_LineToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Outline_ConicToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        control: *const FT_Vector,
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Outline_CubicToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        control1: *const FT_Vector,
        control2: *const FT_Vector,
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Outline_Funcs_ {
    pub move_to: FT_Outline_MoveToFunc,
    pub line_to: FT_Outline_LineToFunc,
    pub conic_to: FT_Outline_ConicToFunc,
    pub cubic_to: FT_Outline_CubicToFunc,
    pub shift: ::std::os::raw::c_int,
    pub delta: FT_Pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Outline_Funcs_"][::std::mem::size_of::<FT_Outline_Funcs_>() - 48usize];
    ["Alignment of FT_Outline_Funcs_"][::std::mem::align_of::<FT_Outline_Funcs_>() - 8usize];
    ["Offset of field: FT_Outline_Funcs_::move_to"]
        [::std::mem::offset_of!(FT_Outline_Funcs_, move_to) - 0usize];
    ["Offset of field: FT_Outline_Funcs_::line_to"]
        [::std::mem::offset_of!(FT_Outline_Funcs_, line_to) - 8usize];
    ["Offset of field: FT_Outline_Funcs_::conic_to"]
        [::std::mem::offset_of!(FT_Outline_Funcs_, conic_to) - 16usize];
    ["Offset of field: FT_Outline_Funcs_::cubic_to"]
        [::std::mem::offset_of!(FT_Outline_Funcs_, cubic_to) - 24usize];
    ["Offset of field: FT_Outline_Funcs_::shift"]
        [::std::mem::offset_of!(FT_Outline_Funcs_, shift) - 32usize];
    ["Offset of field: FT_Outline_Funcs_::delta"]
        [::std::mem::offset_of!(FT_Outline_Funcs_, delta) - 40usize];
};
pub type FT_Outline_Funcs = FT_Outline_Funcs_;
pub const FT_Glyph_Format__FT_GLYPH_FORMAT_NONE: FT_Glyph_Format_ = 0;
pub const FT_Glyph_Format__FT_GLYPH_FORMAT_COMPOSITE: FT_Glyph_Format_ = 1668246896;
pub const FT_Glyph_Format__FT_GLYPH_FORMAT_BITMAP: FT_Glyph_Format_ = 1651078259;
pub const FT_Glyph_Format__FT_GLYPH_FORMAT_OUTLINE: FT_Glyph_Format_ = 1869968492;
pub const FT_Glyph_Format__FT_GLYPH_FORMAT_PLOTTER: FT_Glyph_Format_ = 1886154612;
pub const FT_Glyph_Format__FT_GLYPH_FORMAT_SVG: FT_Glyph_Format_ = 1398163232;
pub type FT_Glyph_Format_ = ::std::os::raw::c_uint;
pub use self::FT_Glyph_Format_ as FT_Glyph_Format;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Span_ {
    pub x: ::std::os::raw::c_short,
    pub len: ::std::os::raw::c_ushort,
    pub coverage: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Span_"][::std::mem::size_of::<FT_Span_>() - 6usize];
    ["Alignment of FT_Span_"][::std::mem::align_of::<FT_Span_>() - 2usize];
    ["Offset of field: FT_Span_::x"][::std::mem::offset_of!(FT_Span_, x) - 0usize];
    ["Offset of field: FT_Span_::len"][::std::mem::offset_of!(FT_Span_, len) - 2usize];
    ["Offset of field: FT_Span_::coverage"][::std::mem::offset_of!(FT_Span_, coverage) - 4usize];
};
pub type FT_Span = FT_Span_;
pub type FT_SpanFunc = ::std::option::Option<
    unsafe extern "C" fn(
        y: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        spans: *const FT_Span,
        user: *mut ::std::os::raw::c_void,
    ),
>;
pub type FT_Raster_BitTest_Func = ::std::option::Option<
    unsafe extern "C" fn(
        y: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Raster_BitSet_Func = ::std::option::Option<
    unsafe extern "C" fn(
        y: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Raster_Params_ {
    pub target: *const FT_Bitmap,
    pub source: *const ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_int,
    pub gray_spans: FT_SpanFunc,
    pub black_spans: FT_SpanFunc,
    pub bit_test: FT_Raster_BitTest_Func,
    pub bit_set: FT_Raster_BitSet_Func,
    pub user: *mut ::std::os::raw::c_void,
    pub clip_box: FT_BBox,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Raster_Params_"][::std::mem::size_of::<FT_Raster_Params_>() - 96usize];
    ["Alignment of FT_Raster_Params_"][::std::mem::align_of::<FT_Raster_Params_>() - 8usize];
    ["Offset of field: FT_Raster_Params_::target"]
        [::std::mem::offset_of!(FT_Raster_Params_, target) - 0usize];
    ["Offset of field: FT_Raster_Params_::source"]
        [::std::mem::offset_of!(FT_Raster_Params_, source) - 8usize];
    ["Offset of field: FT_Raster_Params_::flags"]
        [::std::mem::offset_of!(FT_Raster_Params_, flags) - 16usize];
    ["Offset of field: FT_Raster_Params_::gray_spans"]
        [::std::mem::offset_of!(FT_Raster_Params_, gray_spans) - 24usize];
    ["Offset of field: FT_Raster_Params_::black_spans"]
        [::std::mem::offset_of!(FT_Raster_Params_, black_spans) - 32usize];
    ["Offset of field: FT_Raster_Params_::bit_test"]
        [::std::mem::offset_of!(FT_Raster_Params_, bit_test) - 40usize];
    ["Offset of field: FT_Raster_Params_::bit_set"]
        [::std::mem::offset_of!(FT_Raster_Params_, bit_set) - 48usize];
    ["Offset of field: FT_Raster_Params_::user"]
        [::std::mem::offset_of!(FT_Raster_Params_, user) - 56usize];
    ["Offset of field: FT_Raster_Params_::clip_box"]
        [::std::mem::offset_of!(FT_Raster_Params_, clip_box) - 64usize];
};
pub type FT_Raster_Params = FT_Raster_Params_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_RasterRec_ {
    _unused: [u8; 0],
}
pub type FT_Raster = *mut FT_RasterRec_;
pub type FT_Raster_NewFunc = ::std::option::Option<
    unsafe extern "C" fn(
        memory: *mut ::std::os::raw::c_void,
        raster: *mut FT_Raster,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Raster_DoneFunc = ::std::option::Option<unsafe extern "C" fn(raster: FT_Raster)>;
pub type FT_Raster_ResetFunc = ::std::option::Option<
    unsafe extern "C" fn(
        raster: FT_Raster,
        pool_base: *mut ::std::os::raw::c_uchar,
        pool_size: ::std::os::raw::c_ulong,
    ),
>;
pub type FT_Raster_SetModeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        raster: FT_Raster,
        mode: ::std::os::raw::c_ulong,
        args: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Raster_RenderFunc = ::std::option::Option<
    unsafe extern "C" fn(
        raster: FT_Raster,
        params: *const FT_Raster_Params,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Raster_Funcs_ {
    pub glyph_format: FT_Glyph_Format,
    pub raster_new: FT_Raster_NewFunc,
    pub raster_reset: FT_Raster_ResetFunc,
    pub raster_set_mode: FT_Raster_SetModeFunc,
    pub raster_render: FT_Raster_RenderFunc,
    pub raster_done: FT_Raster_DoneFunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Raster_Funcs_"][::std::mem::size_of::<FT_Raster_Funcs_>() - 48usize];
    ["Alignment of FT_Raster_Funcs_"][::std::mem::align_of::<FT_Raster_Funcs_>() - 8usize];
    ["Offset of field: FT_Raster_Funcs_::glyph_format"]
        [::std::mem::offset_of!(FT_Raster_Funcs_, glyph_format) - 0usize];
    ["Offset of field: FT_Raster_Funcs_::raster_new"]
        [::std::mem::offset_of!(FT_Raster_Funcs_, raster_new) - 8usize];
    ["Offset of field: FT_Raster_Funcs_::raster_reset"]
        [::std::mem::offset_of!(FT_Raster_Funcs_, raster_reset) - 16usize];
    ["Offset of field: FT_Raster_Funcs_::raster_set_mode"]
        [::std::mem::offset_of!(FT_Raster_Funcs_, raster_set_mode) - 24usize];
    ["Offset of field: FT_Raster_Funcs_::raster_render"]
        [::std::mem::offset_of!(FT_Raster_Funcs_, raster_render) - 32usize];
    ["Offset of field: FT_Raster_Funcs_::raster_done"]
        [::std::mem::offset_of!(FT_Raster_Funcs_, raster_done) - 40usize];
};
pub type FT_Raster_Funcs = FT_Raster_Funcs_;
pub type FT_Bool = ::std::os::raw::c_uchar;
pub type FT_FWord = ::std::os::raw::c_short;
pub type FT_UFWord = ::std::os::raw::c_ushort;
pub type FT_Char = ::std::os::raw::c_schar;
pub type FT_Byte = ::std::os::raw::c_uchar;
pub type FT_Bytes = *const FT_Byte;
pub type FT_Tag = FT_UInt32;
pub type FT_String = ::std::os::raw::c_char;
pub type FT_Short = ::std::os::raw::c_short;
pub type FT_UShort = ::std::os::raw::c_ushort;
pub type FT_Int = ::std::os::raw::c_int;
pub type FT_UInt = ::std::os::raw::c_uint;
pub type FT_Long = ::std::os::raw::c_long;
pub type FT_ULong = ::std::os::raw::c_ulong;
pub type FT_F2Dot14 = ::std::os::raw::c_short;
pub type FT_F26Dot6 = ::std::os::raw::c_long;
pub type FT_Fixed = ::std::os::raw::c_long;
pub type FT_Error = ::std::os::raw::c_int;
pub type FT_Pointer = *mut ::std::os::raw::c_void;
pub type FT_Offset = usize;
pub type FT_PtrDist = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_UnitVector_ {
    pub x: FT_F2Dot14,
    pub y: FT_F2Dot14,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_UnitVector_"][::std::mem::size_of::<FT_UnitVector_>() - 4usize];
    ["Alignment of FT_UnitVector_"][::std::mem::align_of::<FT_UnitVector_>() - 2usize];
    ["Offset of field: FT_UnitVector_::x"][::std::mem::offset_of!(FT_UnitVector_, x) - 0usize];
    ["Offset of field: FT_UnitVector_::y"][::std::mem::offset_of!(FT_UnitVector_, y) - 2usize];
};
pub type FT_UnitVector = FT_UnitVector_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Matrix_ {
    pub xx: FT_Fixed,
    pub xy: FT_Fixed,
    pub yx: FT_Fixed,
    pub yy: FT_Fixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Matrix_"][::std::mem::size_of::<FT_Matrix_>() - 32usize];
    ["Alignment of FT_Matrix_"][::std::mem::align_of::<FT_Matrix_>() - 8usize];
    ["Offset of field: FT_Matrix_::xx"][::std::mem::offset_of!(FT_Matrix_, xx) - 0usize];
    ["Offset of field: FT_Matrix_::xy"][::std::mem::offset_of!(FT_Matrix_, xy) - 8usize];
    ["Offset of field: FT_Matrix_::yx"][::std::mem::offset_of!(FT_Matrix_, yx) - 16usize];
    ["Offset of field: FT_Matrix_::yy"][::std::mem::offset_of!(FT_Matrix_, yy) - 24usize];
};
pub type FT_Matrix = FT_Matrix_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Data_ {
    pub pointer: *const FT_Byte,
    pub length: FT_UInt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Data_"][::std::mem::size_of::<FT_Data_>() - 16usize];
    ["Alignment of FT_Data_"][::std::mem::align_of::<FT_Data_>() - 8usize];
    ["Offset of field: FT_Data_::pointer"][::std::mem::offset_of!(FT_Data_, pointer) - 0usize];
    ["Offset of field: FT_Data_::length"][::std::mem::offset_of!(FT_Data_, length) - 8usize];
};
pub type FT_Data = FT_Data_;
pub type FT_Generic_Finalizer =
    ::std::option::Option<unsafe extern "C" fn(object: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Generic_ {
    pub data: *mut ::std::os::raw::c_void,
    pub finalizer: FT_Generic_Finalizer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Generic_"][::std::mem::size_of::<FT_Generic_>() - 16usize];
    ["Alignment of FT_Generic_"][::std::mem::align_of::<FT_Generic_>() - 8usize];
    ["Offset of field: FT_Generic_::data"][::std::mem::offset_of!(FT_Generic_, data) - 0usize];
    ["Offset of field: FT_Generic_::finalizer"]
        [::std::mem::offset_of!(FT_Generic_, finalizer) - 8usize];
};
pub type FT_Generic = FT_Generic_;
pub type FT_ListNode = *mut FT_ListNodeRec_;
pub type FT_List = *mut FT_ListRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_ListNodeRec_ {
    pub prev: FT_ListNode,
    pub next: FT_ListNode,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_ListNodeRec_"][::std::mem::size_of::<FT_ListNodeRec_>() - 24usize];
    ["Alignment of FT_ListNodeRec_"][::std::mem::align_of::<FT_ListNodeRec_>() - 8usize];
    ["Offset of field: FT_ListNodeRec_::prev"]
        [::std::mem::offset_of!(FT_ListNodeRec_, prev) - 0usize];
    ["Offset of field: FT_ListNodeRec_::next"]
        [::std::mem::offset_of!(FT_ListNodeRec_, next) - 8usize];
    ["Offset of field: FT_ListNodeRec_::data"]
        [::std::mem::offset_of!(FT_ListNodeRec_, data) - 16usize];
};
pub type FT_ListNodeRec = FT_ListNodeRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_ListRec_ {
    pub head: FT_ListNode,
    pub tail: FT_ListNode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_ListRec_"][::std::mem::size_of::<FT_ListRec_>() - 16usize];
    ["Alignment of FT_ListRec_"][::std::mem::align_of::<FT_ListRec_>() - 8usize];
    ["Offset of field: FT_ListRec_::head"][::std::mem::offset_of!(FT_ListRec_, head) - 0usize];
    ["Offset of field: FT_ListRec_::tail"][::std::mem::offset_of!(FT_ListRec_, tail) - 8usize];
};
pub type FT_ListRec = FT_ListRec_;
pub const FT_Mod_Err_Base: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Autofit: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_BDF: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Bzip2: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Cache: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_CFF: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_CID: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Gzip: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_LZW: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_OTvalid: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_PCF: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_PFR: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_PSaux: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_PShinter: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_PSnames: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Raster: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_SFNT: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Smooth: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_TrueType: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Type1: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Type42: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Winfonts: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_GXvalid: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Sdf: _bindgen_ty_2 = 0;
pub const FT_Mod_Err_Max: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const FT_Err_Ok: _bindgen_ty_3 = 0;
pub const FT_Err_Cannot_Open_Resource: _bindgen_ty_3 = 1;
pub const FT_Err_Unknown_File_Format: _bindgen_ty_3 = 2;
pub const FT_Err_Invalid_File_Format: _bindgen_ty_3 = 3;
pub const FT_Err_Invalid_Version: _bindgen_ty_3 = 4;
pub const FT_Err_Lower_Module_Version: _bindgen_ty_3 = 5;
pub const FT_Err_Invalid_Argument: _bindgen_ty_3 = 6;
pub const FT_Err_Unimplemented_Feature: _bindgen_ty_3 = 7;
pub const FT_Err_Invalid_Table: _bindgen_ty_3 = 8;
pub const FT_Err_Invalid_Offset: _bindgen_ty_3 = 9;
pub const FT_Err_Array_Too_Large: _bindgen_ty_3 = 10;
pub const FT_Err_Missing_Module: _bindgen_ty_3 = 11;
pub const FT_Err_Missing_Property: _bindgen_ty_3 = 12;
pub const FT_Err_Invalid_Glyph_Index: _bindgen_ty_3 = 16;
pub const FT_Err_Invalid_Character_Code: _bindgen_ty_3 = 17;
pub const FT_Err_Invalid_Glyph_Format: _bindgen_ty_3 = 18;
pub const FT_Err_Cannot_Render_Glyph: _bindgen_ty_3 = 19;
pub const FT_Err_Invalid_Outline: _bindgen_ty_3 = 20;
pub const FT_Err_Invalid_Composite: _bindgen_ty_3 = 21;
pub const FT_Err_Too_Many_Hints: _bindgen_ty_3 = 22;
pub const FT_Err_Invalid_Pixel_Size: _bindgen_ty_3 = 23;
pub const FT_Err_Invalid_SVG_Document: _bindgen_ty_3 = 24;
pub const FT_Err_Invalid_Handle: _bindgen_ty_3 = 32;
pub const FT_Err_Invalid_Library_Handle: _bindgen_ty_3 = 33;
pub const FT_Err_Invalid_Driver_Handle: _bindgen_ty_3 = 34;
pub const FT_Err_Invalid_Face_Handle: _bindgen_ty_3 = 35;
pub const FT_Err_Invalid_Size_Handle: _bindgen_ty_3 = 36;
pub const FT_Err_Invalid_Slot_Handle: _bindgen_ty_3 = 37;
pub const FT_Err_Invalid_CharMap_Handle: _bindgen_ty_3 = 38;
pub const FT_Err_Invalid_Cache_Handle: _bindgen_ty_3 = 39;
pub const FT_Err_Invalid_Stream_Handle: _bindgen_ty_3 = 40;
pub const FT_Err_Too_Many_Drivers: _bindgen_ty_3 = 48;
pub const FT_Err_Too_Many_Extensions: _bindgen_ty_3 = 49;
pub const FT_Err_Out_Of_Memory: _bindgen_ty_3 = 64;
pub const FT_Err_Unlisted_Object: _bindgen_ty_3 = 65;
pub const FT_Err_Cannot_Open_Stream: _bindgen_ty_3 = 81;
pub const FT_Err_Invalid_Stream_Seek: _bindgen_ty_3 = 82;
pub const FT_Err_Invalid_Stream_Skip: _bindgen_ty_3 = 83;
pub const FT_Err_Invalid_Stream_Read: _bindgen_ty_3 = 84;
pub const FT_Err_Invalid_Stream_Operation: _bindgen_ty_3 = 85;
pub const FT_Err_Invalid_Frame_Operation: _bindgen_ty_3 = 86;
pub const FT_Err_Nested_Frame_Access: _bindgen_ty_3 = 87;
pub const FT_Err_Invalid_Frame_Read: _bindgen_ty_3 = 88;
pub const FT_Err_Raster_Uninitialized: _bindgen_ty_3 = 96;
pub const FT_Err_Raster_Corrupted: _bindgen_ty_3 = 97;
pub const FT_Err_Raster_Overflow: _bindgen_ty_3 = 98;
pub const FT_Err_Raster_Negative_Height: _bindgen_ty_3 = 99;
pub const FT_Err_Too_Many_Caches: _bindgen_ty_3 = 112;
pub const FT_Err_Invalid_Opcode: _bindgen_ty_3 = 128;
pub const FT_Err_Too_Few_Arguments: _bindgen_ty_3 = 129;
pub const FT_Err_Stack_Overflow: _bindgen_ty_3 = 130;
pub const FT_Err_Code_Overflow: _bindgen_ty_3 = 131;
pub const FT_Err_Bad_Argument: _bindgen_ty_3 = 132;
pub const FT_Err_Divide_By_Zero: _bindgen_ty_3 = 133;
pub const FT_Err_Invalid_Reference: _bindgen_ty_3 = 134;
pub const FT_Err_Debug_OpCode: _bindgen_ty_3 = 135;
pub const FT_Err_ENDF_In_Exec_Stream: _bindgen_ty_3 = 136;
pub const FT_Err_Nested_DEFS: _bindgen_ty_3 = 137;
pub const FT_Err_Invalid_CodeRange: _bindgen_ty_3 = 138;
pub const FT_Err_Execution_Too_Long: _bindgen_ty_3 = 139;
pub const FT_Err_Too_Many_Function_Defs: _bindgen_ty_3 = 140;
pub const FT_Err_Too_Many_Instruction_Defs: _bindgen_ty_3 = 141;
pub const FT_Err_Table_Missing: _bindgen_ty_3 = 142;
pub const FT_Err_Horiz_Header_Missing: _bindgen_ty_3 = 143;
pub const FT_Err_Locations_Missing: _bindgen_ty_3 = 144;
pub const FT_Err_Name_Table_Missing: _bindgen_ty_3 = 145;
pub const FT_Err_CMap_Table_Missing: _bindgen_ty_3 = 146;
pub const FT_Err_Hmtx_Table_Missing: _bindgen_ty_3 = 147;
pub const FT_Err_Post_Table_Missing: _bindgen_ty_3 = 148;
pub const FT_Err_Invalid_Horiz_Metrics: _bindgen_ty_3 = 149;
pub const FT_Err_Invalid_CharMap_Format: _bindgen_ty_3 = 150;
pub const FT_Err_Invalid_PPem: _bindgen_ty_3 = 151;
pub const FT_Err_Invalid_Vert_Metrics: _bindgen_ty_3 = 152;
pub const FT_Err_Could_Not_Find_Context: _bindgen_ty_3 = 153;
pub const FT_Err_Invalid_Post_Table_Format: _bindgen_ty_3 = 154;
pub const FT_Err_Invalid_Post_Table: _bindgen_ty_3 = 155;
pub const FT_Err_DEF_In_Glyf_Bytecode: _bindgen_ty_3 = 156;
pub const FT_Err_Missing_Bitmap: _bindgen_ty_3 = 157;
pub const FT_Err_Missing_SVG_Hooks: _bindgen_ty_3 = 158;
pub const FT_Err_Syntax_Error: _bindgen_ty_3 = 160;
pub const FT_Err_Stack_Underflow: _bindgen_ty_3 = 161;
pub const FT_Err_Ignore: _bindgen_ty_3 = 162;
pub const FT_Err_No_Unicode_Glyph_Name: _bindgen_ty_3 = 163;
pub const FT_Err_Glyph_Too_Big: _bindgen_ty_3 = 164;
pub const FT_Err_Missing_Startfont_Field: _bindgen_ty_3 = 176;
pub const FT_Err_Missing_Font_Field: _bindgen_ty_3 = 177;
pub const FT_Err_Missing_Size_Field: _bindgen_ty_3 = 178;
pub const FT_Err_Missing_Fontboundingbox_Field: _bindgen_ty_3 = 179;
pub const FT_Err_Missing_Chars_Field: _bindgen_ty_3 = 180;
pub const FT_Err_Missing_Startchar_Field: _bindgen_ty_3 = 181;
pub const FT_Err_Missing_Encoding_Field: _bindgen_ty_3 = 182;
pub const FT_Err_Missing_Bbx_Field: _bindgen_ty_3 = 183;
pub const FT_Err_Bbx_Too_Big: _bindgen_ty_3 = 184;
pub const FT_Err_Corrupted_Font_Header: _bindgen_ty_3 = 185;
pub const FT_Err_Corrupted_Font_Glyphs: _bindgen_ty_3 = 186;
pub const FT_Err_Max: _bindgen_ty_3 = 187;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn FT_Error_String(error_code: FT_Error) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Glyph_Metrics_ {
    pub width: FT_Pos,
    pub height: FT_Pos,
    pub horiBearingX: FT_Pos,
    pub horiBearingY: FT_Pos,
    pub horiAdvance: FT_Pos,
    pub vertBearingX: FT_Pos,
    pub vertBearingY: FT_Pos,
    pub vertAdvance: FT_Pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Glyph_Metrics_"][::std::mem::size_of::<FT_Glyph_Metrics_>() - 64usize];
    ["Alignment of FT_Glyph_Metrics_"][::std::mem::align_of::<FT_Glyph_Metrics_>() - 8usize];
    ["Offset of field: FT_Glyph_Metrics_::width"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, width) - 0usize];
    ["Offset of field: FT_Glyph_Metrics_::height"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, height) - 8usize];
    ["Offset of field: FT_Glyph_Metrics_::horiBearingX"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, horiBearingX) - 16usize];
    ["Offset of field: FT_Glyph_Metrics_::horiBearingY"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, horiBearingY) - 24usize];
    ["Offset of field: FT_Glyph_Metrics_::horiAdvance"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, horiAdvance) - 32usize];
    ["Offset of field: FT_Glyph_Metrics_::vertBearingX"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, vertBearingX) - 40usize];
    ["Offset of field: FT_Glyph_Metrics_::vertBearingY"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, vertBearingY) - 48usize];
    ["Offset of field: FT_Glyph_Metrics_::vertAdvance"]
        [::std::mem::offset_of!(FT_Glyph_Metrics_, vertAdvance) - 56usize];
};
pub type FT_Glyph_Metrics = FT_Glyph_Metrics_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Bitmap_Size_ {
    pub height: FT_Short,
    pub width: FT_Short,
    pub size: FT_Pos,
    pub x_ppem: FT_Pos,
    pub y_ppem: FT_Pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Bitmap_Size_"][::std::mem::size_of::<FT_Bitmap_Size_>() - 32usize];
    ["Alignment of FT_Bitmap_Size_"][::std::mem::align_of::<FT_Bitmap_Size_>() - 8usize];
    ["Offset of field: FT_Bitmap_Size_::height"]
        [::std::mem::offset_of!(FT_Bitmap_Size_, height) - 0usize];
    ["Offset of field: FT_Bitmap_Size_::width"]
        [::std::mem::offset_of!(FT_Bitmap_Size_, width) - 2usize];
    ["Offset of field: FT_Bitmap_Size_::size"]
        [::std::mem::offset_of!(FT_Bitmap_Size_, size) - 8usize];
    ["Offset of field: FT_Bitmap_Size_::x_ppem"]
        [::std::mem::offset_of!(FT_Bitmap_Size_, x_ppem) - 16usize];
    ["Offset of field: FT_Bitmap_Size_::y_ppem"]
        [::std::mem::offset_of!(FT_Bitmap_Size_, y_ppem) - 24usize];
};
pub type FT_Bitmap_Size = FT_Bitmap_Size_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_LibraryRec_ {
    _unused: [u8; 0],
}
pub type FT_Library = *mut FT_LibraryRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_ModuleRec_ {
    _unused: [u8; 0],
}
pub type FT_Module = *mut FT_ModuleRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_DriverRec_ {
    _unused: [u8; 0],
}
pub type FT_Driver = *mut FT_DriverRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_RendererRec_ {
    _unused: [u8; 0],
}
pub type FT_Renderer = *mut FT_RendererRec_;
pub type FT_Face = *mut FT_FaceRec_;
pub type FT_Size = *mut FT_SizeRec_;
pub type FT_GlyphSlot = *mut FT_GlyphSlotRec_;
pub type FT_CharMap = *mut FT_CharMapRec_;
pub const FT_Encoding__FT_ENCODING_NONE: FT_Encoding_ = 0;
pub const FT_Encoding__FT_ENCODING_MS_SYMBOL: FT_Encoding_ = 1937337698;
pub const FT_Encoding__FT_ENCODING_UNICODE: FT_Encoding_ = 1970170211;
pub const FT_Encoding__FT_ENCODING_SJIS: FT_Encoding_ = 1936353651;
pub const FT_Encoding__FT_ENCODING_PRC: FT_Encoding_ = 1734484000;
pub const FT_Encoding__FT_ENCODING_BIG5: FT_Encoding_ = 1651074869;
pub const FT_Encoding__FT_ENCODING_WANSUNG: FT_Encoding_ = 2002873971;
pub const FT_Encoding__FT_ENCODING_JOHAB: FT_Encoding_ = 1785686113;
pub const FT_Encoding__FT_ENCODING_GB2312: FT_Encoding_ = 1734484000;
pub const FT_Encoding__FT_ENCODING_MS_SJIS: FT_Encoding_ = 1936353651;
pub const FT_Encoding__FT_ENCODING_MS_GB2312: FT_Encoding_ = 1734484000;
pub const FT_Encoding__FT_ENCODING_MS_BIG5: FT_Encoding_ = 1651074869;
pub const FT_Encoding__FT_ENCODING_MS_WANSUNG: FT_Encoding_ = 2002873971;
pub const FT_Encoding__FT_ENCODING_MS_JOHAB: FT_Encoding_ = 1785686113;
pub const FT_Encoding__FT_ENCODING_ADOBE_STANDARD: FT_Encoding_ = 1094995778;
pub const FT_Encoding__FT_ENCODING_ADOBE_EXPERT: FT_Encoding_ = 1094992453;
pub const FT_Encoding__FT_ENCODING_ADOBE_CUSTOM: FT_Encoding_ = 1094992451;
pub const FT_Encoding__FT_ENCODING_ADOBE_LATIN_1: FT_Encoding_ = 1818326065;
pub const FT_Encoding__FT_ENCODING_OLD_LATIN_2: FT_Encoding_ = 1818326066;
pub const FT_Encoding__FT_ENCODING_APPLE_ROMAN: FT_Encoding_ = 1634889070;
pub type FT_Encoding_ = ::std::os::raw::c_uint;
pub use self::FT_Encoding_ as FT_Encoding;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_CharMapRec_ {
    pub face: FT_Face,
    pub encoding: FT_Encoding,
    pub platform_id: FT_UShort,
    pub encoding_id: FT_UShort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_CharMapRec_"][::std::mem::size_of::<FT_CharMapRec_>() - 16usize];
    ["Alignment of FT_CharMapRec_"][::std::mem::align_of::<FT_CharMapRec_>() - 8usize];
    ["Offset of field: FT_CharMapRec_::face"]
        [::std::mem::offset_of!(FT_CharMapRec_, face) - 0usize];
    ["Offset of field: FT_CharMapRec_::encoding"]
        [::std::mem::offset_of!(FT_CharMapRec_, encoding) - 8usize];
    ["Offset of field: FT_CharMapRec_::platform_id"]
        [::std::mem::offset_of!(FT_CharMapRec_, platform_id) - 12usize];
    ["Offset of field: FT_CharMapRec_::encoding_id"]
        [::std::mem::offset_of!(FT_CharMapRec_, encoding_id) - 14usize];
};
pub type FT_CharMapRec = FT_CharMapRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Face_InternalRec_ {
    _unused: [u8; 0],
}
pub type FT_Face_Internal = *mut FT_Face_InternalRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_FaceRec_ {
    pub num_faces: FT_Long,
    pub face_index: FT_Long,
    pub face_flags: FT_Long,
    pub style_flags: FT_Long,
    pub num_glyphs: FT_Long,
    pub family_name: *mut FT_String,
    pub style_name: *mut FT_String,
    pub num_fixed_sizes: FT_Int,
    pub available_sizes: *mut FT_Bitmap_Size,
    pub num_charmaps: FT_Int,
    pub charmaps: *mut FT_CharMap,
    pub generic: FT_Generic,
    pub bbox: FT_BBox,
    pub units_per_EM: FT_UShort,
    pub ascender: FT_Short,
    pub descender: FT_Short,
    pub height: FT_Short,
    pub max_advance_width: FT_Short,
    pub max_advance_height: FT_Short,
    pub underline_position: FT_Short,
    pub underline_thickness: FT_Short,
    pub glyph: FT_GlyphSlot,
    pub size: FT_Size,
    pub charmap: FT_CharMap,
    pub driver: FT_Driver,
    pub memory: FT_Memory,
    pub stream: FT_Stream,
    pub sizes_list: FT_ListRec,
    pub autohint: FT_Generic,
    pub extensions: *mut ::std::os::raw::c_void,
    pub internal: FT_Face_Internal,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_FaceRec_"][::std::mem::size_of::<FT_FaceRec_>() - 248usize];
    ["Alignment of FT_FaceRec_"][::std::mem::align_of::<FT_FaceRec_>() - 8usize];
    ["Offset of field: FT_FaceRec_::num_faces"]
        [::std::mem::offset_of!(FT_FaceRec_, num_faces) - 0usize];
    ["Offset of field: FT_FaceRec_::face_index"]
        [::std::mem::offset_of!(FT_FaceRec_, face_index) - 8usize];
    ["Offset of field: FT_FaceRec_::face_flags"]
        [::std::mem::offset_of!(FT_FaceRec_, face_flags) - 16usize];
    ["Offset of field: FT_FaceRec_::style_flags"]
        [::std::mem::offset_of!(FT_FaceRec_, style_flags) - 24usize];
    ["Offset of field: FT_FaceRec_::num_glyphs"]
        [::std::mem::offset_of!(FT_FaceRec_, num_glyphs) - 32usize];
    ["Offset of field: FT_FaceRec_::family_name"]
        [::std::mem::offset_of!(FT_FaceRec_, family_name) - 40usize];
    ["Offset of field: FT_FaceRec_::style_name"]
        [::std::mem::offset_of!(FT_FaceRec_, style_name) - 48usize];
    ["Offset of field: FT_FaceRec_::num_fixed_sizes"]
        [::std::mem::offset_of!(FT_FaceRec_, num_fixed_sizes) - 56usize];
    ["Offset of field: FT_FaceRec_::available_sizes"]
        [::std::mem::offset_of!(FT_FaceRec_, available_sizes) - 64usize];
    ["Offset of field: FT_FaceRec_::num_charmaps"]
        [::std::mem::offset_of!(FT_FaceRec_, num_charmaps) - 72usize];
    ["Offset of field: FT_FaceRec_::charmaps"]
        [::std::mem::offset_of!(FT_FaceRec_, charmaps) - 80usize];
    ["Offset of field: FT_FaceRec_::generic"]
        [::std::mem::offset_of!(FT_FaceRec_, generic) - 88usize];
    ["Offset of field: FT_FaceRec_::bbox"][::std::mem::offset_of!(FT_FaceRec_, bbox) - 104usize];
    ["Offset of field: FT_FaceRec_::units_per_EM"]
        [::std::mem::offset_of!(FT_FaceRec_, units_per_EM) - 136usize];
    ["Offset of field: FT_FaceRec_::ascender"]
        [::std::mem::offset_of!(FT_FaceRec_, ascender) - 138usize];
    ["Offset of field: FT_FaceRec_::descender"]
        [::std::mem::offset_of!(FT_FaceRec_, descender) - 140usize];
    ["Offset of field: FT_FaceRec_::height"]
        [::std::mem::offset_of!(FT_FaceRec_, height) - 142usize];
    ["Offset of field: FT_FaceRec_::max_advance_width"]
        [::std::mem::offset_of!(FT_FaceRec_, max_advance_width) - 144usize];
    ["Offset of field: FT_FaceRec_::max_advance_height"]
        [::std::mem::offset_of!(FT_FaceRec_, max_advance_height) - 146usize];
    ["Offset of field: FT_FaceRec_::underline_position"]
        [::std::mem::offset_of!(FT_FaceRec_, underline_position) - 148usize];
    ["Offset of field: FT_FaceRec_::underline_thickness"]
        [::std::mem::offset_of!(FT_FaceRec_, underline_thickness) - 150usize];
    ["Offset of field: FT_FaceRec_::glyph"][::std::mem::offset_of!(FT_FaceRec_, glyph) - 152usize];
    ["Offset of field: FT_FaceRec_::size"][::std::mem::offset_of!(FT_FaceRec_, size) - 160usize];
    ["Offset of field: FT_FaceRec_::charmap"]
        [::std::mem::offset_of!(FT_FaceRec_, charmap) - 168usize];
    ["Offset of field: FT_FaceRec_::driver"]
        [::std::mem::offset_of!(FT_FaceRec_, driver) - 176usize];
    ["Offset of field: FT_FaceRec_::memory"]
        [::std::mem::offset_of!(FT_FaceRec_, memory) - 184usize];
    ["Offset of field: FT_FaceRec_::stream"]
        [::std::mem::offset_of!(FT_FaceRec_, stream) - 192usize];
    ["Offset of field: FT_FaceRec_::sizes_list"]
        [::std::mem::offset_of!(FT_FaceRec_, sizes_list) - 200usize];
    ["Offset of field: FT_FaceRec_::autohint"]
        [::std::mem::offset_of!(FT_FaceRec_, autohint) - 216usize];
    ["Offset of field: FT_FaceRec_::extensions"]
        [::std::mem::offset_of!(FT_FaceRec_, extensions) - 232usize];
    ["Offset of field: FT_FaceRec_::internal"]
        [::std::mem::offset_of!(FT_FaceRec_, internal) - 240usize];
};
pub type FT_FaceRec = FT_FaceRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Size_InternalRec_ {
    _unused: [u8; 0],
}
pub type FT_Size_Internal = *mut FT_Size_InternalRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Size_Metrics_ {
    pub x_ppem: FT_UShort,
    pub y_ppem: FT_UShort,
    pub x_scale: FT_Fixed,
    pub y_scale: FT_Fixed,
    pub ascender: FT_Pos,
    pub descender: FT_Pos,
    pub height: FT_Pos,
    pub max_advance: FT_Pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Size_Metrics_"][::std::mem::size_of::<FT_Size_Metrics_>() - 56usize];
    ["Alignment of FT_Size_Metrics_"][::std::mem::align_of::<FT_Size_Metrics_>() - 8usize];
    ["Offset of field: FT_Size_Metrics_::x_ppem"]
        [::std::mem::offset_of!(FT_Size_Metrics_, x_ppem) - 0usize];
    ["Offset of field: FT_Size_Metrics_::y_ppem"]
        [::std::mem::offset_of!(FT_Size_Metrics_, y_ppem) - 2usize];
    ["Offset of field: FT_Size_Metrics_::x_scale"]
        [::std::mem::offset_of!(FT_Size_Metrics_, x_scale) - 8usize];
    ["Offset of field: FT_Size_Metrics_::y_scale"]
        [::std::mem::offset_of!(FT_Size_Metrics_, y_scale) - 16usize];
    ["Offset of field: FT_Size_Metrics_::ascender"]
        [::std::mem::offset_of!(FT_Size_Metrics_, ascender) - 24usize];
    ["Offset of field: FT_Size_Metrics_::descender"]
        [::std::mem::offset_of!(FT_Size_Metrics_, descender) - 32usize];
    ["Offset of field: FT_Size_Metrics_::height"]
        [::std::mem::offset_of!(FT_Size_Metrics_, height) - 40usize];
    ["Offset of field: FT_Size_Metrics_::max_advance"]
        [::std::mem::offset_of!(FT_Size_Metrics_, max_advance) - 48usize];
};
pub type FT_Size_Metrics = FT_Size_Metrics_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_SizeRec_ {
    pub face: FT_Face,
    pub generic: FT_Generic,
    pub metrics: FT_Size_Metrics,
    pub internal: FT_Size_Internal,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_SizeRec_"][::std::mem::size_of::<FT_SizeRec_>() - 88usize];
    ["Alignment of FT_SizeRec_"][::std::mem::align_of::<FT_SizeRec_>() - 8usize];
    ["Offset of field: FT_SizeRec_::face"][::std::mem::offset_of!(FT_SizeRec_, face) - 0usize];
    ["Offset of field: FT_SizeRec_::generic"]
        [::std::mem::offset_of!(FT_SizeRec_, generic) - 8usize];
    ["Offset of field: FT_SizeRec_::metrics"]
        [::std::mem::offset_of!(FT_SizeRec_, metrics) - 24usize];
    ["Offset of field: FT_SizeRec_::internal"]
        [::std::mem::offset_of!(FT_SizeRec_, internal) - 80usize];
};
pub type FT_SizeRec = FT_SizeRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_SubGlyphRec_ {
    _unused: [u8; 0],
}
pub type FT_SubGlyph = *mut FT_SubGlyphRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Slot_InternalRec_ {
    _unused: [u8; 0],
}
pub type FT_Slot_Internal = *mut FT_Slot_InternalRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_GlyphSlotRec_ {
    pub library: FT_Library,
    pub face: FT_Face,
    pub next: FT_GlyphSlot,
    pub glyph_index: FT_UInt,
    pub generic: FT_Generic,
    pub metrics: FT_Glyph_Metrics,
    pub linearHoriAdvance: FT_Fixed,
    pub linearVertAdvance: FT_Fixed,
    pub advance: FT_Vector,
    pub format: FT_Glyph_Format,
    pub bitmap: FT_Bitmap,
    pub bitmap_left: FT_Int,
    pub bitmap_top: FT_Int,
    pub outline: FT_Outline,
    pub num_subglyphs: FT_UInt,
    pub subglyphs: FT_SubGlyph,
    pub control_data: *mut ::std::os::raw::c_void,
    pub control_len: ::std::os::raw::c_long,
    pub lsb_delta: FT_Pos,
    pub rsb_delta: FT_Pos,
    pub other: *mut ::std::os::raw::c_void,
    pub internal: FT_Slot_Internal,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_GlyphSlotRec_"][::std::mem::size_of::<FT_GlyphSlotRec_>() - 304usize];
    ["Alignment of FT_GlyphSlotRec_"][::std::mem::align_of::<FT_GlyphSlotRec_>() - 8usize];
    ["Offset of field: FT_GlyphSlotRec_::library"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, library) - 0usize];
    ["Offset of field: FT_GlyphSlotRec_::face"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, face) - 8usize];
    ["Offset of field: FT_GlyphSlotRec_::next"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, next) - 16usize];
    ["Offset of field: FT_GlyphSlotRec_::glyph_index"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, glyph_index) - 24usize];
    ["Offset of field: FT_GlyphSlotRec_::generic"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, generic) - 32usize];
    ["Offset of field: FT_GlyphSlotRec_::metrics"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, metrics) - 48usize];
    ["Offset of field: FT_GlyphSlotRec_::linearHoriAdvance"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, linearHoriAdvance) - 112usize];
    ["Offset of field: FT_GlyphSlotRec_::linearVertAdvance"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, linearVertAdvance) - 120usize];
    ["Offset of field: FT_GlyphSlotRec_::advance"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, advance) - 128usize];
    ["Offset of field: FT_GlyphSlotRec_::format"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, format) - 144usize];
    ["Offset of field: FT_GlyphSlotRec_::bitmap"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, bitmap) - 152usize];
    ["Offset of field: FT_GlyphSlotRec_::bitmap_left"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, bitmap_left) - 192usize];
    ["Offset of field: FT_GlyphSlotRec_::bitmap_top"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, bitmap_top) - 196usize];
    ["Offset of field: FT_GlyphSlotRec_::outline"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, outline) - 200usize];
    ["Offset of field: FT_GlyphSlotRec_::num_subglyphs"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, num_subglyphs) - 240usize];
    ["Offset of field: FT_GlyphSlotRec_::subglyphs"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, subglyphs) - 248usize];
    ["Offset of field: FT_GlyphSlotRec_::control_data"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, control_data) - 256usize];
    ["Offset of field: FT_GlyphSlotRec_::control_len"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, control_len) - 264usize];
    ["Offset of field: FT_GlyphSlotRec_::lsb_delta"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, lsb_delta) - 272usize];
    ["Offset of field: FT_GlyphSlotRec_::rsb_delta"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, rsb_delta) - 280usize];
    ["Offset of field: FT_GlyphSlotRec_::other"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, other) - 288usize];
    ["Offset of field: FT_GlyphSlotRec_::internal"]
        [::std::mem::offset_of!(FT_GlyphSlotRec_, internal) - 296usize];
};
pub type FT_GlyphSlotRec = FT_GlyphSlotRec_;
extern "C" {
    pub fn FT_Init_FreeType(alibrary: *mut FT_Library) -> FT_Error;
}
extern "C" {
    pub fn FT_Done_FreeType(library: FT_Library) -> FT_Error;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Parameter_ {
    pub tag: FT_ULong,
    pub data: FT_Pointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Parameter_"][::std::mem::size_of::<FT_Parameter_>() - 16usize];
    ["Alignment of FT_Parameter_"][::std::mem::align_of::<FT_Parameter_>() - 8usize];
    ["Offset of field: FT_Parameter_::tag"][::std::mem::offset_of!(FT_Parameter_, tag) - 0usize];
    ["Offset of field: FT_Parameter_::data"][::std::mem::offset_of!(FT_Parameter_, data) - 8usize];
};
pub type FT_Parameter = FT_Parameter_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Open_Args_ {
    pub flags: FT_UInt,
    pub memory_base: *const FT_Byte,
    pub memory_size: FT_Long,
    pub pathname: *mut FT_String,
    pub stream: FT_Stream,
    pub driver: FT_Module,
    pub num_params: FT_Int,
    pub params: *mut FT_Parameter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Open_Args_"][::std::mem::size_of::<FT_Open_Args_>() - 64usize];
    ["Alignment of FT_Open_Args_"][::std::mem::align_of::<FT_Open_Args_>() - 8usize];
    ["Offset of field: FT_Open_Args_::flags"]
        [::std::mem::offset_of!(FT_Open_Args_, flags) - 0usize];
    ["Offset of field: FT_Open_Args_::memory_base"]
        [::std::mem::offset_of!(FT_Open_Args_, memory_base) - 8usize];
    ["Offset of field: FT_Open_Args_::memory_size"]
        [::std::mem::offset_of!(FT_Open_Args_, memory_size) - 16usize];
    ["Offset of field: FT_Open_Args_::pathname"]
        [::std::mem::offset_of!(FT_Open_Args_, pathname) - 24usize];
    ["Offset of field: FT_Open_Args_::stream"]
        [::std::mem::offset_of!(FT_Open_Args_, stream) - 32usize];
    ["Offset of field: FT_Open_Args_::driver"]
        [::std::mem::offset_of!(FT_Open_Args_, driver) - 40usize];
    ["Offset of field: FT_Open_Args_::num_params"]
        [::std::mem::offset_of!(FT_Open_Args_, num_params) - 48usize];
    ["Offset of field: FT_Open_Args_::params"]
        [::std::mem::offset_of!(FT_Open_Args_, params) - 56usize];
};
pub type FT_Open_Args = FT_Open_Args_;
extern "C" {
    pub fn FT_New_Face(
        library: FT_Library,
        filepathname: *const ::std::os::raw::c_char,
        face_index: FT_Long,
        aface: *mut FT_Face,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_New_Memory_Face(
        library: FT_Library,
        file_base: *const FT_Byte,
        file_size: FT_Long,
        face_index: FT_Long,
        aface: *mut FT_Face,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Open_Face(
        library: FT_Library,
        args: *const FT_Open_Args,
        face_index: FT_Long,
        aface: *mut FT_Face,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Attach_File(face: FT_Face, filepathname: *const ::std::os::raw::c_char) -> FT_Error;
}
extern "C" {
    pub fn FT_Attach_Stream(face: FT_Face, parameters: *const FT_Open_Args) -> FT_Error;
}
extern "C" {
    pub fn FT_Reference_Face(face: FT_Face) -> FT_Error;
}
extern "C" {
    pub fn FT_Done_Face(face: FT_Face) -> FT_Error;
}
extern "C" {
    pub fn FT_Select_Size(face: FT_Face, strike_index: FT_Int) -> FT_Error;
}
pub const FT_Size_Request_Type__FT_SIZE_REQUEST_TYPE_NOMINAL: FT_Size_Request_Type_ = 0;
pub const FT_Size_Request_Type__FT_SIZE_REQUEST_TYPE_REAL_DIM: FT_Size_Request_Type_ = 1;
pub const FT_Size_Request_Type__FT_SIZE_REQUEST_TYPE_BBOX: FT_Size_Request_Type_ = 2;
pub const FT_Size_Request_Type__FT_SIZE_REQUEST_TYPE_CELL: FT_Size_Request_Type_ = 3;
pub const FT_Size_Request_Type__FT_SIZE_REQUEST_TYPE_SCALES: FT_Size_Request_Type_ = 4;
pub const FT_Size_Request_Type__FT_SIZE_REQUEST_TYPE_MAX: FT_Size_Request_Type_ = 5;
pub type FT_Size_Request_Type_ = ::std::os::raw::c_uint;
pub use self::FT_Size_Request_Type_ as FT_Size_Request_Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Size_RequestRec_ {
    pub type_: FT_Size_Request_Type,
    pub width: FT_Long,
    pub height: FT_Long,
    pub horiResolution: FT_UInt,
    pub vertResolution: FT_UInt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FT_Size_RequestRec_"][::std::mem::size_of::<FT_Size_RequestRec_>() - 32usize];
    ["Alignment of FT_Size_RequestRec_"][::std::mem::align_of::<FT_Size_RequestRec_>() - 8usize];
    ["Offset of field: FT_Size_RequestRec_::type_"]
        [::std::mem::offset_of!(FT_Size_RequestRec_, type_) - 0usize];
    ["Offset of field: FT_Size_RequestRec_::width"]
        [::std::mem::offset_of!(FT_Size_RequestRec_, width) - 8usize];
    ["Offset of field: FT_Size_RequestRec_::height"]
        [::std::mem::offset_of!(FT_Size_RequestRec_, height) - 16usize];
    ["Offset of field: FT_Size_RequestRec_::horiResolution"]
        [::std::mem::offset_of!(FT_Size_RequestRec_, horiResolution) - 24usize];
    ["Offset of field: FT_Size_RequestRec_::vertResolution"]
        [::std::mem::offset_of!(FT_Size_RequestRec_, vertResolution) - 28usize];
};
pub type FT_Size_RequestRec = FT_Size_RequestRec_;
pub type FT_Size_Request = *mut FT_Size_RequestRec_;
extern "C" {
    pub fn FT_Request_Size(face: FT_Face, req: FT_Size_Request) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Char_Size(
        face: FT_Face,
        char_width: FT_F26Dot6,
        char_height: FT_F26Dot6,
        horz_resolution: FT_UInt,
        vert_resolution: FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Pixel_Sizes(
        face: FT_Face,
        pixel_width: FT_UInt,
        pixel_height: FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Load_Glyph(face: FT_Face, glyph_index: FT_UInt, load_flags: FT_Int32) -> FT_Error;
}
extern "C" {
    pub fn FT_Load_Char(face: FT_Face, char_code: FT_ULong, load_flags: FT_Int32) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Transform(face: FT_Face, matrix: *mut FT_Matrix, delta: *mut FT_Vector);
}
extern "C" {
    pub fn FT_Get_Transform(face: FT_Face, matrix: *mut FT_Matrix, delta: *mut FT_Vector);
}
pub const FT_Render_Mode__FT_RENDER_MODE_NORMAL: FT_Render_Mode_ = 0;
pub const FT_Render_Mode__FT_RENDER_MODE_LIGHT: FT_Render_Mode_ = 1;
pub const FT_Render_Mode__FT_RENDER_MODE_MONO: FT_Render_Mode_ = 2;
pub const FT_Render_Mode__FT_RENDER_MODE_LCD: FT_Render_Mode_ = 3;
pub const FT_Render_Mode__FT_RENDER_MODE_LCD_V: FT_Render_Mode_ = 4;
pub const FT_Render_Mode__FT_RENDER_MODE_SDF: FT_Render_Mode_ = 5;
pub const FT_Render_Mode__FT_RENDER_MODE_MAX: FT_Render_Mode_ = 6;
pub type FT_Render_Mode_ = ::std::os::raw::c_uint;
pub use self::FT_Render_Mode_ as FT_Render_Mode;
extern "C" {
    pub fn FT_Render_Glyph(slot: FT_GlyphSlot, render_mode: FT_Render_Mode) -> FT_Error;
}
pub const FT_Kerning_Mode__FT_KERNING_DEFAULT: FT_Kerning_Mode_ = 0;
pub const FT_Kerning_Mode__FT_KERNING_UNFITTED: FT_Kerning_Mode_ = 1;
pub const FT_Kerning_Mode__FT_KERNING_UNSCALED: FT_Kerning_Mode_ = 2;
pub type FT_Kerning_Mode_ = ::std::os::raw::c_uint;
pub use self::FT_Kerning_Mode_ as FT_Kerning_Mode;
extern "C" {
    pub fn FT_Get_Kerning(
        face: FT_Face,
        left_glyph: FT_UInt,
        right_glyph: FT_UInt,
        kern_mode: FT_UInt,
        akerning: *mut FT_Vector,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Track_Kerning(
        face: FT_Face,
        point_size: FT_Fixed,
        degree: FT_Int,
        akerning: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Select_Charmap(face: FT_Face, encoding: FT_Encoding) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Charmap(face: FT_Face, charmap: FT_CharMap) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Charmap_Index(charmap: FT_CharMap) -> FT_Int;
}
extern "C" {
    pub fn FT_Get_Char_Index(face: FT_Face, charcode: FT_ULong) -> FT_UInt;
}
extern "C" {
    pub fn FT_Get_First_Char(face: FT_Face, agindex: *mut FT_UInt) -> FT_ULong;
}
extern "C" {
    pub fn FT_Get_Next_Char(face: FT_Face, char_code: FT_ULong, agindex: *mut FT_UInt) -> FT_ULong;
}
extern "C" {
    pub fn FT_Face_Properties(
        face: FT_Face,
        num_properties: FT_UInt,
        properties: *mut FT_Parameter,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Name_Index(face: FT_Face, glyph_name: *const FT_String) -> FT_UInt;
}
extern "C" {
    pub fn FT_Get_Glyph_Name(
        face: FT_Face,
        glyph_index: FT_UInt,
        buffer: FT_Pointer,
        buffer_max: FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Postscript_Name(face: FT_Face) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FT_Get_SubGlyph_Info(
        glyph: FT_GlyphSlot,
        sub_index: FT_UInt,
        p_index: *mut FT_Int,
        p_flags: *mut FT_UInt,
        p_arg1: *mut FT_Int,
        p_arg2: *mut FT_Int,
        p_transform: *mut FT_Matrix,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_FSType_Flags(face: FT_Face) -> FT_UShort;
}
extern "C" {
    pub fn FT_Face_GetCharVariantIndex(
        face: FT_Face,
        charcode: FT_ULong,
        variantSelector: FT_ULong,
    ) -> FT_UInt;
}
extern "C" {
    pub fn FT_Face_GetCharVariantIsDefault(
        face: FT_Face,
        charcode: FT_ULong,
        variantSelector: FT_ULong,
    ) -> FT_Int;
}
extern "C" {
    pub fn FT_Face_GetVariantSelectors(face: FT_Face) -> *mut FT_UInt32;
}
extern "C" {
    pub fn FT_Face_GetVariantsOfChar(face: FT_Face, charcode: FT_ULong) -> *mut FT_UInt32;
}
extern "C" {
    pub fn FT_Face_GetCharsOfVariant(face: FT_Face, variantSelector: FT_ULong) -> *mut FT_UInt32;
}
extern "C" {
    pub fn FT_MulDiv(a: FT_Long, b: FT_Long, c: FT_Long) -> FT_Long;
}
extern "C" {
    pub fn FT_MulFix(a: FT_Long, b: FT_Long) -> FT_Long;
}
extern "C" {
    pub fn FT_DivFix(a: FT_Long, b: FT_Long) -> FT_Long;
}
extern "C" {
    pub fn FT_RoundFix(a: FT_Fixed) -> FT_Fixed;
}
extern "C" {
    pub fn FT_CeilFix(a: FT_Fixed) -> FT_Fixed;
}
extern "C" {
    pub fn FT_FloorFix(a: FT_Fixed) -> FT_Fixed;
}
extern "C" {
    pub fn FT_Vector_Transform(vector: *mut FT_Vector, matrix: *const FT_Matrix);
}
extern "C" {
    pub fn FT_Library_Version(
        library: FT_Library,
        amajor: *mut FT_Int,
        aminor: *mut FT_Int,
        apatch: *mut FT_Int,
    );
}
extern "C" {
    pub fn FT_Face_CheckTrueTypePatents(face: FT_Face) -> FT_Bool;
}
extern "C" {
    pub fn FT_Face_SetUnpatentedHinting(face: FT_Face, value: FT_Bool) -> FT_Bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::std::mem::size_of::<stat>() - 144usize];
    ["Alignment of stat"][::std::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::std::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_ino"][::std::mem::offset_of!(stat, st_ino) - 8usize];
    ["Offset of field: stat::st_nlink"][::std::mem::offset_of!(stat, st_nlink) - 16usize];
    ["Offset of field: stat::st_mode"][::std::mem::offset_of!(stat, st_mode) - 24usize];
    ["Offset of field: stat::st_uid"][::std::mem::offset_of!(stat, st_uid) - 28usize];
    ["Offset of field: stat::st_gid"][::std::mem::offset_of!(stat, st_gid) - 32usize];
    ["Offset of field: stat::__pad0"][::std::mem::offset_of!(stat, __pad0) - 36usize];
    ["Offset of field: stat::st_rdev"][::std::mem::offset_of!(stat, st_rdev) - 40usize];
    ["Offset of field: stat::st_size"][::std::mem::offset_of!(stat, st_size) - 48usize];
    ["Offset of field: stat::st_blksize"][::std::mem::offset_of!(stat, st_blksize) - 56usize];
    ["Offset of field: stat::st_blocks"][::std::mem::offset_of!(stat, st_blocks) - 64usize];
    ["Offset of field: stat::st_atim"][::std::mem::offset_of!(stat, st_atim) - 72usize];
    ["Offset of field: stat::st_mtim"][::std::mem::offset_of!(stat, st_mtim) - 88usize];
    ["Offset of field: stat::st_ctim"][::std::mem::offset_of!(stat, st_ctim) - 104usize];
    ["Offset of field: stat::__glibc_reserved"]
        [::std::mem::offset_of!(stat, __glibc_reserved) - 120usize];
};
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
pub type FcChar8 = ::std::os::raw::c_uchar;
pub type FcChar16 = ::std::os::raw::c_ushort;
pub type FcChar32 = ::std::os::raw::c_uint;
pub type FcBool = ::std::os::raw::c_int;
pub const _FcType_FcTypeUnknown: _FcType = -1;
pub const _FcType_FcTypeVoid: _FcType = 0;
pub const _FcType_FcTypeInteger: _FcType = 1;
pub const _FcType_FcTypeDouble: _FcType = 2;
pub const _FcType_FcTypeString: _FcType = 3;
pub const _FcType_FcTypeBool: _FcType = 4;
pub const _FcType_FcTypeMatrix: _FcType = 5;
pub const _FcType_FcTypeCharSet: _FcType = 6;
pub const _FcType_FcTypeFTFace: _FcType = 7;
pub const _FcType_FcTypeLangSet: _FcType = 8;
pub const _FcType_FcTypeRange: _FcType = 9;
pub type _FcType = ::std::os::raw::c_int;
pub use self::_FcType as FcType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcMatrix {
    pub xx: f64,
    pub xy: f64,
    pub yx: f64,
    pub yy: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcMatrix"][::std::mem::size_of::<_FcMatrix>() - 32usize];
    ["Alignment of _FcMatrix"][::std::mem::align_of::<_FcMatrix>() - 8usize];
    ["Offset of field: _FcMatrix::xx"][::std::mem::offset_of!(_FcMatrix, xx) - 0usize];
    ["Offset of field: _FcMatrix::xy"][::std::mem::offset_of!(_FcMatrix, xy) - 8usize];
    ["Offset of field: _FcMatrix::yx"][::std::mem::offset_of!(_FcMatrix, yx) - 16usize];
    ["Offset of field: _FcMatrix::yy"][::std::mem::offset_of!(_FcMatrix, yy) - 24usize];
};
pub type FcMatrix = _FcMatrix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcCharSet {
    _unused: [u8; 0],
}
pub type FcCharSet = _FcCharSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcObjectType {
    pub object: *mut ::std::os::raw::c_char,
    pub type_: FcType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcObjectType"][::std::mem::size_of::<_FcObjectType>() - 16usize];
    ["Alignment of _FcObjectType"][::std::mem::align_of::<_FcObjectType>() - 8usize];
    ["Offset of field: _FcObjectType::object"]
        [::std::mem::offset_of!(_FcObjectType, object) - 0usize];
    ["Offset of field: _FcObjectType::type_"]
        [::std::mem::offset_of!(_FcObjectType, type_) - 8usize];
};
pub type FcObjectType = _FcObjectType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcConstant {
    pub name: *const FcChar8,
    pub object: *const ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcConstant"][::std::mem::size_of::<_FcConstant>() - 24usize];
    ["Alignment of _FcConstant"][::std::mem::align_of::<_FcConstant>() - 8usize];
    ["Offset of field: _FcConstant::name"][::std::mem::offset_of!(_FcConstant, name) - 0usize];
    ["Offset of field: _FcConstant::object"][::std::mem::offset_of!(_FcConstant, object) - 8usize];
    ["Offset of field: _FcConstant::value"][::std::mem::offset_of!(_FcConstant, value) - 16usize];
};
pub type FcConstant = _FcConstant;
pub const _FcResult_FcResultMatch: _FcResult = 0;
pub const _FcResult_FcResultNoMatch: _FcResult = 1;
pub const _FcResult_FcResultTypeMismatch: _FcResult = 2;
pub const _FcResult_FcResultNoId: _FcResult = 3;
pub const _FcResult_FcResultOutOfMemory: _FcResult = 4;
pub type _FcResult = ::std::os::raw::c_uint;
pub use self::_FcResult as FcResult;
pub const _FcValueBinding_FcValueBindingWeak: _FcValueBinding = 0;
pub const _FcValueBinding_FcValueBindingStrong: _FcValueBinding = 1;
pub const _FcValueBinding_FcValueBindingSame: _FcValueBinding = 2;
pub const _FcValueBinding_FcValueBindingEnd: _FcValueBinding = 2147483647;
pub type _FcValueBinding = ::std::os::raw::c_uint;
pub use self::_FcValueBinding as FcValueBinding;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcPattern {
    _unused: [u8; 0],
}
pub type FcPattern = _FcPattern;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcPatternIter {
    pub dummy1: *mut ::std::os::raw::c_void,
    pub dummy2: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcPatternIter"][::std::mem::size_of::<_FcPatternIter>() - 16usize];
    ["Alignment of _FcPatternIter"][::std::mem::align_of::<_FcPatternIter>() - 8usize];
    ["Offset of field: _FcPatternIter::dummy1"]
        [::std::mem::offset_of!(_FcPatternIter, dummy1) - 0usize];
    ["Offset of field: _FcPatternIter::dummy2"]
        [::std::mem::offset_of!(_FcPatternIter, dummy2) - 8usize];
};
pub type FcPatternIter = _FcPatternIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcLangSet {
    _unused: [u8; 0],
}
pub type FcLangSet = _FcLangSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcRange {
    _unused: [u8; 0],
}
pub type FcRange = _FcRange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FcValue {
    pub type_: FcType,
    pub u: _FcValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FcValue__bindgen_ty_1 {
    pub s: *const FcChar8,
    pub i: ::std::os::raw::c_int,
    pub b: FcBool,
    pub d: f64,
    pub m: *const FcMatrix,
    pub c: *const FcCharSet,
    pub f: *mut ::std::os::raw::c_void,
    pub l: *const FcLangSet,
    pub r: *const FcRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcValue__bindgen_ty_1"][::std::mem::size_of::<_FcValue__bindgen_ty_1>() - 8usize];
    ["Alignment of _FcValue__bindgen_ty_1"]
        [::std::mem::align_of::<_FcValue__bindgen_ty_1>() - 8usize];
    ["Offset of field: _FcValue__bindgen_ty_1::s"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, s) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::i"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, i) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::b"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, b) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::d"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, d) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::m"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, m) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::c"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, c) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::f"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, f) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::l"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, l) - 0usize];
    ["Offset of field: _FcValue__bindgen_ty_1::r"]
        [::std::mem::offset_of!(_FcValue__bindgen_ty_1, r) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcValue"][::std::mem::size_of::<_FcValue>() - 16usize];
    ["Alignment of _FcValue"][::std::mem::align_of::<_FcValue>() - 8usize];
    ["Offset of field: _FcValue::type_"][::std::mem::offset_of!(_FcValue, type_) - 0usize];
    ["Offset of field: _FcValue::u"][::std::mem::offset_of!(_FcValue, u) - 8usize];
};
pub type FcValue = _FcValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcFontSet {
    pub nfont: ::std::os::raw::c_int,
    pub sfont: ::std::os::raw::c_int,
    pub fonts: *mut *mut FcPattern,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcFontSet"][::std::mem::size_of::<_FcFontSet>() - 16usize];
    ["Alignment of _FcFontSet"][::std::mem::align_of::<_FcFontSet>() - 8usize];
    ["Offset of field: _FcFontSet::nfont"][::std::mem::offset_of!(_FcFontSet, nfont) - 0usize];
    ["Offset of field: _FcFontSet::sfont"][::std::mem::offset_of!(_FcFontSet, sfont) - 4usize];
    ["Offset of field: _FcFontSet::fonts"][::std::mem::offset_of!(_FcFontSet, fonts) - 8usize];
};
pub type FcFontSet = _FcFontSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcObjectSet {
    pub nobject: ::std::os::raw::c_int,
    pub sobject: ::std::os::raw::c_int,
    pub objects: *mut *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcObjectSet"][::std::mem::size_of::<_FcObjectSet>() - 16usize];
    ["Alignment of _FcObjectSet"][::std::mem::align_of::<_FcObjectSet>() - 8usize];
    ["Offset of field: _FcObjectSet::nobject"]
        [::std::mem::offset_of!(_FcObjectSet, nobject) - 0usize];
    ["Offset of field: _FcObjectSet::sobject"]
        [::std::mem::offset_of!(_FcObjectSet, sobject) - 4usize];
    ["Offset of field: _FcObjectSet::objects"]
        [::std::mem::offset_of!(_FcObjectSet, objects) - 8usize];
};
pub type FcObjectSet = _FcObjectSet;
pub const _FcMatchKind_FcMatchPattern: _FcMatchKind = 0;
pub const _FcMatchKind_FcMatchFont: _FcMatchKind = 1;
pub const _FcMatchKind_FcMatchScan: _FcMatchKind = 2;
pub const _FcMatchKind_FcMatchKindEnd: _FcMatchKind = 3;
pub const _FcMatchKind_FcMatchKindBegin: _FcMatchKind = 0;
pub type _FcMatchKind = ::std::os::raw::c_uint;
pub use self::_FcMatchKind as FcMatchKind;
pub const _FcLangResult_FcLangEqual: _FcLangResult = 0;
pub const _FcLangResult_FcLangDifferentCountry: _FcLangResult = 1;
pub const _FcLangResult_FcLangDifferentTerritory: _FcLangResult = 1;
pub const _FcLangResult_FcLangDifferentLang: _FcLangResult = 2;
pub type _FcLangResult = ::std::os::raw::c_uint;
pub use self::_FcLangResult as FcLangResult;
pub const _FcSetName_FcSetSystem: _FcSetName = 0;
pub const _FcSetName_FcSetApplication: _FcSetName = 1;
pub type _FcSetName = ::std::os::raw::c_uint;
pub use self::_FcSetName as FcSetName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcConfigFileInfoIter {
    pub dummy1: *mut ::std::os::raw::c_void,
    pub dummy2: *mut ::std::os::raw::c_void,
    pub dummy3: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FcConfigFileInfoIter"][::std::mem::size_of::<_FcConfigFileInfoIter>() - 24usize];
    ["Alignment of _FcConfigFileInfoIter"]
        [::std::mem::align_of::<_FcConfigFileInfoIter>() - 8usize];
    ["Offset of field: _FcConfigFileInfoIter::dummy1"]
        [::std::mem::offset_of!(_FcConfigFileInfoIter, dummy1) - 0usize];
    ["Offset of field: _FcConfigFileInfoIter::dummy2"]
        [::std::mem::offset_of!(_FcConfigFileInfoIter, dummy2) - 8usize];
    ["Offset of field: _FcConfigFileInfoIter::dummy3"]
        [::std::mem::offset_of!(_FcConfigFileInfoIter, dummy3) - 16usize];
};
pub type FcConfigFileInfoIter = _FcConfigFileInfoIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcAtomic {
    _unused: [u8; 0],
}
pub type FcAtomic = _FcAtomic;
pub const FcEndian_FcEndianBig: FcEndian = 0;
pub const FcEndian_FcEndianLittle: FcEndian = 1;
pub type FcEndian = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcConfig {
    _unused: [u8; 0],
}
pub type FcConfig = _FcConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcGlobalCache {
    _unused: [u8; 0],
}
pub type FcFileCache = _FcGlobalCache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcBlanks {
    _unused: [u8; 0],
}
pub type FcBlanks = _FcBlanks;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcStrList {
    _unused: [u8; 0],
}
pub type FcStrList = _FcStrList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcStrSet {
    _unused: [u8; 0],
}
pub type FcStrSet = _FcStrSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcCache {
    _unused: [u8; 0],
}
pub type FcCache = _FcCache;
extern "C" {
    pub fn FcBlanksCreate() -> *mut FcBlanks;
}
extern "C" {
    pub fn FcBlanksDestroy(b: *mut FcBlanks);
}
extern "C" {
    pub fn FcBlanksAdd(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
}
extern "C" {
    pub fn FcBlanksIsMember(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
}
extern "C" {
    pub fn FcCacheDir(c: *const FcCache) -> *const FcChar8;
}
extern "C" {
    pub fn FcCacheCopySet(c: *const FcCache) -> *mut FcFontSet;
}
extern "C" {
    pub fn FcCacheSubdir(c: *const FcCache, i: ::std::os::raw::c_int) -> *const FcChar8;
}
extern "C" {
    pub fn FcCacheNumSubdir(c: *const FcCache) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcCacheNumFont(c: *const FcCache) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcDirCacheUnlink(dir: *const FcChar8, config: *mut FcConfig) -> FcBool;
}
extern "C" {
    pub fn FcDirCacheValid(cache_file: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcDirCacheClean(cache_dir: *const FcChar8, verbose: FcBool) -> FcBool;
}
extern "C" {
    pub fn FcCacheCreateTagFile(config: *mut FcConfig);
}
extern "C" {
    pub fn FcDirCacheCreateUUID(dir: *mut FcChar8, force: FcBool, config: *mut FcConfig) -> FcBool;
}
extern "C" {
    pub fn FcDirCacheDeleteUUID(dir: *const FcChar8, config: *mut FcConfig) -> FcBool;
}
extern "C" {
    pub fn FcConfigHome() -> *mut FcChar8;
}
extern "C" {
    pub fn FcConfigEnableHome(enable: FcBool) -> FcBool;
}
extern "C" {
    pub fn FcConfigGetFilename(config: *mut FcConfig, url: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcConfigFilename(url: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcConfigCreate() -> *mut FcConfig;
}
extern "C" {
    pub fn FcConfigReference(config: *mut FcConfig) -> *mut FcConfig;
}
extern "C" {
    pub fn FcConfigDestroy(config: *mut FcConfig);
}
extern "C" {
    pub fn FcConfigSetCurrent(config: *mut FcConfig) -> FcBool;
}
extern "C" {
    pub fn FcConfigGetCurrent() -> *mut FcConfig;
}
extern "C" {
    pub fn FcConfigUptoDate(config: *mut FcConfig) -> FcBool;
}
extern "C" {
    pub fn FcConfigBuildFonts(config: *mut FcConfig) -> FcBool;
}
extern "C" {
    pub fn FcConfigGetFontDirs(config: *mut FcConfig) -> *mut FcStrList;
}
extern "C" {
    pub fn FcConfigGetConfigDirs(config: *mut FcConfig) -> *mut FcStrList;
}
extern "C" {
    pub fn FcConfigGetConfigFiles(config: *mut FcConfig) -> *mut FcStrList;
}
extern "C" {
    pub fn FcConfigGetCache(config: *mut FcConfig) -> *mut FcChar8;
}
extern "C" {
    pub fn FcConfigGetBlanks(config: *mut FcConfig) -> *mut FcBlanks;
}
extern "C" {
    pub fn FcConfigGetCacheDirs(config: *mut FcConfig) -> *mut FcStrList;
}
extern "C" {
    pub fn FcConfigGetRescanInterval(config: *mut FcConfig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcConfigSetRescanInterval(
        config: *mut FcConfig,
        rescanInterval: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcConfigGetFonts(config: *mut FcConfig, set: FcSetName) -> *mut FcFontSet;
}
extern "C" {
    pub fn FcConfigAppFontAddFile(config: *mut FcConfig, file: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcConfigAppFontAddDir(config: *mut FcConfig, dir: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcConfigAppFontClear(config: *mut FcConfig);
}
extern "C" {
    pub fn FcConfigSubstituteWithPat(
        config: *mut FcConfig,
        p: *mut FcPattern,
        p_pat: *mut FcPattern,
        kind: FcMatchKind,
    ) -> FcBool;
}
extern "C" {
    pub fn FcConfigSubstitute(
        config: *mut FcConfig,
        p: *mut FcPattern,
        kind: FcMatchKind,
    ) -> FcBool;
}
extern "C" {
    pub fn FcConfigGetSysRoot(config: *const FcConfig) -> *const FcChar8;
}
extern "C" {
    pub fn FcConfigSetSysRoot(config: *mut FcConfig, sysroot: *const FcChar8);
}
extern "C" {
    pub fn FcConfigFileInfoIterInit(config: *mut FcConfig, iter: *mut FcConfigFileInfoIter);
}
extern "C" {
    pub fn FcConfigFileInfoIterNext(
        config: *mut FcConfig,
        iter: *mut FcConfigFileInfoIter,
    ) -> FcBool;
}
extern "C" {
    pub fn FcConfigFileInfoIterGet(
        config: *mut FcConfig,
        iter: *mut FcConfigFileInfoIter,
        name: *mut *mut FcChar8,
        description: *mut *mut FcChar8,
        enabled: *mut FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcCharSetCreate() -> *mut FcCharSet;
}
extern "C" {
    pub fn FcCharSetNew() -> *mut FcCharSet;
}
extern "C" {
    pub fn FcCharSetDestroy(fcs: *mut FcCharSet);
}
extern "C" {
    pub fn FcCharSetAddChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
}
extern "C" {
    pub fn FcCharSetDelChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
}
extern "C" {
    pub fn FcCharSetCopy(src: *mut FcCharSet) -> *mut FcCharSet;
}
extern "C" {
    pub fn FcCharSetEqual(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
}
extern "C" {
    pub fn FcCharSetIntersect(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
}
extern "C" {
    pub fn FcCharSetUnion(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
}
extern "C" {
    pub fn FcCharSetSubtract(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
}
extern "C" {
    pub fn FcCharSetMerge(a: *mut FcCharSet, b: *const FcCharSet, changed: *mut FcBool) -> FcBool;
}
extern "C" {
    pub fn FcCharSetHasChar(fcs: *const FcCharSet, ucs4: FcChar32) -> FcBool;
}
extern "C" {
    pub fn FcCharSetCount(a: *const FcCharSet) -> FcChar32;
}
extern "C" {
    pub fn FcCharSetIntersectCount(a: *const FcCharSet, b: *const FcCharSet) -> FcChar32;
}
extern "C" {
    pub fn FcCharSetSubtractCount(a: *const FcCharSet, b: *const FcCharSet) -> FcChar32;
}
extern "C" {
    pub fn FcCharSetIsSubset(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
}
extern "C" {
    pub fn FcCharSetFirstPage(
        a: *const FcCharSet,
        map: *mut FcChar32,
        next: *mut FcChar32,
    ) -> FcChar32;
}
extern "C" {
    pub fn FcCharSetNextPage(
        a: *const FcCharSet,
        map: *mut FcChar32,
        next: *mut FcChar32,
    ) -> FcChar32;
}
extern "C" {
    pub fn FcCharSetCoverage(
        a: *const FcCharSet,
        page: FcChar32,
        result: *mut FcChar32,
    ) -> FcChar32;
}
extern "C" {
    pub fn FcValuePrint(v: FcValue);
}
extern "C" {
    pub fn FcPatternPrint(p: *const FcPattern);
}
extern "C" {
    pub fn FcFontSetPrint(s: *const FcFontSet);
}
extern "C" {
    pub fn FcGetDefaultLangs() -> *mut FcStrSet;
}
extern "C" {
    pub fn FcDefaultSubstitute(pattern: *mut FcPattern);
}
extern "C" {
    pub fn FcFileIsDir(file: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcFileScan(
        set: *mut FcFontSet,
        dirs: *mut FcStrSet,
        cache: *mut FcFileCache,
        blanks: *mut FcBlanks,
        file: *const FcChar8,
        force: FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcDirScan(
        set: *mut FcFontSet,
        dirs: *mut FcStrSet,
        cache: *mut FcFileCache,
        blanks: *mut FcBlanks,
        dir: *const FcChar8,
        force: FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcDirSave(set: *mut FcFontSet, dirs: *mut FcStrSet, dir: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcDirCacheLoad(
        dir: *const FcChar8,
        config: *mut FcConfig,
        cache_file: *mut *mut FcChar8,
    ) -> *mut FcCache;
}
extern "C" {
    pub fn FcDirCacheRescan(dir: *const FcChar8, config: *mut FcConfig) -> *mut FcCache;
}
extern "C" {
    pub fn FcDirCacheRead(
        dir: *const FcChar8,
        force: FcBool,
        config: *mut FcConfig,
    ) -> *mut FcCache;
}
extern "C" {
    pub fn FcDirCacheLoadFile(cache_file: *const FcChar8, file_stat: *mut stat) -> *mut FcCache;
}
extern "C" {
    pub fn FcDirCacheUnload(cache: *mut FcCache);
}
extern "C" {
    pub fn FcFreeTypeQuery(
        file: *const FcChar8,
        id: ::std::os::raw::c_uint,
        blanks: *mut FcBlanks,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut FcPattern;
}
extern "C" {
    pub fn FcFreeTypeQueryAll(
        file: *const FcChar8,
        id: ::std::os::raw::c_uint,
        blanks: *mut FcBlanks,
        count: *mut ::std::os::raw::c_int,
        set: *mut FcFontSet,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn FcFontSetCreate() -> *mut FcFontSet;
}
extern "C" {
    pub fn FcFontSetDestroy(s: *mut FcFontSet);
}
extern "C" {
    pub fn FcFontSetAdd(s: *mut FcFontSet, font: *mut FcPattern) -> FcBool;
}
extern "C" {
    pub fn FcInitLoadConfig() -> *mut FcConfig;
}
extern "C" {
    pub fn FcInitLoadConfigAndFonts() -> *mut FcConfig;
}
extern "C" {
    pub fn FcInit() -> FcBool;
}
extern "C" {
    pub fn FcFini();
}
extern "C" {
    pub fn FcGetVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcInitReinitialize() -> FcBool;
}
extern "C" {
    pub fn FcInitBringUptoDate() -> FcBool;
}
extern "C" {
    pub fn FcGetLangs() -> *mut FcStrSet;
}
extern "C" {
    pub fn FcLangNormalize(lang: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcLangGetCharSet(lang: *const FcChar8) -> *const FcCharSet;
}
extern "C" {
    pub fn FcLangSetCreate() -> *mut FcLangSet;
}
extern "C" {
    pub fn FcLangSetDestroy(ls: *mut FcLangSet);
}
extern "C" {
    pub fn FcLangSetCopy(ls: *const FcLangSet) -> *mut FcLangSet;
}
extern "C" {
    pub fn FcLangSetAdd(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcLangSetDel(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcLangSetHasLang(ls: *const FcLangSet, lang: *const FcChar8) -> FcLangResult;
}
extern "C" {
    pub fn FcLangSetCompare(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcLangResult;
}
extern "C" {
    pub fn FcLangSetContains(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcBool;
}
extern "C" {
    pub fn FcLangSetEqual(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcBool;
}
extern "C" {
    pub fn FcLangSetHash(ls: *const FcLangSet) -> FcChar32;
}
extern "C" {
    pub fn FcLangSetGetLangs(ls: *const FcLangSet) -> *mut FcStrSet;
}
extern "C" {
    pub fn FcLangSetUnion(a: *const FcLangSet, b: *const FcLangSet) -> *mut FcLangSet;
}
extern "C" {
    pub fn FcLangSetSubtract(a: *const FcLangSet, b: *const FcLangSet) -> *mut FcLangSet;
}
extern "C" {
    pub fn FcObjectSetCreate() -> *mut FcObjectSet;
}
extern "C" {
    pub fn FcObjectSetAdd(os: *mut FcObjectSet, object: *const ::std::os::raw::c_char) -> FcBool;
}
extern "C" {
    pub fn FcObjectSetDestroy(os: *mut FcObjectSet);
}
extern "C" {
    pub fn FcObjectSetVaBuild(
        first: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
    ) -> *mut FcObjectSet;
}
extern "C" {
    pub fn FcObjectSetBuild(first: *const ::std::os::raw::c_char, ...) -> *mut FcObjectSet;
}
extern "C" {
    pub fn FcFontSetList(
        config: *mut FcConfig,
        sets: *mut *mut FcFontSet,
        nsets: ::std::os::raw::c_int,
        p: *mut FcPattern,
        os: *mut FcObjectSet,
    ) -> *mut FcFontSet;
}
extern "C" {
    pub fn FcFontList(
        config: *mut FcConfig,
        p: *mut FcPattern,
        os: *mut FcObjectSet,
    ) -> *mut FcFontSet;
}
extern "C" {
    pub fn FcAtomicCreate(file: *const FcChar8) -> *mut FcAtomic;
}
extern "C" {
    pub fn FcAtomicLock(atomic: *mut FcAtomic) -> FcBool;
}
extern "C" {
    pub fn FcAtomicNewFile(atomic: *mut FcAtomic) -> *mut FcChar8;
}
extern "C" {
    pub fn FcAtomicOrigFile(atomic: *mut FcAtomic) -> *mut FcChar8;
}
extern "C" {
    pub fn FcAtomicReplaceOrig(atomic: *mut FcAtomic) -> FcBool;
}
extern "C" {
    pub fn FcAtomicDeleteNew(atomic: *mut FcAtomic);
}
extern "C" {
    pub fn FcAtomicUnlock(atomic: *mut FcAtomic);
}
extern "C" {
    pub fn FcAtomicDestroy(atomic: *mut FcAtomic);
}
extern "C" {
    pub fn FcFontSetMatch(
        config: *mut FcConfig,
        sets: *mut *mut FcFontSet,
        nsets: ::std::os::raw::c_int,
        p: *mut FcPattern,
        result: *mut FcResult,
    ) -> *mut FcPattern;
}
extern "C" {
    pub fn FcFontMatch(
        config: *mut FcConfig,
        p: *mut FcPattern,
        result: *mut FcResult,
    ) -> *mut FcPattern;
}
extern "C" {
    pub fn FcFontRenderPrepare(
        config: *mut FcConfig,
        pat: *mut FcPattern,
        font: *mut FcPattern,
    ) -> *mut FcPattern;
}
extern "C" {
    pub fn FcFontSetSort(
        config: *mut FcConfig,
        sets: *mut *mut FcFontSet,
        nsets: ::std::os::raw::c_int,
        p: *mut FcPattern,
        trim: FcBool,
        csp: *mut *mut FcCharSet,
        result: *mut FcResult,
    ) -> *mut FcFontSet;
}
extern "C" {
    pub fn FcFontSort(
        config: *mut FcConfig,
        p: *mut FcPattern,
        trim: FcBool,
        csp: *mut *mut FcCharSet,
        result: *mut FcResult,
    ) -> *mut FcFontSet;
}
extern "C" {
    pub fn FcFontSetSortDestroy(fs: *mut FcFontSet);
}
extern "C" {
    pub fn FcMatrixCopy(mat: *const FcMatrix) -> *mut FcMatrix;
}
extern "C" {
    pub fn FcMatrixEqual(mat1: *const FcMatrix, mat2: *const FcMatrix) -> FcBool;
}
extern "C" {
    pub fn FcMatrixMultiply(result: *mut FcMatrix, a: *const FcMatrix, b: *const FcMatrix);
}
extern "C" {
    pub fn FcMatrixRotate(m: *mut FcMatrix, c: f64, s: f64);
}
extern "C" {
    pub fn FcMatrixScale(m: *mut FcMatrix, sx: f64, sy: f64);
}
extern "C" {
    pub fn FcMatrixShear(m: *mut FcMatrix, sh: f64, sv: f64);
}
extern "C" {
    pub fn FcNameRegisterObjectTypes(
        types: *const FcObjectType,
        ntype: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcNameUnregisterObjectTypes(
        types: *const FcObjectType,
        ntype: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcNameGetObjectType(object: *const ::std::os::raw::c_char) -> *const FcObjectType;
}
extern "C" {
    pub fn FcNameRegisterConstants(
        consts: *const FcConstant,
        nconsts: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcNameUnregisterConstants(
        consts: *const FcConstant,
        nconsts: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcNameGetConstant(string: *const FcChar8) -> *const FcConstant;
}
extern "C" {
    pub fn FcNameGetConstantFor(
        string: *const FcChar8,
        object: *const ::std::os::raw::c_char,
    ) -> *const FcConstant;
}
extern "C" {
    pub fn FcNameConstant(string: *const FcChar8, result: *mut ::std::os::raw::c_int) -> FcBool;
}
extern "C" {
    pub fn FcNameParse(name: *const FcChar8) -> *mut FcPattern;
}
extern "C" {
    pub fn FcNameUnparse(pat: *mut FcPattern) -> *mut FcChar8;
}
extern "C" {
    pub fn FcPatternCreate() -> *mut FcPattern;
}
extern "C" {
    pub fn FcPatternDuplicate(p: *const FcPattern) -> *mut FcPattern;
}
extern "C" {
    pub fn FcPatternReference(p: *mut FcPattern);
}
extern "C" {
    pub fn FcPatternFilter(p: *mut FcPattern, os: *const FcObjectSet) -> *mut FcPattern;
}
extern "C" {
    pub fn FcValueDestroy(v: FcValue);
}
extern "C" {
    pub fn FcValueEqual(va: FcValue, vb: FcValue) -> FcBool;
}
extern "C" {
    pub fn FcValueSave(v: FcValue) -> FcValue;
}
extern "C" {
    pub fn FcPatternDestroy(p: *mut FcPattern);
}
extern "C" {
    pub fn FcPatternObjectCount(pat: *const FcPattern) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcPatternEqual(pa: *const FcPattern, pb: *const FcPattern) -> FcBool;
}
extern "C" {
    pub fn FcPatternEqualSubset(
        pa: *const FcPattern,
        pb: *const FcPattern,
        os: *const FcObjectSet,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternHash(p: *const FcPattern) -> FcChar32;
}
extern "C" {
    pub fn FcPatternAdd(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        value: FcValue,
        append: FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddWeak(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        value: FcValue,
        append: FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternGet(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        v: *mut FcValue,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetWithBinding(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        v: *mut FcValue,
        b: *mut FcValueBinding,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternDel(p: *mut FcPattern, object: *const ::std::os::raw::c_char) -> FcBool;
}
extern "C" {
    pub fn FcPatternRemove(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddInteger(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddDouble(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        d: f64,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddString(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        s: *const FcChar8,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddMatrix(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        s: *const FcMatrix,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddCharSet(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        c: *const FcCharSet,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddBool(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        b: FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddLangSet(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        ls: *const FcLangSet,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternAddRange(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        r: *const FcRange,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternGetInteger(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        i: *mut ::std::os::raw::c_int,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetDouble(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        d: *mut f64,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetString(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        s: *mut *mut FcChar8,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetMatrix(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        s: *mut *mut FcMatrix,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetCharSet(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        c: *mut *mut FcCharSet,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetBool(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        b: *mut FcBool,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetLangSet(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        ls: *mut *mut FcLangSet,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternGetRange(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        r: *mut *mut FcRange,
    ) -> FcResult;
}
extern "C" {
    pub fn FcPatternVaBuild(p: *mut FcPattern, va: *mut __va_list_tag) -> *mut FcPattern;
}
extern "C" {
    pub fn FcPatternBuild(p: *mut FcPattern, ...) -> *mut FcPattern;
}
extern "C" {
    pub fn FcPatternFormat(pat: *mut FcPattern, format: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcRangeCreateDouble(begin: f64, end: f64) -> *mut FcRange;
}
extern "C" {
    pub fn FcRangeCreateInteger(begin: FcChar32, end: FcChar32) -> *mut FcRange;
}
extern "C" {
    pub fn FcRangeDestroy(range: *mut FcRange);
}
extern "C" {
    pub fn FcRangeCopy(r: *const FcRange) -> *mut FcRange;
}
extern "C" {
    pub fn FcRangeGetDouble(range: *const FcRange, begin: *mut f64, end: *mut f64) -> FcBool;
}
extern "C" {
    pub fn FcPatternIterStart(pat: *const FcPattern, iter: *mut FcPatternIter);
}
extern "C" {
    pub fn FcPatternIterNext(pat: *const FcPattern, iter: *mut FcPatternIter) -> FcBool;
}
extern "C" {
    pub fn FcPatternIterEqual(
        p1: *const FcPattern,
        i1: *mut FcPatternIter,
        p2: *const FcPattern,
        i2: *mut FcPatternIter,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternFindIter(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
        object: *const ::std::os::raw::c_char,
    ) -> FcBool;
}
extern "C" {
    pub fn FcPatternIterIsValid(pat: *const FcPattern, iter: *mut FcPatternIter) -> FcBool;
}
extern "C" {
    pub fn FcPatternIterGetObject(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FcPatternIterValueCount(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcPatternIterGetValue(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
        id: ::std::os::raw::c_int,
        v: *mut FcValue,
        b: *mut FcValueBinding,
    ) -> FcResult;
}
extern "C" {
    pub fn FcWeightFromOpenType(ot_weight: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcWeightFromOpenTypeDouble(ot_weight: f64) -> f64;
}
extern "C" {
    pub fn FcWeightToOpenType(fc_weight: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcWeightToOpenTypeDouble(fc_weight: f64) -> f64;
}
extern "C" {
    pub fn FcStrCopy(s: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrCopyFilename(s: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrPlus(s1: *const FcChar8, s2: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrFree(s: *mut FcChar8);
}
extern "C" {
    pub fn FcStrDowncase(s: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrCmpIgnoreCase(s1: *const FcChar8, s2: *const FcChar8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcStrCmp(s1: *const FcChar8, s2: *const FcChar8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcStrStrIgnoreCase(s1: *const FcChar8, s2: *const FcChar8) -> *const FcChar8;
}
extern "C" {
    pub fn FcStrStr(s1: *const FcChar8, s2: *const FcChar8) -> *const FcChar8;
}
extern "C" {
    pub fn FcUtf8ToUcs4(
        src_orig: *const FcChar8,
        dst: *mut FcChar32,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcUtf8Len(
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
        nchar: *mut ::std::os::raw::c_int,
        wchar: *mut ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcUcs4ToUtf8(ucs4: FcChar32, dest: *mut FcChar8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcUtf16ToUcs4(
        src_orig: *const FcChar8,
        endian: FcEndian,
        dst: *mut FcChar32,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FcUtf16Len(
        string: *const FcChar8,
        endian: FcEndian,
        len: ::std::os::raw::c_int,
        nchar: *mut ::std::os::raw::c_int,
        wchar: *mut ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn FcStrBuildFilename(path: *const FcChar8, ...) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrDirname(file: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrBasename(file: *const FcChar8) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrSetCreate() -> *mut FcStrSet;
}
extern "C" {
    pub fn FcStrSetMember(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcStrSetEqual(sa: *mut FcStrSet, sb: *mut FcStrSet) -> FcBool;
}
extern "C" {
    pub fn FcStrSetAdd(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcStrSetAddFilename(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcStrSetDel(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
extern "C" {
    pub fn FcStrSetDestroy(set: *mut FcStrSet);
}
extern "C" {
    pub fn FcStrListCreate(set: *mut FcStrSet) -> *mut FcStrList;
}
extern "C" {
    pub fn FcStrListFirst(list: *mut FcStrList);
}
extern "C" {
    pub fn FcStrListNext(list: *mut FcStrList) -> *mut FcChar8;
}
extern "C" {
    pub fn FcStrListDone(list: *mut FcStrList);
}
extern "C" {
    pub fn FcConfigParseAndLoad(
        config: *mut FcConfig,
        file: *const FcChar8,
        complain: FcBool,
    ) -> FcBool;
}
extern "C" {
    pub fn FcConfigParseAndLoadFromMemory(
        config: *mut FcConfig,
        buffer: *const FcChar8,
        complain: FcBool,
    ) -> FcBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSizeHints {
    pub flags: ::std::os::raw::c_long,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub min_width: ::std::os::raw::c_int,
    pub min_height: ::std::os::raw::c_int,
    pub max_width: ::std::os::raw::c_int,
    pub max_height: ::std::os::raw::c_int,
    pub width_inc: ::std::os::raw::c_int,
    pub height_inc: ::std::os::raw::c_int,
    pub min_aspect: XSizeHints__bindgen_ty_1,
    pub max_aspect: XSizeHints__bindgen_ty_1,
    pub base_width: ::std::os::raw::c_int,
    pub base_height: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSizeHints__bindgen_ty_1 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSizeHints__bindgen_ty_1"]
        [::std::mem::size_of::<XSizeHints__bindgen_ty_1>() - 8usize];
    ["Alignment of XSizeHints__bindgen_ty_1"]
        [::std::mem::align_of::<XSizeHints__bindgen_ty_1>() - 4usize];
    ["Offset of field: XSizeHints__bindgen_ty_1::x"]
        [::std::mem::offset_of!(XSizeHints__bindgen_ty_1, x) - 0usize];
    ["Offset of field: XSizeHints__bindgen_ty_1::y"]
        [::std::mem::offset_of!(XSizeHints__bindgen_ty_1, y) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSizeHints"][::std::mem::size_of::<XSizeHints>() - 80usize];
    ["Alignment of XSizeHints"][::std::mem::align_of::<XSizeHints>() - 8usize];
    ["Offset of field: XSizeHints::flags"][::std::mem::offset_of!(XSizeHints, flags) - 0usize];
    ["Offset of field: XSizeHints::x"][::std::mem::offset_of!(XSizeHints, x) - 8usize];
    ["Offset of field: XSizeHints::y"][::std::mem::offset_of!(XSizeHints, y) - 12usize];
    ["Offset of field: XSizeHints::width"][::std::mem::offset_of!(XSizeHints, width) - 16usize];
    ["Offset of field: XSizeHints::height"][::std::mem::offset_of!(XSizeHints, height) - 20usize];
    ["Offset of field: XSizeHints::min_width"]
        [::std::mem::offset_of!(XSizeHints, min_width) - 24usize];
    ["Offset of field: XSizeHints::min_height"]
        [::std::mem::offset_of!(XSizeHints, min_height) - 28usize];
    ["Offset of field: XSizeHints::max_width"]
        [::std::mem::offset_of!(XSizeHints, max_width) - 32usize];
    ["Offset of field: XSizeHints::max_height"]
        [::std::mem::offset_of!(XSizeHints, max_height) - 36usize];
    ["Offset of field: XSizeHints::width_inc"]
        [::std::mem::offset_of!(XSizeHints, width_inc) - 40usize];
    ["Offset of field: XSizeHints::height_inc"]
        [::std::mem::offset_of!(XSizeHints, height_inc) - 44usize];
    ["Offset of field: XSizeHints::min_aspect"]
        [::std::mem::offset_of!(XSizeHints, min_aspect) - 48usize];
    ["Offset of field: XSizeHints::max_aspect"]
        [::std::mem::offset_of!(XSizeHints, max_aspect) - 56usize];
    ["Offset of field: XSizeHints::base_width"]
        [::std::mem::offset_of!(XSizeHints, base_width) - 64usize];
    ["Offset of field: XSizeHints::base_height"]
        [::std::mem::offset_of!(XSizeHints, base_height) - 68usize];
    ["Offset of field: XSizeHints::win_gravity"]
        [::std::mem::offset_of!(XSizeHints, win_gravity) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWMHints {
    pub flags: ::std::os::raw::c_long,
    pub input: ::std::os::raw::c_int,
    pub initial_state: ::std::os::raw::c_int,
    pub icon_pixmap: Pixmap,
    pub icon_window: Window,
    pub icon_x: ::std::os::raw::c_int,
    pub icon_y: ::std::os::raw::c_int,
    pub icon_mask: Pixmap,
    pub window_group: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWMHints"][::std::mem::size_of::<XWMHints>() - 56usize];
    ["Alignment of XWMHints"][::std::mem::align_of::<XWMHints>() - 8usize];
    ["Offset of field: XWMHints::flags"][::std::mem::offset_of!(XWMHints, flags) - 0usize];
    ["Offset of field: XWMHints::input"][::std::mem::offset_of!(XWMHints, input) - 8usize];
    ["Offset of field: XWMHints::initial_state"]
        [::std::mem::offset_of!(XWMHints, initial_state) - 12usize];
    ["Offset of field: XWMHints::icon_pixmap"]
        [::std::mem::offset_of!(XWMHints, icon_pixmap) - 16usize];
    ["Offset of field: XWMHints::icon_window"]
        [::std::mem::offset_of!(XWMHints, icon_window) - 24usize];
    ["Offset of field: XWMHints::icon_x"][::std::mem::offset_of!(XWMHints, icon_x) - 32usize];
    ["Offset of field: XWMHints::icon_y"][::std::mem::offset_of!(XWMHints, icon_y) - 36usize];
    ["Offset of field: XWMHints::icon_mask"][::std::mem::offset_of!(XWMHints, icon_mask) - 40usize];
    ["Offset of field: XWMHints::window_group"]
        [::std::mem::offset_of!(XWMHints, window_group) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextProperty {
    pub value: *mut ::std::os::raw::c_uchar,
    pub encoding: Atom,
    pub format: ::std::os::raw::c_int,
    pub nitems: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextProperty"][::std::mem::size_of::<XTextProperty>() - 32usize];
    ["Alignment of XTextProperty"][::std::mem::align_of::<XTextProperty>() - 8usize];
    ["Offset of field: XTextProperty::value"]
        [::std::mem::offset_of!(XTextProperty, value) - 0usize];
    ["Offset of field: XTextProperty::encoding"]
        [::std::mem::offset_of!(XTextProperty, encoding) - 8usize];
    ["Offset of field: XTextProperty::format"]
        [::std::mem::offset_of!(XTextProperty, format) - 16usize];
    ["Offset of field: XTextProperty::nitems"]
        [::std::mem::offset_of!(XTextProperty, nitems) - 24usize];
};
pub const XICCEncodingStyle_XStringStyle: XICCEncodingStyle = 0;
pub const XICCEncodingStyle_XCompoundTextStyle: XICCEncodingStyle = 1;
pub const XICCEncodingStyle_XTextStyle: XICCEncodingStyle = 2;
pub const XICCEncodingStyle_XStdICCTextStyle: XICCEncodingStyle = 3;
pub const XICCEncodingStyle_XUTF8StringStyle: XICCEncodingStyle = 4;
pub type XICCEncodingStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIconSize {
    pub min_width: ::std::os::raw::c_int,
    pub min_height: ::std::os::raw::c_int,
    pub max_width: ::std::os::raw::c_int,
    pub max_height: ::std::os::raw::c_int,
    pub width_inc: ::std::os::raw::c_int,
    pub height_inc: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIconSize"][::std::mem::size_of::<XIconSize>() - 24usize];
    ["Alignment of XIconSize"][::std::mem::align_of::<XIconSize>() - 4usize];
    ["Offset of field: XIconSize::min_width"]
        [::std::mem::offset_of!(XIconSize, min_width) - 0usize];
    ["Offset of field: XIconSize::min_height"]
        [::std::mem::offset_of!(XIconSize, min_height) - 4usize];
    ["Offset of field: XIconSize::max_width"]
        [::std::mem::offset_of!(XIconSize, max_width) - 8usize];
    ["Offset of field: XIconSize::max_height"]
        [::std::mem::offset_of!(XIconSize, max_height) - 12usize];
    ["Offset of field: XIconSize::width_inc"]
        [::std::mem::offset_of!(XIconSize, width_inc) - 16usize];
    ["Offset of field: XIconSize::height_inc"]
        [::std::mem::offset_of!(XIconSize, height_inc) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XClassHint {
    pub res_name: *mut ::std::os::raw::c_char,
    pub res_class: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClassHint"][::std::mem::size_of::<XClassHint>() - 16usize];
    ["Alignment of XClassHint"][::std::mem::align_of::<XClassHint>() - 8usize];
    ["Offset of field: XClassHint::res_name"]
        [::std::mem::offset_of!(XClassHint, res_name) - 0usize];
    ["Offset of field: XClassHint::res_class"]
        [::std::mem::offset_of!(XClassHint, res_class) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XComposeStatus {
    pub compose_ptr: XPointer,
    pub chars_matched: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XComposeStatus"][::std::mem::size_of::<_XComposeStatus>() - 16usize];
    ["Alignment of _XComposeStatus"][::std::mem::align_of::<_XComposeStatus>() - 8usize];
    ["Offset of field: _XComposeStatus::compose_ptr"]
        [::std::mem::offset_of!(_XComposeStatus, compose_ptr) - 0usize];
    ["Offset of field: _XComposeStatus::chars_matched"]
        [::std::mem::offset_of!(_XComposeStatus, chars_matched) - 8usize];
};
pub type XComposeStatus = _XComposeStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XRegion {
    _unused: [u8; 0],
}
pub type Region = *mut _XRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XVisualInfo {
    pub visual: *mut Visual,
    pub visualid: VisualID,
    pub screen: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub colormap_size: ::std::os::raw::c_int,
    pub bits_per_rgb: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XVisualInfo"][::std::mem::size_of::<XVisualInfo>() - 64usize];
    ["Alignment of XVisualInfo"][::std::mem::align_of::<XVisualInfo>() - 8usize];
    ["Offset of field: XVisualInfo::visual"][::std::mem::offset_of!(XVisualInfo, visual) - 0usize];
    ["Offset of field: XVisualInfo::visualid"]
        [::std::mem::offset_of!(XVisualInfo, visualid) - 8usize];
    ["Offset of field: XVisualInfo::screen"][::std::mem::offset_of!(XVisualInfo, screen) - 16usize];
    ["Offset of field: XVisualInfo::depth"][::std::mem::offset_of!(XVisualInfo, depth) - 20usize];
    ["Offset of field: XVisualInfo::class"][::std::mem::offset_of!(XVisualInfo, class) - 24usize];
    ["Offset of field: XVisualInfo::red_mask"]
        [::std::mem::offset_of!(XVisualInfo, red_mask) - 32usize];
    ["Offset of field: XVisualInfo::green_mask"]
        [::std::mem::offset_of!(XVisualInfo, green_mask) - 40usize];
    ["Offset of field: XVisualInfo::blue_mask"]
        [::std::mem::offset_of!(XVisualInfo, blue_mask) - 48usize];
    ["Offset of field: XVisualInfo::colormap_size"]
        [::std::mem::offset_of!(XVisualInfo, colormap_size) - 56usize];
    ["Offset of field: XVisualInfo::bits_per_rgb"]
        [::std::mem::offset_of!(XVisualInfo, bits_per_rgb) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XStandardColormap {
    pub colormap: Colormap,
    pub red_max: ::std::os::raw::c_ulong,
    pub red_mult: ::std::os::raw::c_ulong,
    pub green_max: ::std::os::raw::c_ulong,
    pub green_mult: ::std::os::raw::c_ulong,
    pub blue_max: ::std::os::raw::c_ulong,
    pub blue_mult: ::std::os::raw::c_ulong,
    pub base_pixel: ::std::os::raw::c_ulong,
    pub visualid: VisualID,
    pub killid: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XStandardColormap"][::std::mem::size_of::<XStandardColormap>() - 80usize];
    ["Alignment of XStandardColormap"][::std::mem::align_of::<XStandardColormap>() - 8usize];
    ["Offset of field: XStandardColormap::colormap"]
        [::std::mem::offset_of!(XStandardColormap, colormap) - 0usize];
    ["Offset of field: XStandardColormap::red_max"]
        [::std::mem::offset_of!(XStandardColormap, red_max) - 8usize];
    ["Offset of field: XStandardColormap::red_mult"]
        [::std::mem::offset_of!(XStandardColormap, red_mult) - 16usize];
    ["Offset of field: XStandardColormap::green_max"]
        [::std::mem::offset_of!(XStandardColormap, green_max) - 24usize];
    ["Offset of field: XStandardColormap::green_mult"]
        [::std::mem::offset_of!(XStandardColormap, green_mult) - 32usize];
    ["Offset of field: XStandardColormap::blue_max"]
        [::std::mem::offset_of!(XStandardColormap, blue_max) - 40usize];
    ["Offset of field: XStandardColormap::blue_mult"]
        [::std::mem::offset_of!(XStandardColormap, blue_mult) - 48usize];
    ["Offset of field: XStandardColormap::base_pixel"]
        [::std::mem::offset_of!(XStandardColormap, base_pixel) - 56usize];
    ["Offset of field: XStandardColormap::visualid"]
        [::std::mem::offset_of!(XStandardColormap, visualid) - 64usize];
    ["Offset of field: XStandardColormap::killid"]
        [::std::mem::offset_of!(XStandardColormap, killid) - 72usize];
};
pub type XContext = ::std::os::raw::c_int;
extern "C" {
    pub fn XAllocClassHint() -> *mut XClassHint;
}
extern "C" {
    pub fn XAllocIconSize() -> *mut XIconSize;
}
extern "C" {
    pub fn XAllocSizeHints() -> *mut XSizeHints;
}
extern "C" {
    pub fn XAllocStandardColormap() -> *mut XStandardColormap;
}
extern "C" {
    pub fn XAllocWMHints() -> *mut XWMHints;
}
extern "C" {
    pub fn XClipBox(arg1: Region, arg2: *mut XRectangle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCreateRegion() -> Region;
}
extern "C" {
    pub fn XDefaultString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn XDeleteContext(arg1: *mut Display, arg2: XID, arg3: XContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDestroyRegion(arg1: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XEmptyRegion(arg1: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XEqualRegion(arg1: Region, arg2: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFindContext(
        arg1: *mut Display,
        arg2: XID,
        arg3: XContext,
        arg4: *mut XPointer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetClassHint(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XClassHint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetIconSizes(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut XIconSize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetNormalHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetRGBColormaps(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut XStandardColormap,
        arg4: *mut ::std::os::raw::c_int,
        arg5: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetSizeHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetStandardColormap(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XStandardColormap,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetTextProperty(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XTextProperty,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetVisualInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XVisualInfo,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut XVisualInfo;
}
extern "C" {
    pub fn XGetWMClientMachine(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWMHints(arg1: *mut Display, arg2: Window) -> *mut XWMHints;
}
extern "C" {
    pub fn XGetWMIconName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWMName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWMNormalHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetWMSizeHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
        arg4: *mut ::std::os::raw::c_long,
        arg5: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XGetZoomHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XIntersectRegion(arg1: Region, arg2: Region, arg3: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XConvertCase(arg1: KeySym, arg2: *mut KeySym, arg3: *mut KeySym);
}
extern "C" {
    pub fn XLookupString(
        arg1: *mut XKeyEvent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut KeySym,
        arg5: *mut XComposeStatus,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMatchVisualInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XVisualInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XOffsetRegion(
        arg1: Region,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPointInRegion(
        arg1: Region,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPolygonRegion(
        arg1: *mut XPoint,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> Region;
}
extern "C" {
    pub fn XRectInRegion(
        arg1: Region,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSaveContext(
        arg1: *mut Display,
        arg2: XID,
        arg3: XContext,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetClassHint(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XClassHint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetIconSizes(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XIconSize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetNormalHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetRGBColormaps(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XStandardColormap,
        arg4: ::std::os::raw::c_int,
        arg5: Atom,
    );
}
extern "C" {
    pub fn XSetSizeHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetStandardProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: Pixmap,
        arg6: *mut *mut ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: *mut XSizeHints,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetTextProperty(arg1: *mut Display, arg2: Window, arg3: *mut XTextProperty, arg4: Atom);
}
extern "C" {
    pub fn XSetWMClientMachine(arg1: *mut Display, arg2: Window, arg3: *mut XTextProperty);
}
extern "C" {
    pub fn XSetWMHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XWMHints,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWMIconName(arg1: *mut Display, arg2: Window, arg3: *mut XTextProperty);
}
extern "C" {
    pub fn XSetWMName(arg1: *mut Display, arg2: Window, arg3: *mut XTextProperty);
}
extern "C" {
    pub fn XSetWMNormalHints(arg1: *mut Display, arg2: Window, arg3: *mut XSizeHints);
}
extern "C" {
    pub fn XSetWMProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XTextProperty,
        arg4: *mut XTextProperty,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
        arg7: *mut XSizeHints,
        arg8: *mut XWMHints,
        arg9: *mut XClassHint,
    );
}
extern "C" {
    pub fn XmbSetWMProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
        arg7: *mut XSizeHints,
        arg8: *mut XWMHints,
        arg9: *mut XClassHint,
    );
}
extern "C" {
    pub fn Xutf8SetWMProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
        arg7: *mut XSizeHints,
        arg8: *mut XWMHints,
        arg9: *mut XClassHint,
    );
}
extern "C" {
    pub fn XSetWMSizeHints(arg1: *mut Display, arg2: Window, arg3: *mut XSizeHints, arg4: Atom);
}
extern "C" {
    pub fn XSetRegion(arg1: *mut Display, arg2: GC, arg3: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetStandardColormap(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XStandardColormap,
        arg4: Atom,
    );
}
extern "C" {
    pub fn XSetZoomHints(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XSizeHints,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XShrinkRegion(
        arg1: Region,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XStringListToTextProperty(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSubtractRegion(arg1: Region, arg2: Region, arg3: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XmbTextListToTextProperty(
        display: *mut Display,
        list: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        style: XICCEncodingStyle,
        text_prop_return: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcTextListToTextProperty(
        display: *mut Display,
        list: *mut *mut wchar_t,
        count: ::std::os::raw::c_int,
        style: XICCEncodingStyle,
        text_prop_return: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Xutf8TextListToTextProperty(
        display: *mut Display,
        list: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        style: XICCEncodingStyle,
        text_prop_return: *mut XTextProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcFreeStringList(list: *mut *mut wchar_t);
}
extern "C" {
    pub fn XTextPropertyToStringList(
        arg1: *mut XTextProperty,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XmbTextPropertyToTextList(
        display: *mut Display,
        text_prop: *const XTextProperty,
        list_return: *mut *mut *mut ::std::os::raw::c_char,
        count_return: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XwcTextPropertyToTextList(
        display: *mut Display,
        text_prop: *const XTextProperty,
        list_return: *mut *mut *mut wchar_t,
        count_return: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Xutf8TextPropertyToTextList(
        display: *mut Display,
        text_prop: *const XTextProperty,
        list_return: *mut *mut *mut ::std::os::raw::c_char,
        count_return: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUnionRectWithRegion(
        arg1: *mut XRectangle,
        arg2: Region,
        arg3: Region,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XUnionRegion(arg1: Region, arg2: Region, arg3: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XWMGeometry(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut XSizeHints,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_int,
        arg11: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XXorRegion(arg1: Region, arg2: Region, arg3: Region) -> ::std::os::raw::c_int;
}
pub type pointer = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Client {
    _unused: [u8; 0],
}
pub type ClientPtr = *mut _Client;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Font {
    _unused: [u8; 0],
}
pub type FontPtr = *mut _Font;
pub type FSID = ::std::os::raw::c_ulong;
pub type AccContext = FSID;
pub type OSTimePtr = *mut *mut timeval;
pub type BlockHandlerProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: OSTimePtr,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type Glyph = XID;
pub type GlyphSet = XID;
pub type Picture = XID;
pub type PictFormat = XID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XRenderDirectFormat {
    pub red: ::std::os::raw::c_short,
    pub redMask: ::std::os::raw::c_short,
    pub green: ::std::os::raw::c_short,
    pub greenMask: ::std::os::raw::c_short,
    pub blue: ::std::os::raw::c_short,
    pub blueMask: ::std::os::raw::c_short,
    pub alpha: ::std::os::raw::c_short,
    pub alphaMask: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRenderDirectFormat"][::std::mem::size_of::<XRenderDirectFormat>() - 16usize];
    ["Alignment of XRenderDirectFormat"][::std::mem::align_of::<XRenderDirectFormat>() - 2usize];
    ["Offset of field: XRenderDirectFormat::red"]
        [::std::mem::offset_of!(XRenderDirectFormat, red) - 0usize];
    ["Offset of field: XRenderDirectFormat::redMask"]
        [::std::mem::offset_of!(XRenderDirectFormat, redMask) - 2usize];
    ["Offset of field: XRenderDirectFormat::green"]
        [::std::mem::offset_of!(XRenderDirectFormat, green) - 4usize];
    ["Offset of field: XRenderDirectFormat::greenMask"]
        [::std::mem::offset_of!(XRenderDirectFormat, greenMask) - 6usize];
    ["Offset of field: XRenderDirectFormat::blue"]
        [::std::mem::offset_of!(XRenderDirectFormat, blue) - 8usize];
    ["Offset of field: XRenderDirectFormat::blueMask"]
        [::std::mem::offset_of!(XRenderDirectFormat, blueMask) - 10usize];
    ["Offset of field: XRenderDirectFormat::alpha"]
        [::std::mem::offset_of!(XRenderDirectFormat, alpha) - 12usize];
    ["Offset of field: XRenderDirectFormat::alphaMask"]
        [::std::mem::offset_of!(XRenderDirectFormat, alphaMask) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XRenderPictFormat {
    pub id: PictFormat,
    pub type_: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub direct: XRenderDirectFormat,
    pub colormap: Colormap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRenderPictFormat"][::std::mem::size_of::<XRenderPictFormat>() - 40usize];
    ["Alignment of XRenderPictFormat"][::std::mem::align_of::<XRenderPictFormat>() - 8usize];
    ["Offset of field: XRenderPictFormat::id"]
        [::std::mem::offset_of!(XRenderPictFormat, id) - 0usize];
    ["Offset of field: XRenderPictFormat::type_"]
        [::std::mem::offset_of!(XRenderPictFormat, type_) - 8usize];
    ["Offset of field: XRenderPictFormat::depth"]
        [::std::mem::offset_of!(XRenderPictFormat, depth) - 12usize];
    ["Offset of field: XRenderPictFormat::direct"]
        [::std::mem::offset_of!(XRenderPictFormat, direct) - 16usize];
    ["Offset of field: XRenderPictFormat::colormap"]
        [::std::mem::offset_of!(XRenderPictFormat, colormap) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XRenderPictureAttributes {
    pub repeat: ::std::os::raw::c_int,
    pub alpha_map: Picture,
    pub alpha_x_origin: ::std::os::raw::c_int,
    pub alpha_y_origin: ::std::os::raw::c_int,
    pub clip_x_origin: ::std::os::raw::c_int,
    pub clip_y_origin: ::std::os::raw::c_int,
    pub clip_mask: Pixmap,
    pub graphics_exposures: ::std::os::raw::c_int,
    pub subwindow_mode: ::std::os::raw::c_int,
    pub poly_edge: ::std::os::raw::c_int,
    pub poly_mode: ::std::os::raw::c_int,
    pub dither: Atom,
    pub component_alpha: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XRenderPictureAttributes"]
        [::std::mem::size_of::<_XRenderPictureAttributes>() - 72usize];
    ["Alignment of _XRenderPictureAttributes"]
        [::std::mem::align_of::<_XRenderPictureAttributes>() - 8usize];
    ["Offset of field: _XRenderPictureAttributes::repeat"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, repeat) - 0usize];
    ["Offset of field: _XRenderPictureAttributes::alpha_map"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, alpha_map) - 8usize];
    ["Offset of field: _XRenderPictureAttributes::alpha_x_origin"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, alpha_x_origin) - 16usize];
    ["Offset of field: _XRenderPictureAttributes::alpha_y_origin"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, alpha_y_origin) - 20usize];
    ["Offset of field: _XRenderPictureAttributes::clip_x_origin"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, clip_x_origin) - 24usize];
    ["Offset of field: _XRenderPictureAttributes::clip_y_origin"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, clip_y_origin) - 28usize];
    ["Offset of field: _XRenderPictureAttributes::clip_mask"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, clip_mask) - 32usize];
    ["Offset of field: _XRenderPictureAttributes::graphics_exposures"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, graphics_exposures) - 40usize];
    ["Offset of field: _XRenderPictureAttributes::subwindow_mode"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, subwindow_mode) - 44usize];
    ["Offset of field: _XRenderPictureAttributes::poly_edge"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, poly_edge) - 48usize];
    ["Offset of field: _XRenderPictureAttributes::poly_mode"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, poly_mode) - 52usize];
    ["Offset of field: _XRenderPictureAttributes::dither"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, dither) - 56usize];
    ["Offset of field: _XRenderPictureAttributes::component_alpha"]
        [::std::mem::offset_of!(_XRenderPictureAttributes, component_alpha) - 64usize];
};
pub type XRenderPictureAttributes = _XRenderPictureAttributes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XRenderColor {
    pub red: ::std::os::raw::c_ushort,
    pub green: ::std::os::raw::c_ushort,
    pub blue: ::std::os::raw::c_ushort,
    pub alpha: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRenderColor"][::std::mem::size_of::<XRenderColor>() - 8usize];
    ["Alignment of XRenderColor"][::std::mem::align_of::<XRenderColor>() - 2usize];
    ["Offset of field: XRenderColor::red"][::std::mem::offset_of!(XRenderColor, red) - 0usize];
    ["Offset of field: XRenderColor::green"][::std::mem::offset_of!(XRenderColor, green) - 2usize];
    ["Offset of field: XRenderColor::blue"][::std::mem::offset_of!(XRenderColor, blue) - 4usize];
    ["Offset of field: XRenderColor::alpha"][::std::mem::offset_of!(XRenderColor, alpha) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGlyphInfo {
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub xOff: ::std::os::raw::c_short,
    pub yOff: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XGlyphInfo"][::std::mem::size_of::<_XGlyphInfo>() - 12usize];
    ["Alignment of _XGlyphInfo"][::std::mem::align_of::<_XGlyphInfo>() - 2usize];
    ["Offset of field: _XGlyphInfo::width"][::std::mem::offset_of!(_XGlyphInfo, width) - 0usize];
    ["Offset of field: _XGlyphInfo::height"][::std::mem::offset_of!(_XGlyphInfo, height) - 2usize];
    ["Offset of field: _XGlyphInfo::x"][::std::mem::offset_of!(_XGlyphInfo, x) - 4usize];
    ["Offset of field: _XGlyphInfo::y"][::std::mem::offset_of!(_XGlyphInfo, y) - 6usize];
    ["Offset of field: _XGlyphInfo::xOff"][::std::mem::offset_of!(_XGlyphInfo, xOff) - 8usize];
    ["Offset of field: _XGlyphInfo::yOff"][::std::mem::offset_of!(_XGlyphInfo, yOff) - 10usize];
};
pub type XGlyphInfo = _XGlyphInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGlyphElt8 {
    pub glyphset: GlyphSet,
    pub chars: *const ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub xOff: ::std::os::raw::c_int,
    pub yOff: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XGlyphElt8"][::std::mem::size_of::<_XGlyphElt8>() - 32usize];
    ["Alignment of _XGlyphElt8"][::std::mem::align_of::<_XGlyphElt8>() - 8usize];
    ["Offset of field: _XGlyphElt8::glyphset"]
        [::std::mem::offset_of!(_XGlyphElt8, glyphset) - 0usize];
    ["Offset of field: _XGlyphElt8::chars"][::std::mem::offset_of!(_XGlyphElt8, chars) - 8usize];
    ["Offset of field: _XGlyphElt8::nchars"][::std::mem::offset_of!(_XGlyphElt8, nchars) - 16usize];
    ["Offset of field: _XGlyphElt8::xOff"][::std::mem::offset_of!(_XGlyphElt8, xOff) - 20usize];
    ["Offset of field: _XGlyphElt8::yOff"][::std::mem::offset_of!(_XGlyphElt8, yOff) - 24usize];
};
pub type XGlyphElt8 = _XGlyphElt8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGlyphElt16 {
    pub glyphset: GlyphSet,
    pub chars: *const ::std::os::raw::c_ushort,
    pub nchars: ::std::os::raw::c_int,
    pub xOff: ::std::os::raw::c_int,
    pub yOff: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XGlyphElt16"][::std::mem::size_of::<_XGlyphElt16>() - 32usize];
    ["Alignment of _XGlyphElt16"][::std::mem::align_of::<_XGlyphElt16>() - 8usize];
    ["Offset of field: _XGlyphElt16::glyphset"]
        [::std::mem::offset_of!(_XGlyphElt16, glyphset) - 0usize];
    ["Offset of field: _XGlyphElt16::chars"][::std::mem::offset_of!(_XGlyphElt16, chars) - 8usize];
    ["Offset of field: _XGlyphElt16::nchars"]
        [::std::mem::offset_of!(_XGlyphElt16, nchars) - 16usize];
    ["Offset of field: _XGlyphElt16::xOff"][::std::mem::offset_of!(_XGlyphElt16, xOff) - 20usize];
    ["Offset of field: _XGlyphElt16::yOff"][::std::mem::offset_of!(_XGlyphElt16, yOff) - 24usize];
};
pub type XGlyphElt16 = _XGlyphElt16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGlyphElt32 {
    pub glyphset: GlyphSet,
    pub chars: *const ::std::os::raw::c_uint,
    pub nchars: ::std::os::raw::c_int,
    pub xOff: ::std::os::raw::c_int,
    pub yOff: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XGlyphElt32"][::std::mem::size_of::<_XGlyphElt32>() - 32usize];
    ["Alignment of _XGlyphElt32"][::std::mem::align_of::<_XGlyphElt32>() - 8usize];
    ["Offset of field: _XGlyphElt32::glyphset"]
        [::std::mem::offset_of!(_XGlyphElt32, glyphset) - 0usize];
    ["Offset of field: _XGlyphElt32::chars"][::std::mem::offset_of!(_XGlyphElt32, chars) - 8usize];
    ["Offset of field: _XGlyphElt32::nchars"]
        [::std::mem::offset_of!(_XGlyphElt32, nchars) - 16usize];
    ["Offset of field: _XGlyphElt32::xOff"][::std::mem::offset_of!(_XGlyphElt32, xOff) - 20usize];
    ["Offset of field: _XGlyphElt32::yOff"][::std::mem::offset_of!(_XGlyphElt32, yOff) - 24usize];
};
pub type XGlyphElt32 = _XGlyphElt32;
pub type XDouble = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XPointDouble {
    pub x: XDouble,
    pub y: XDouble,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XPointDouble"][::std::mem::size_of::<_XPointDouble>() - 16usize];
    ["Alignment of _XPointDouble"][::std::mem::align_of::<_XPointDouble>() - 8usize];
    ["Offset of field: _XPointDouble::x"][::std::mem::offset_of!(_XPointDouble, x) - 0usize];
    ["Offset of field: _XPointDouble::y"][::std::mem::offset_of!(_XPointDouble, y) - 8usize];
};
pub type XPointDouble = _XPointDouble;
pub type XFixed = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XPointFixed {
    pub x: XFixed,
    pub y: XFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XPointFixed"][::std::mem::size_of::<_XPointFixed>() - 8usize];
    ["Alignment of _XPointFixed"][::std::mem::align_of::<_XPointFixed>() - 4usize];
    ["Offset of field: _XPointFixed::x"][::std::mem::offset_of!(_XPointFixed, x) - 0usize];
    ["Offset of field: _XPointFixed::y"][::std::mem::offset_of!(_XPointFixed, y) - 4usize];
};
pub type XPointFixed = _XPointFixed;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XLineFixed {
    pub p1: XPointFixed,
    pub p2: XPointFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XLineFixed"][::std::mem::size_of::<_XLineFixed>() - 16usize];
    ["Alignment of _XLineFixed"][::std::mem::align_of::<_XLineFixed>() - 4usize];
    ["Offset of field: _XLineFixed::p1"][::std::mem::offset_of!(_XLineFixed, p1) - 0usize];
    ["Offset of field: _XLineFixed::p2"][::std::mem::offset_of!(_XLineFixed, p2) - 8usize];
};
pub type XLineFixed = _XLineFixed;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XTriangle {
    pub p1: XPointFixed,
    pub p2: XPointFixed,
    pub p3: XPointFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XTriangle"][::std::mem::size_of::<_XTriangle>() - 24usize];
    ["Alignment of _XTriangle"][::std::mem::align_of::<_XTriangle>() - 4usize];
    ["Offset of field: _XTriangle::p1"][::std::mem::offset_of!(_XTriangle, p1) - 0usize];
    ["Offset of field: _XTriangle::p2"][::std::mem::offset_of!(_XTriangle, p2) - 8usize];
    ["Offset of field: _XTriangle::p3"][::std::mem::offset_of!(_XTriangle, p3) - 16usize];
};
pub type XTriangle = _XTriangle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XCircle {
    pub x: XFixed,
    pub y: XFixed,
    pub radius: XFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XCircle"][::std::mem::size_of::<_XCircle>() - 12usize];
    ["Alignment of _XCircle"][::std::mem::align_of::<_XCircle>() - 4usize];
    ["Offset of field: _XCircle::x"][::std::mem::offset_of!(_XCircle, x) - 0usize];
    ["Offset of field: _XCircle::y"][::std::mem::offset_of!(_XCircle, y) - 4usize];
    ["Offset of field: _XCircle::radius"][::std::mem::offset_of!(_XCircle, radius) - 8usize];
};
pub type XCircle = _XCircle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XTrapezoid {
    pub top: XFixed,
    pub bottom: XFixed,
    pub left: XLineFixed,
    pub right: XLineFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XTrapezoid"][::std::mem::size_of::<_XTrapezoid>() - 40usize];
    ["Alignment of _XTrapezoid"][::std::mem::align_of::<_XTrapezoid>() - 4usize];
    ["Offset of field: _XTrapezoid::top"][::std::mem::offset_of!(_XTrapezoid, top) - 0usize];
    ["Offset of field: _XTrapezoid::bottom"][::std::mem::offset_of!(_XTrapezoid, bottom) - 4usize];
    ["Offset of field: _XTrapezoid::left"][::std::mem::offset_of!(_XTrapezoid, left) - 8usize];
    ["Offset of field: _XTrapezoid::right"][::std::mem::offset_of!(_XTrapezoid, right) - 24usize];
};
pub type XTrapezoid = _XTrapezoid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XTransform {
    pub matrix: [[XFixed; 3usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XTransform"][::std::mem::size_of::<_XTransform>() - 36usize];
    ["Alignment of _XTransform"][::std::mem::align_of::<_XTransform>() - 4usize];
    ["Offset of field: _XTransform::matrix"][::std::mem::offset_of!(_XTransform, matrix) - 0usize];
};
pub type XTransform = _XTransform;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XFilters {
    pub nfilter: ::std::os::raw::c_int,
    pub filter: *mut *mut ::std::os::raw::c_char,
    pub nalias: ::std::os::raw::c_int,
    pub alias: *mut ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XFilters"][::std::mem::size_of::<_XFilters>() - 32usize];
    ["Alignment of _XFilters"][::std::mem::align_of::<_XFilters>() - 8usize];
    ["Offset of field: _XFilters::nfilter"][::std::mem::offset_of!(_XFilters, nfilter) - 0usize];
    ["Offset of field: _XFilters::filter"][::std::mem::offset_of!(_XFilters, filter) - 8usize];
    ["Offset of field: _XFilters::nalias"][::std::mem::offset_of!(_XFilters, nalias) - 16usize];
    ["Offset of field: _XFilters::alias"][::std::mem::offset_of!(_XFilters, alias) - 24usize];
};
pub type XFilters = _XFilters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIndexValue {
    pub pixel: ::std::os::raw::c_ulong,
    pub red: ::std::os::raw::c_ushort,
    pub green: ::std::os::raw::c_ushort,
    pub blue: ::std::os::raw::c_ushort,
    pub alpha: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIndexValue"][::std::mem::size_of::<_XIndexValue>() - 16usize];
    ["Alignment of _XIndexValue"][::std::mem::align_of::<_XIndexValue>() - 8usize];
    ["Offset of field: _XIndexValue::pixel"][::std::mem::offset_of!(_XIndexValue, pixel) - 0usize];
    ["Offset of field: _XIndexValue::red"][::std::mem::offset_of!(_XIndexValue, red) - 8usize];
    ["Offset of field: _XIndexValue::green"][::std::mem::offset_of!(_XIndexValue, green) - 10usize];
    ["Offset of field: _XIndexValue::blue"][::std::mem::offset_of!(_XIndexValue, blue) - 12usize];
    ["Offset of field: _XIndexValue::alpha"][::std::mem::offset_of!(_XIndexValue, alpha) - 14usize];
};
pub type XIndexValue = _XIndexValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XAnimCursor {
    pub cursor: Cursor,
    pub delay: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XAnimCursor"][::std::mem::size_of::<_XAnimCursor>() - 16usize];
    ["Alignment of _XAnimCursor"][::std::mem::align_of::<_XAnimCursor>() - 8usize];
    ["Offset of field: _XAnimCursor::cursor"]
        [::std::mem::offset_of!(_XAnimCursor, cursor) - 0usize];
    ["Offset of field: _XAnimCursor::delay"][::std::mem::offset_of!(_XAnimCursor, delay) - 8usize];
};
pub type XAnimCursor = _XAnimCursor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSpanFix {
    pub left: XFixed,
    pub right: XFixed,
    pub y: XFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSpanFix"][::std::mem::size_of::<_XSpanFix>() - 12usize];
    ["Alignment of _XSpanFix"][::std::mem::align_of::<_XSpanFix>() - 4usize];
    ["Offset of field: _XSpanFix::left"][::std::mem::offset_of!(_XSpanFix, left) - 0usize];
    ["Offset of field: _XSpanFix::right"][::std::mem::offset_of!(_XSpanFix, right) - 4usize];
    ["Offset of field: _XSpanFix::y"][::std::mem::offset_of!(_XSpanFix, y) - 8usize];
};
pub type XSpanFix = _XSpanFix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XTrap {
    pub top: XSpanFix,
    pub bottom: XSpanFix,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XTrap"][::std::mem::size_of::<_XTrap>() - 24usize];
    ["Alignment of _XTrap"][::std::mem::align_of::<_XTrap>() - 4usize];
    ["Offset of field: _XTrap::top"][::std::mem::offset_of!(_XTrap, top) - 0usize];
    ["Offset of field: _XTrap::bottom"][::std::mem::offset_of!(_XTrap, bottom) - 12usize];
};
pub type XTrap = _XTrap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XLinearGradient {
    pub p1: XPointFixed,
    pub p2: XPointFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XLinearGradient"][::std::mem::size_of::<_XLinearGradient>() - 16usize];
    ["Alignment of _XLinearGradient"][::std::mem::align_of::<_XLinearGradient>() - 4usize];
    ["Offset of field: _XLinearGradient::p1"]
        [::std::mem::offset_of!(_XLinearGradient, p1) - 0usize];
    ["Offset of field: _XLinearGradient::p2"]
        [::std::mem::offset_of!(_XLinearGradient, p2) - 8usize];
};
pub type XLinearGradient = _XLinearGradient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XRadialGradient {
    pub inner: XCircle,
    pub outer: XCircle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XRadialGradient"][::std::mem::size_of::<_XRadialGradient>() - 24usize];
    ["Alignment of _XRadialGradient"][::std::mem::align_of::<_XRadialGradient>() - 4usize];
    ["Offset of field: _XRadialGradient::inner"]
        [::std::mem::offset_of!(_XRadialGradient, inner) - 0usize];
    ["Offset of field: _XRadialGradient::outer"]
        [::std::mem::offset_of!(_XRadialGradient, outer) - 12usize];
};
pub type XRadialGradient = _XRadialGradient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XConicalGradient {
    pub center: XPointFixed,
    pub angle: XFixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XConicalGradient"][::std::mem::size_of::<_XConicalGradient>() - 12usize];
    ["Alignment of _XConicalGradient"][::std::mem::align_of::<_XConicalGradient>() - 4usize];
    ["Offset of field: _XConicalGradient::center"]
        [::std::mem::offset_of!(_XConicalGradient, center) - 0usize];
    ["Offset of field: _XConicalGradient::angle"]
        [::std::mem::offset_of!(_XConicalGradient, angle) - 8usize];
};
pub type XConicalGradient = _XConicalGradient;
extern "C" {
    pub fn XRenderQueryExtension(
        dpy: *mut Display,
        event_basep: *mut ::std::os::raw::c_int,
        error_basep: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRenderQueryVersion(
        dpy: *mut Display,
        major_versionp: *mut ::std::os::raw::c_int,
        minor_versionp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRenderQueryFormats(dpy: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRenderQuerySubpixelOrder(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRenderSetSubpixelOrder(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
        subpixel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRenderFindVisualFormat(
        dpy: *mut Display,
        visual: *const Visual,
    ) -> *mut XRenderPictFormat;
}
extern "C" {
    pub fn XRenderFindFormat(
        dpy: *mut Display,
        mask: ::std::os::raw::c_ulong,
        templ: *const XRenderPictFormat,
        count: ::std::os::raw::c_int,
    ) -> *mut XRenderPictFormat;
}
extern "C" {
    pub fn XRenderFindStandardFormat(
        dpy: *mut Display,
        format: ::std::os::raw::c_int,
    ) -> *mut XRenderPictFormat;
}
extern "C" {
    pub fn XRenderQueryPictIndexValues(
        dpy: *mut Display,
        format: *const XRenderPictFormat,
        num: *mut ::std::os::raw::c_int,
    ) -> *mut XIndexValue;
}
extern "C" {
    pub fn XRenderCreatePicture(
        dpy: *mut Display,
        drawable: Drawable,
        format: *const XRenderPictFormat,
        valuemask: ::std::os::raw::c_ulong,
        attributes: *const XRenderPictureAttributes,
    ) -> Picture;
}
extern "C" {
    pub fn XRenderChangePicture(
        dpy: *mut Display,
        picture: Picture,
        valuemask: ::std::os::raw::c_ulong,
        attributes: *const XRenderPictureAttributes,
    );
}
extern "C" {
    pub fn XRenderSetPictureClipRectangles(
        dpy: *mut Display,
        picture: Picture,
        xOrigin: ::std::os::raw::c_int,
        yOrigin: ::std::os::raw::c_int,
        rects: *const XRectangle,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderSetPictureClipRegion(dpy: *mut Display, picture: Picture, r: Region);
}
extern "C" {
    pub fn XRenderSetPictureTransform(
        dpy: *mut Display,
        picture: Picture,
        transform: *mut XTransform,
    );
}
extern "C" {
    pub fn XRenderFreePicture(dpy: *mut Display, picture: Picture);
}
extern "C" {
    pub fn XRenderComposite(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        mask: Picture,
        dst: Picture,
        src_x: ::std::os::raw::c_int,
        src_y: ::std::os::raw::c_int,
        mask_x: ::std::os::raw::c_int,
        mask_y: ::std::os::raw::c_int,
        dst_x: ::std::os::raw::c_int,
        dst_y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XRenderCreateGlyphSet(dpy: *mut Display, format: *const XRenderPictFormat) -> GlyphSet;
}
extern "C" {
    pub fn XRenderReferenceGlyphSet(dpy: *mut Display, existing: GlyphSet) -> GlyphSet;
}
extern "C" {
    pub fn XRenderFreeGlyphSet(dpy: *mut Display, glyphset: GlyphSet);
}
extern "C" {
    pub fn XRenderAddGlyphs(
        dpy: *mut Display,
        glyphset: GlyphSet,
        gids: *const Glyph,
        glyphs: *const XGlyphInfo,
        nglyphs: ::std::os::raw::c_int,
        images: *const ::std::os::raw::c_char,
        nbyte_images: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderFreeGlyphs(
        dpy: *mut Display,
        glyphset: GlyphSet,
        gids: *const Glyph,
        nglyphs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeString8(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        glyphset: GlyphSet,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
        nchar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeString16(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        glyphset: GlyphSet,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_ushort,
        nchar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeString32(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        glyphset: GlyphSet,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_uint,
        nchar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeText8(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        elts: *const XGlyphElt8,
        nelt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeText16(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        elts: *const XGlyphElt16,
        nelt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeText32(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        elts: *const XGlyphElt32,
        nelt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderFillRectangle(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        dst: Picture,
        color: *const XRenderColor,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XRenderFillRectangles(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        dst: Picture,
        color: *const XRenderColor,
        rectangles: *const XRectangle,
        n_rects: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeTrapezoids(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        traps: *const XTrapezoid,
        ntrap: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeTriangles(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        triangles: *const XTriangle,
        ntriangle: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeTriStrip(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        points: *const XPointFixed,
        npoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeTriFan(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        points: *const XPointFixed,
        npoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCompositeDoublePoly(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        maskFormat: *const XRenderPictFormat,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        fpoints: *const XPointDouble,
        npoints: ::std::os::raw::c_int,
        winding: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderParseColor(
        dpy: *mut Display,
        spec: *mut ::std::os::raw::c_char,
        def: *mut XRenderColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XRenderCreateCursor(
        dpy: *mut Display,
        source: Picture,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> Cursor;
}
extern "C" {
    pub fn XRenderQueryFilters(dpy: *mut Display, drawable: Drawable) -> *mut XFilters;
}
extern "C" {
    pub fn XRenderSetPictureFilter(
        dpy: *mut Display,
        picture: Picture,
        filter: *const ::std::os::raw::c_char,
        params: *mut XFixed,
        nparams: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCreateAnimCursor(
        dpy: *mut Display,
        ncursor: ::std::os::raw::c_int,
        cursors: *mut XAnimCursor,
    ) -> Cursor;
}
extern "C" {
    pub fn XRenderAddTraps(
        dpy: *mut Display,
        picture: Picture,
        xOff: ::std::os::raw::c_int,
        yOff: ::std::os::raw::c_int,
        traps: *const XTrap,
        ntrap: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XRenderCreateSolidFill(dpy: *mut Display, color: *const XRenderColor) -> Picture;
}
extern "C" {
    pub fn XRenderCreateLinearGradient(
        dpy: *mut Display,
        gradient: *const XLinearGradient,
        stops: *const XFixed,
        colors: *const XRenderColor,
        nstops: ::std::os::raw::c_int,
    ) -> Picture;
}
extern "C" {
    pub fn XRenderCreateRadialGradient(
        dpy: *mut Display,
        gradient: *const XRadialGradient,
        stops: *const XFixed,
        colors: *const XRenderColor,
        nstops: ::std::os::raw::c_int,
    ) -> Picture;
}
extern "C" {
    pub fn XRenderCreateConicalGradient(
        dpy: *mut Display,
        gradient: *const XConicalGradient,
        stops: *const XFixed,
        colors: *const XRenderColor,
        nstops: ::std::os::raw::c_int,
    ) -> Picture;
}
pub type XftChar8 = FcChar8;
pub type XftChar16 = FcChar16;
pub type XftChar32 = FcChar32;
pub use self::FcType as XftType;
pub type XftMatrix = FcMatrix;
pub use self::FcResult as XftResult;
pub type XftValue = FcValue;
pub type XftPattern = FcPattern;
pub type XftFontSet = FcFontSet;
pub type XftObjectSet = FcObjectSet;
extern "C" {
    pub fn XftNameUnparse(
        pat: *mut XftPattern,
        dest: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub static mut _XftFTlibrary: FT_Library;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftFontInfo {
    _unused: [u8; 0],
}
pub type XftFontInfo = _XftFontInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftFont {
    pub ascent: ::std::os::raw::c_int,
    pub descent: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub max_advance_width: ::std::os::raw::c_int,
    pub charset: *mut FcCharSet,
    pub pattern: *mut FcPattern,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XftFont"][::std::mem::size_of::<_XftFont>() - 32usize];
    ["Alignment of _XftFont"][::std::mem::align_of::<_XftFont>() - 8usize];
    ["Offset of field: _XftFont::ascent"][::std::mem::offset_of!(_XftFont, ascent) - 0usize];
    ["Offset of field: _XftFont::descent"][::std::mem::offset_of!(_XftFont, descent) - 4usize];
    ["Offset of field: _XftFont::height"][::std::mem::offset_of!(_XftFont, height) - 8usize];
    ["Offset of field: _XftFont::max_advance_width"]
        [::std::mem::offset_of!(_XftFont, max_advance_width) - 12usize];
    ["Offset of field: _XftFont::charset"][::std::mem::offset_of!(_XftFont, charset) - 16usize];
    ["Offset of field: _XftFont::pattern"][::std::mem::offset_of!(_XftFont, pattern) - 24usize];
};
pub type XftFont = _XftFont;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftDraw {
    _unused: [u8; 0],
}
pub type XftDraw = _XftDraw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftColor {
    pub pixel: ::std::os::raw::c_ulong,
    pub color: XRenderColor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XftColor"][::std::mem::size_of::<_XftColor>() - 16usize];
    ["Alignment of _XftColor"][::std::mem::align_of::<_XftColor>() - 8usize];
    ["Offset of field: _XftColor::pixel"][::std::mem::offset_of!(_XftColor, pixel) - 0usize];
    ["Offset of field: _XftColor::color"][::std::mem::offset_of!(_XftColor, color) - 8usize];
};
pub type XftColor = _XftColor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftCharSpec {
    pub ucs4: FcChar32,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XftCharSpec"][::std::mem::size_of::<_XftCharSpec>() - 8usize];
    ["Alignment of _XftCharSpec"][::std::mem::align_of::<_XftCharSpec>() - 4usize];
    ["Offset of field: _XftCharSpec::ucs4"][::std::mem::offset_of!(_XftCharSpec, ucs4) - 0usize];
    ["Offset of field: _XftCharSpec::x"][::std::mem::offset_of!(_XftCharSpec, x) - 4usize];
    ["Offset of field: _XftCharSpec::y"][::std::mem::offset_of!(_XftCharSpec, y) - 6usize];
};
pub type XftCharSpec = _XftCharSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftCharFontSpec {
    pub font: *mut XftFont,
    pub ucs4: FcChar32,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XftCharFontSpec"][::std::mem::size_of::<_XftCharFontSpec>() - 16usize];
    ["Alignment of _XftCharFontSpec"][::std::mem::align_of::<_XftCharFontSpec>() - 8usize];
    ["Offset of field: _XftCharFontSpec::font"]
        [::std::mem::offset_of!(_XftCharFontSpec, font) - 0usize];
    ["Offset of field: _XftCharFontSpec::ucs4"]
        [::std::mem::offset_of!(_XftCharFontSpec, ucs4) - 8usize];
    ["Offset of field: _XftCharFontSpec::x"][::std::mem::offset_of!(_XftCharFontSpec, x) - 12usize];
    ["Offset of field: _XftCharFontSpec::y"][::std::mem::offset_of!(_XftCharFontSpec, y) - 14usize];
};
pub type XftCharFontSpec = _XftCharFontSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftGlyphSpec {
    pub glyph: FT_UInt,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XftGlyphSpec"][::std::mem::size_of::<_XftGlyphSpec>() - 8usize];
    ["Alignment of _XftGlyphSpec"][::std::mem::align_of::<_XftGlyphSpec>() - 4usize];
    ["Offset of field: _XftGlyphSpec::glyph"]
        [::std::mem::offset_of!(_XftGlyphSpec, glyph) - 0usize];
    ["Offset of field: _XftGlyphSpec::x"][::std::mem::offset_of!(_XftGlyphSpec, x) - 4usize];
    ["Offset of field: _XftGlyphSpec::y"][::std::mem::offset_of!(_XftGlyphSpec, y) - 6usize];
};
pub type XftGlyphSpec = _XftGlyphSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XftGlyphFontSpec {
    pub font: *mut XftFont,
    pub glyph: FT_UInt,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XftGlyphFontSpec"][::std::mem::size_of::<_XftGlyphFontSpec>() - 16usize];
    ["Alignment of _XftGlyphFontSpec"][::std::mem::align_of::<_XftGlyphFontSpec>() - 8usize];
    ["Offset of field: _XftGlyphFontSpec::font"]
        [::std::mem::offset_of!(_XftGlyphFontSpec, font) - 0usize];
    ["Offset of field: _XftGlyphFontSpec::glyph"]
        [::std::mem::offset_of!(_XftGlyphFontSpec, glyph) - 8usize];
    ["Offset of field: _XftGlyphFontSpec::x"]
        [::std::mem::offset_of!(_XftGlyphFontSpec, x) - 12usize];
    ["Offset of field: _XftGlyphFontSpec::y"]
        [::std::mem::offset_of!(_XftGlyphFontSpec, y) - 14usize];
};
pub type XftGlyphFontSpec = _XftGlyphFontSpec;
extern "C" {
    pub fn XftColorAllocName(
        dpy: *mut Display,
        visual: *const Visual,
        cmap: Colormap,
        name: *const ::std::os::raw::c_char,
        result: *mut XftColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftColorAllocValue(
        dpy: *mut Display,
        visual: *mut Visual,
        cmap: Colormap,
        color: *const XRenderColor,
        result: *mut XftColor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftColorFree(
        dpy: *mut Display,
        visual: *mut Visual,
        cmap: Colormap,
        color: *mut XftColor,
    );
}
extern "C" {
    pub fn XftDefaultHasRender(dpy: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftDefaultSet(dpy: *mut Display, defaults: *mut FcPattern) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftDefaultSubstitute(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
        pattern: *mut FcPattern,
    );
}
extern "C" {
    pub fn XftDrawCreate(
        dpy: *mut Display,
        drawable: Drawable,
        visual: *mut Visual,
        colormap: Colormap,
    ) -> *mut XftDraw;
}
extern "C" {
    pub fn XftDrawCreateBitmap(dpy: *mut Display, bitmap: Pixmap) -> *mut XftDraw;
}
extern "C" {
    pub fn XftDrawCreateAlpha(
        dpy: *mut Display,
        pixmap: Pixmap,
        depth: ::std::os::raw::c_int,
    ) -> *mut XftDraw;
}
extern "C" {
    pub fn XftDrawChange(draw: *mut XftDraw, drawable: Drawable);
}
extern "C" {
    pub fn XftDrawDisplay(draw: *mut XftDraw) -> *mut Display;
}
extern "C" {
    pub fn XftDrawDrawable(draw: *mut XftDraw) -> Drawable;
}
extern "C" {
    pub fn XftDrawColormap(draw: *mut XftDraw) -> Colormap;
}
extern "C" {
    pub fn XftDrawVisual(draw: *mut XftDraw) -> *mut Visual;
}
extern "C" {
    pub fn XftDrawDestroy(draw: *mut XftDraw);
}
extern "C" {
    pub fn XftDrawPicture(draw: *mut XftDraw) -> Picture;
}
extern "C" {
    pub fn XftDrawSrcPicture(draw: *mut XftDraw, color: *const XftColor) -> Picture;
}
extern "C" {
    pub fn XftDrawGlyphs(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        glyphs: *const FT_UInt,
        nglyphs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawString8(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawString16(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar16,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawString32(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar32,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawStringUtf8(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawStringUtf16(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        endian: FcEndian,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawCharSpec(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        chars: *const XftCharSpec,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawCharFontSpec(
        draw: *mut XftDraw,
        color: *const XftColor,
        chars: *const XftCharFontSpec,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawGlyphSpec(
        draw: *mut XftDraw,
        color: *const XftColor,
        pub_: *mut XftFont,
        glyphs: *const XftGlyphSpec,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawGlyphFontSpec(
        draw: *mut XftDraw,
        color: *const XftColor,
        glyphs: *const XftGlyphFontSpec,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftDrawRect(
        draw: *mut XftDraw,
        color: *const XftColor,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XftDrawSetClip(draw: *mut XftDraw, r: Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftDrawSetClipRectangles(
        draw: *mut XftDraw,
        xOrigin: ::std::os::raw::c_int,
        yOrigin: ::std::os::raw::c_int,
        rects: *const XRectangle,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftDrawSetSubwindowMode(draw: *mut XftDraw, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XftGlyphExtents(
        dpy: *mut Display,
        pub_: *mut XftFont,
        glyphs: *const FT_UInt,
        nglyphs: ::std::os::raw::c_int,
        extents: *mut XGlyphInfo,
    );
}
extern "C" {
    pub fn XftTextExtents8(
        dpy: *mut Display,
        pub_: *mut XftFont,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
        extents: *mut XGlyphInfo,
    );
}
extern "C" {
    pub fn XftTextExtents16(
        dpy: *mut Display,
        pub_: *mut XftFont,
        string: *const FcChar16,
        len: ::std::os::raw::c_int,
        extents: *mut XGlyphInfo,
    );
}
extern "C" {
    pub fn XftTextExtents32(
        dpy: *mut Display,
        pub_: *mut XftFont,
        string: *const FcChar32,
        len: ::std::os::raw::c_int,
        extents: *mut XGlyphInfo,
    );
}
extern "C" {
    pub fn XftTextExtentsUtf8(
        dpy: *mut Display,
        pub_: *mut XftFont,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
        extents: *mut XGlyphInfo,
    );
}
extern "C" {
    pub fn XftTextExtentsUtf16(
        dpy: *mut Display,
        pub_: *mut XftFont,
        string: *const FcChar8,
        endian: FcEndian,
        len: ::std::os::raw::c_int,
        extents: *mut XGlyphInfo,
    );
}
extern "C" {
    pub fn XftFontMatch(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
        pattern: *const FcPattern,
        result: *mut FcResult,
    ) -> *mut FcPattern;
}
extern "C" {
    pub fn XftFontOpen(dpy: *mut Display, screen: ::std::os::raw::c_int, ...) -> *mut XftFont;
}
extern "C" {
    pub fn XftFontOpenName(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *mut XftFont;
}
extern "C" {
    pub fn XftFontOpenXlfd(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
        xlfd: *const ::std::os::raw::c_char,
    ) -> *mut XftFont;
}
extern "C" {
    pub fn XftLockFace(pub_: *mut XftFont) -> FT_Face;
}
extern "C" {
    pub fn XftUnlockFace(pub_: *mut XftFont);
}
extern "C" {
    pub fn XftFontInfoCreate(dpy: *mut Display, pattern: *const FcPattern) -> *mut XftFontInfo;
}
extern "C" {
    pub fn XftFontInfoDestroy(dpy: *mut Display, fi: *mut XftFontInfo);
}
extern "C" {
    pub fn XftFontInfoHash(fi: *const XftFontInfo) -> FcChar32;
}
extern "C" {
    pub fn XftFontInfoEqual(a: *const XftFontInfo, b: *const XftFontInfo) -> FcBool;
}
extern "C" {
    pub fn XftFontOpenInfo(
        dpy: *mut Display,
        pattern: *mut FcPattern,
        fi: *mut XftFontInfo,
    ) -> *mut XftFont;
}
extern "C" {
    pub fn XftFontOpenPattern(dpy: *mut Display, pattern: *mut FcPattern) -> *mut XftFont;
}
extern "C" {
    pub fn XftFontCopy(dpy: *mut Display, pub_: *mut XftFont) -> *mut XftFont;
}
extern "C" {
    pub fn XftFontClose(dpy: *mut Display, pub_: *mut XftFont);
}
extern "C" {
    pub fn XftInitFtLibrary() -> FcBool;
}
extern "C" {
    pub fn XftFontLoadGlyphs(
        dpy: *mut Display,
        pub_: *mut XftFont,
        need_bitmaps: FcBool,
        glyphs: *const FT_UInt,
        nglyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftFontUnloadGlyphs(
        dpy: *mut Display,
        pub_: *mut XftFont,
        glyphs: *const FT_UInt,
        nglyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftFontCheckGlyph(
        dpy: *mut Display,
        pub_: *mut XftFont,
        need_bitmaps: FcBool,
        glyph: FT_UInt,
        missing: *mut FT_UInt,
        nmissing: *mut ::std::os::raw::c_int,
    ) -> FcBool;
}
extern "C" {
    pub fn XftCharExists(dpy: *mut Display, pub_: *mut XftFont, ucs4: FcChar32) -> FcBool;
}
extern "C" {
    pub fn XftCharIndex(dpy: *mut Display, pub_: *mut XftFont, ucs4: FcChar32) -> FT_UInt;
}
extern "C" {
    pub fn XftInit(config: *const ::std::os::raw::c_char) -> FcBool;
}
extern "C" {
    pub fn XftGetVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XftListFonts(dpy: *mut Display, screen: ::std::os::raw::c_int, ...) -> *mut FcFontSet;
}
extern "C" {
    pub fn XftNameParse(name: *const ::std::os::raw::c_char) -> *mut FcPattern;
}
extern "C" {
    pub fn XftGlyphRender(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        glyphs: *const FT_UInt,
        nglyphs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftGlyphSpecRender(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        glyphs: *const XftGlyphSpec,
        nglyphs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftCharSpecRender(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        chars: *const XftCharSpec,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftGlyphFontSpecRender(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        glyphs: *const XftGlyphFontSpec,
        nglyphs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftCharFontSpecRender(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        chars: *const XftCharFontSpec,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender8(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender16(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar16,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender16BE(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender16LE(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender32(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar32,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender32BE(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRender32LE(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRenderUtf8(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftTextRenderUtf16(
        dpy: *mut Display,
        op: ::std::os::raw::c_int,
        src: Picture,
        pub_: *mut XftFont,
        dst: Picture,
        srcx: ::std::os::raw::c_int,
        srcy: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        string: *const FcChar8,
        endian: FcEndian,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XftXlfdParse(
        xlfd_orig: *const ::std::os::raw::c_char,
        ignore_scalable: ::std::os::raw::c_int,
        complete: ::std::os::raw::c_int,
    ) -> *mut FcPattern;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbStateRec {
    pub group: ::std::os::raw::c_uchar,
    pub locked_group: ::std::os::raw::c_uchar,
    pub base_group: ::std::os::raw::c_ushort,
    pub latched_group: ::std::os::raw::c_ushort,
    pub mods: ::std::os::raw::c_uchar,
    pub base_mods: ::std::os::raw::c_uchar,
    pub latched_mods: ::std::os::raw::c_uchar,
    pub locked_mods: ::std::os::raw::c_uchar,
    pub compat_state: ::std::os::raw::c_uchar,
    pub grab_mods: ::std::os::raw::c_uchar,
    pub compat_grab_mods: ::std::os::raw::c_uchar,
    pub lookup_mods: ::std::os::raw::c_uchar,
    pub compat_lookup_mods: ::std::os::raw::c_uchar,
    pub ptr_buttons: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbStateRec"][::std::mem::size_of::<_XkbStateRec>() - 18usize];
    ["Alignment of _XkbStateRec"][::std::mem::align_of::<_XkbStateRec>() - 2usize];
    ["Offset of field: _XkbStateRec::group"][::std::mem::offset_of!(_XkbStateRec, group) - 0usize];
    ["Offset of field: _XkbStateRec::locked_group"]
        [::std::mem::offset_of!(_XkbStateRec, locked_group) - 1usize];
    ["Offset of field: _XkbStateRec::base_group"]
        [::std::mem::offset_of!(_XkbStateRec, base_group) - 2usize];
    ["Offset of field: _XkbStateRec::latched_group"]
        [::std::mem::offset_of!(_XkbStateRec, latched_group) - 4usize];
    ["Offset of field: _XkbStateRec::mods"][::std::mem::offset_of!(_XkbStateRec, mods) - 6usize];
    ["Offset of field: _XkbStateRec::base_mods"]
        [::std::mem::offset_of!(_XkbStateRec, base_mods) - 7usize];
    ["Offset of field: _XkbStateRec::latched_mods"]
        [::std::mem::offset_of!(_XkbStateRec, latched_mods) - 8usize];
    ["Offset of field: _XkbStateRec::locked_mods"]
        [::std::mem::offset_of!(_XkbStateRec, locked_mods) - 9usize];
    ["Offset of field: _XkbStateRec::compat_state"]
        [::std::mem::offset_of!(_XkbStateRec, compat_state) - 10usize];
    ["Offset of field: _XkbStateRec::grab_mods"]
        [::std::mem::offset_of!(_XkbStateRec, grab_mods) - 11usize];
    ["Offset of field: _XkbStateRec::compat_grab_mods"]
        [::std::mem::offset_of!(_XkbStateRec, compat_grab_mods) - 12usize];
    ["Offset of field: _XkbStateRec::lookup_mods"]
        [::std::mem::offset_of!(_XkbStateRec, lookup_mods) - 13usize];
    ["Offset of field: _XkbStateRec::compat_lookup_mods"]
        [::std::mem::offset_of!(_XkbStateRec, compat_lookup_mods) - 14usize];
    ["Offset of field: _XkbStateRec::ptr_buttons"]
        [::std::mem::offset_of!(_XkbStateRec, ptr_buttons) - 16usize];
};
pub type XkbStateRec = _XkbStateRec;
pub type XkbStatePtr = *mut _XkbStateRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMods {
    pub mask: ::std::os::raw::c_uchar,
    pub real_mods: ::std::os::raw::c_uchar,
    pub vmods: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMods"][::std::mem::size_of::<_XkbMods>() - 4usize];
    ["Alignment of _XkbMods"][::std::mem::align_of::<_XkbMods>() - 2usize];
    ["Offset of field: _XkbMods::mask"][::std::mem::offset_of!(_XkbMods, mask) - 0usize];
    ["Offset of field: _XkbMods::real_mods"][::std::mem::offset_of!(_XkbMods, real_mods) - 1usize];
    ["Offset of field: _XkbMods::vmods"][::std::mem::offset_of!(_XkbMods, vmods) - 2usize];
};
pub type XkbModsRec = _XkbMods;
pub type XkbModsPtr = *mut _XkbMods;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKTMapEntry {
    pub active: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_uchar,
    pub mods: XkbModsRec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKTMapEntry"][::std::mem::size_of::<_XkbKTMapEntry>() - 12usize];
    ["Alignment of _XkbKTMapEntry"][::std::mem::align_of::<_XkbKTMapEntry>() - 4usize];
    ["Offset of field: _XkbKTMapEntry::active"]
        [::std::mem::offset_of!(_XkbKTMapEntry, active) - 0usize];
    ["Offset of field: _XkbKTMapEntry::level"]
        [::std::mem::offset_of!(_XkbKTMapEntry, level) - 4usize];
    ["Offset of field: _XkbKTMapEntry::mods"]
        [::std::mem::offset_of!(_XkbKTMapEntry, mods) - 6usize];
};
pub type XkbKTMapEntryRec = _XkbKTMapEntry;
pub type XkbKTMapEntryPtr = *mut _XkbKTMapEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKeyType {
    pub mods: XkbModsRec,
    pub num_levels: ::std::os::raw::c_uchar,
    pub map_count: ::std::os::raw::c_uchar,
    pub map: XkbKTMapEntryPtr,
    pub preserve: XkbModsPtr,
    pub name: Atom,
    pub level_names: *mut Atom,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKeyType"][::std::mem::size_of::<_XkbKeyType>() - 40usize];
    ["Alignment of _XkbKeyType"][::std::mem::align_of::<_XkbKeyType>() - 8usize];
    ["Offset of field: _XkbKeyType::mods"][::std::mem::offset_of!(_XkbKeyType, mods) - 0usize];
    ["Offset of field: _XkbKeyType::num_levels"]
        [::std::mem::offset_of!(_XkbKeyType, num_levels) - 4usize];
    ["Offset of field: _XkbKeyType::map_count"]
        [::std::mem::offset_of!(_XkbKeyType, map_count) - 5usize];
    ["Offset of field: _XkbKeyType::map"][::std::mem::offset_of!(_XkbKeyType, map) - 8usize];
    ["Offset of field: _XkbKeyType::preserve"]
        [::std::mem::offset_of!(_XkbKeyType, preserve) - 16usize];
    ["Offset of field: _XkbKeyType::name"][::std::mem::offset_of!(_XkbKeyType, name) - 24usize];
    ["Offset of field: _XkbKeyType::level_names"]
        [::std::mem::offset_of!(_XkbKeyType, level_names) - 32usize];
};
pub type XkbKeyTypeRec = _XkbKeyType;
pub type XkbKeyTypePtr = *mut _XkbKeyType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbBehavior {
    pub type_: ::std::os::raw::c_uchar,
    pub data: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbBehavior"][::std::mem::size_of::<_XkbBehavior>() - 2usize];
    ["Alignment of _XkbBehavior"][::std::mem::align_of::<_XkbBehavior>() - 1usize];
    ["Offset of field: _XkbBehavior::type_"][::std::mem::offset_of!(_XkbBehavior, type_) - 0usize];
    ["Offset of field: _XkbBehavior::data"][::std::mem::offset_of!(_XkbBehavior, data) - 1usize];
};
pub type XkbBehavior = _XkbBehavior;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbAnyAction {
    pub type_: ::std::os::raw::c_uchar,
    pub data: [::std::os::raw::c_uchar; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAnyAction"][::std::mem::size_of::<_XkbAnyAction>() - 8usize];
    ["Alignment of _XkbAnyAction"][::std::mem::align_of::<_XkbAnyAction>() - 1usize];
    ["Offset of field: _XkbAnyAction::type_"]
        [::std::mem::offset_of!(_XkbAnyAction, type_) - 0usize];
    ["Offset of field: _XkbAnyAction::data"][::std::mem::offset_of!(_XkbAnyAction, data) - 1usize];
};
pub type XkbAnyAction = _XkbAnyAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbModAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub mask: ::std::os::raw::c_uchar,
    pub real_mods: ::std::os::raw::c_uchar,
    pub vmods1: ::std::os::raw::c_uchar,
    pub vmods2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbModAction"][::std::mem::size_of::<_XkbModAction>() - 6usize];
    ["Alignment of _XkbModAction"][::std::mem::align_of::<_XkbModAction>() - 1usize];
    ["Offset of field: _XkbModAction::type_"]
        [::std::mem::offset_of!(_XkbModAction, type_) - 0usize];
    ["Offset of field: _XkbModAction::flags"]
        [::std::mem::offset_of!(_XkbModAction, flags) - 1usize];
    ["Offset of field: _XkbModAction::mask"][::std::mem::offset_of!(_XkbModAction, mask) - 2usize];
    ["Offset of field: _XkbModAction::real_mods"]
        [::std::mem::offset_of!(_XkbModAction, real_mods) - 3usize];
    ["Offset of field: _XkbModAction::vmods1"]
        [::std::mem::offset_of!(_XkbModAction, vmods1) - 4usize];
    ["Offset of field: _XkbModAction::vmods2"]
        [::std::mem::offset_of!(_XkbModAction, vmods2) - 5usize];
};
pub type XkbModAction = _XkbModAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbGroupAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub group_XXX: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbGroupAction"][::std::mem::size_of::<_XkbGroupAction>() - 3usize];
    ["Alignment of _XkbGroupAction"][::std::mem::align_of::<_XkbGroupAction>() - 1usize];
    ["Offset of field: _XkbGroupAction::type_"]
        [::std::mem::offset_of!(_XkbGroupAction, type_) - 0usize];
    ["Offset of field: _XkbGroupAction::flags"]
        [::std::mem::offset_of!(_XkbGroupAction, flags) - 1usize];
    ["Offset of field: _XkbGroupAction::group_XXX"]
        [::std::mem::offset_of!(_XkbGroupAction, group_XXX) - 2usize];
};
pub type XkbGroupAction = _XkbGroupAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbISOAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub mask: ::std::os::raw::c_uchar,
    pub real_mods: ::std::os::raw::c_uchar,
    pub group_XXX: ::std::os::raw::c_char,
    pub affect: ::std::os::raw::c_uchar,
    pub vmods1: ::std::os::raw::c_uchar,
    pub vmods2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbISOAction"][::std::mem::size_of::<_XkbISOAction>() - 8usize];
    ["Alignment of _XkbISOAction"][::std::mem::align_of::<_XkbISOAction>() - 1usize];
    ["Offset of field: _XkbISOAction::type_"]
        [::std::mem::offset_of!(_XkbISOAction, type_) - 0usize];
    ["Offset of field: _XkbISOAction::flags"]
        [::std::mem::offset_of!(_XkbISOAction, flags) - 1usize];
    ["Offset of field: _XkbISOAction::mask"][::std::mem::offset_of!(_XkbISOAction, mask) - 2usize];
    ["Offset of field: _XkbISOAction::real_mods"]
        [::std::mem::offset_of!(_XkbISOAction, real_mods) - 3usize];
    ["Offset of field: _XkbISOAction::group_XXX"]
        [::std::mem::offset_of!(_XkbISOAction, group_XXX) - 4usize];
    ["Offset of field: _XkbISOAction::affect"]
        [::std::mem::offset_of!(_XkbISOAction, affect) - 5usize];
    ["Offset of field: _XkbISOAction::vmods1"]
        [::std::mem::offset_of!(_XkbISOAction, vmods1) - 6usize];
    ["Offset of field: _XkbISOAction::vmods2"]
        [::std::mem::offset_of!(_XkbISOAction, vmods2) - 7usize];
};
pub type XkbISOAction = _XkbISOAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbPtrAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub high_XXX: ::std::os::raw::c_uchar,
    pub low_XXX: ::std::os::raw::c_uchar,
    pub high_YYY: ::std::os::raw::c_uchar,
    pub low_YYY: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbPtrAction"][::std::mem::size_of::<_XkbPtrAction>() - 6usize];
    ["Alignment of _XkbPtrAction"][::std::mem::align_of::<_XkbPtrAction>() - 1usize];
    ["Offset of field: _XkbPtrAction::type_"]
        [::std::mem::offset_of!(_XkbPtrAction, type_) - 0usize];
    ["Offset of field: _XkbPtrAction::flags"]
        [::std::mem::offset_of!(_XkbPtrAction, flags) - 1usize];
    ["Offset of field: _XkbPtrAction::high_XXX"]
        [::std::mem::offset_of!(_XkbPtrAction, high_XXX) - 2usize];
    ["Offset of field: _XkbPtrAction::low_XXX"]
        [::std::mem::offset_of!(_XkbPtrAction, low_XXX) - 3usize];
    ["Offset of field: _XkbPtrAction::high_YYY"]
        [::std::mem::offset_of!(_XkbPtrAction, high_YYY) - 4usize];
    ["Offset of field: _XkbPtrAction::low_YYY"]
        [::std::mem::offset_of!(_XkbPtrAction, low_YYY) - 5usize];
};
pub type XkbPtrAction = _XkbPtrAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbPtrBtnAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub count: ::std::os::raw::c_uchar,
    pub button: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbPtrBtnAction"][::std::mem::size_of::<_XkbPtrBtnAction>() - 4usize];
    ["Alignment of _XkbPtrBtnAction"][::std::mem::align_of::<_XkbPtrBtnAction>() - 1usize];
    ["Offset of field: _XkbPtrBtnAction::type_"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, type_) - 0usize];
    ["Offset of field: _XkbPtrBtnAction::flags"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, flags) - 1usize];
    ["Offset of field: _XkbPtrBtnAction::count"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, count) - 2usize];
    ["Offset of field: _XkbPtrBtnAction::button"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, button) - 3usize];
};
pub type XkbPtrBtnAction = _XkbPtrBtnAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbPtrDfltAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub affect: ::std::os::raw::c_uchar,
    pub valueXXX: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbPtrDfltAction"][::std::mem::size_of::<_XkbPtrDfltAction>() - 4usize];
    ["Alignment of _XkbPtrDfltAction"][::std::mem::align_of::<_XkbPtrDfltAction>() - 1usize];
    ["Offset of field: _XkbPtrDfltAction::type_"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, type_) - 0usize];
    ["Offset of field: _XkbPtrDfltAction::flags"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, flags) - 1usize];
    ["Offset of field: _XkbPtrDfltAction::affect"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, affect) - 2usize];
    ["Offset of field: _XkbPtrDfltAction::valueXXX"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, valueXXX) - 3usize];
};
pub type XkbPtrDfltAction = _XkbPtrDfltAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbSwitchScreenAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub screenXXX: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbSwitchScreenAction"][::std::mem::size_of::<_XkbSwitchScreenAction>() - 3usize];
    ["Alignment of _XkbSwitchScreenAction"]
        [::std::mem::align_of::<_XkbSwitchScreenAction>() - 1usize];
    ["Offset of field: _XkbSwitchScreenAction::type_"]
        [::std::mem::offset_of!(_XkbSwitchScreenAction, type_) - 0usize];
    ["Offset of field: _XkbSwitchScreenAction::flags"]
        [::std::mem::offset_of!(_XkbSwitchScreenAction, flags) - 1usize];
    ["Offset of field: _XkbSwitchScreenAction::screenXXX"]
        [::std::mem::offset_of!(_XkbSwitchScreenAction, screenXXX) - 2usize];
};
pub type XkbSwitchScreenAction = _XkbSwitchScreenAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCtrlsAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub ctrls3: ::std::os::raw::c_uchar,
    pub ctrls2: ::std::os::raw::c_uchar,
    pub ctrls1: ::std::os::raw::c_uchar,
    pub ctrls0: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCtrlsAction"][::std::mem::size_of::<_XkbCtrlsAction>() - 6usize];
    ["Alignment of _XkbCtrlsAction"][::std::mem::align_of::<_XkbCtrlsAction>() - 1usize];
    ["Offset of field: _XkbCtrlsAction::type_"]
        [::std::mem::offset_of!(_XkbCtrlsAction, type_) - 0usize];
    ["Offset of field: _XkbCtrlsAction::flags"]
        [::std::mem::offset_of!(_XkbCtrlsAction, flags) - 1usize];
    ["Offset of field: _XkbCtrlsAction::ctrls3"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls3) - 2usize];
    ["Offset of field: _XkbCtrlsAction::ctrls2"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls2) - 3usize];
    ["Offset of field: _XkbCtrlsAction::ctrls1"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls1) - 4usize];
    ["Offset of field: _XkbCtrlsAction::ctrls0"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls0) - 5usize];
};
pub type XkbCtrlsAction = _XkbCtrlsAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMessageAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub message: [::std::os::raw::c_uchar; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMessageAction"][::std::mem::size_of::<_XkbMessageAction>() - 8usize];
    ["Alignment of _XkbMessageAction"][::std::mem::align_of::<_XkbMessageAction>() - 1usize];
    ["Offset of field: _XkbMessageAction::type_"]
        [::std::mem::offset_of!(_XkbMessageAction, type_) - 0usize];
    ["Offset of field: _XkbMessageAction::flags"]
        [::std::mem::offset_of!(_XkbMessageAction, flags) - 1usize];
    ["Offset of field: _XkbMessageAction::message"]
        [::std::mem::offset_of!(_XkbMessageAction, message) - 2usize];
};
pub type XkbMessageAction = _XkbMessageAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbRedirectKeyAction {
    pub type_: ::std::os::raw::c_uchar,
    pub new_key: ::std::os::raw::c_uchar,
    pub mods_mask: ::std::os::raw::c_uchar,
    pub mods: ::std::os::raw::c_uchar,
    pub vmods_mask0: ::std::os::raw::c_uchar,
    pub vmods_mask1: ::std::os::raw::c_uchar,
    pub vmods0: ::std::os::raw::c_uchar,
    pub vmods1: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbRedirectKeyAction"][::std::mem::size_of::<_XkbRedirectKeyAction>() - 8usize];
    ["Alignment of _XkbRedirectKeyAction"]
        [::std::mem::align_of::<_XkbRedirectKeyAction>() - 1usize];
    ["Offset of field: _XkbRedirectKeyAction::type_"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, type_) - 0usize];
    ["Offset of field: _XkbRedirectKeyAction::new_key"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, new_key) - 1usize];
    ["Offset of field: _XkbRedirectKeyAction::mods_mask"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, mods_mask) - 2usize];
    ["Offset of field: _XkbRedirectKeyAction::mods"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, mods) - 3usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods_mask0"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods_mask0) - 4usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods_mask1"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods_mask1) - 5usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods0"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods0) - 6usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods1"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods1) - 7usize];
};
pub type XkbRedirectKeyAction = _XkbRedirectKeyAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceBtnAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub count: ::std::os::raw::c_uchar,
    pub button: ::std::os::raw::c_uchar,
    pub device: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceBtnAction"][::std::mem::size_of::<_XkbDeviceBtnAction>() - 5usize];
    ["Alignment of _XkbDeviceBtnAction"][::std::mem::align_of::<_XkbDeviceBtnAction>() - 1usize];
    ["Offset of field: _XkbDeviceBtnAction::type_"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, type_) - 0usize];
    ["Offset of field: _XkbDeviceBtnAction::flags"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, flags) - 1usize];
    ["Offset of field: _XkbDeviceBtnAction::count"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, count) - 2usize];
    ["Offset of field: _XkbDeviceBtnAction::button"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, button) - 3usize];
    ["Offset of field: _XkbDeviceBtnAction::device"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, device) - 4usize];
};
pub type XkbDeviceBtnAction = _XkbDeviceBtnAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceValuatorAction {
    pub type_: ::std::os::raw::c_uchar,
    pub device: ::std::os::raw::c_uchar,
    pub v1_what: ::std::os::raw::c_uchar,
    pub v1_ndx: ::std::os::raw::c_uchar,
    pub v1_value: ::std::os::raw::c_uchar,
    pub v2_what: ::std::os::raw::c_uchar,
    pub v2_ndx: ::std::os::raw::c_uchar,
    pub v2_value: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceValuatorAction"]
        [::std::mem::size_of::<_XkbDeviceValuatorAction>() - 8usize];
    ["Alignment of _XkbDeviceValuatorAction"]
        [::std::mem::align_of::<_XkbDeviceValuatorAction>() - 1usize];
    ["Offset of field: _XkbDeviceValuatorAction::type_"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, type_) - 0usize];
    ["Offset of field: _XkbDeviceValuatorAction::device"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, device) - 1usize];
    ["Offset of field: _XkbDeviceValuatorAction::v1_what"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v1_what) - 2usize];
    ["Offset of field: _XkbDeviceValuatorAction::v1_ndx"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v1_ndx) - 3usize];
    ["Offset of field: _XkbDeviceValuatorAction::v1_value"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v1_value) - 4usize];
    ["Offset of field: _XkbDeviceValuatorAction::v2_what"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v2_what) - 5usize];
    ["Offset of field: _XkbDeviceValuatorAction::v2_ndx"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v2_ndx) - 6usize];
    ["Offset of field: _XkbDeviceValuatorAction::v2_value"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v2_value) - 7usize];
};
pub type XkbDeviceValuatorAction = _XkbDeviceValuatorAction;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XkbAction {
    pub any: XkbAnyAction,
    pub mods: XkbModAction,
    pub group: XkbGroupAction,
    pub iso: XkbISOAction,
    pub ptr: XkbPtrAction,
    pub btn: XkbPtrBtnAction,
    pub dflt: XkbPtrDfltAction,
    pub screen: XkbSwitchScreenAction,
    pub ctrls: XkbCtrlsAction,
    pub msg: XkbMessageAction,
    pub redirect: XkbRedirectKeyAction,
    pub devbtn: XkbDeviceBtnAction,
    pub devval: XkbDeviceValuatorAction,
    pub type_: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAction"][::std::mem::size_of::<_XkbAction>() - 8usize];
    ["Alignment of _XkbAction"][::std::mem::align_of::<_XkbAction>() - 1usize];
    ["Offset of field: _XkbAction::any"][::std::mem::offset_of!(_XkbAction, any) - 0usize];
    ["Offset of field: _XkbAction::mods"][::std::mem::offset_of!(_XkbAction, mods) - 0usize];
    ["Offset of field: _XkbAction::group"][::std::mem::offset_of!(_XkbAction, group) - 0usize];
    ["Offset of field: _XkbAction::iso"][::std::mem::offset_of!(_XkbAction, iso) - 0usize];
    ["Offset of field: _XkbAction::ptr"][::std::mem::offset_of!(_XkbAction, ptr) - 0usize];
    ["Offset of field: _XkbAction::btn"][::std::mem::offset_of!(_XkbAction, btn) - 0usize];
    ["Offset of field: _XkbAction::dflt"][::std::mem::offset_of!(_XkbAction, dflt) - 0usize];
    ["Offset of field: _XkbAction::screen"][::std::mem::offset_of!(_XkbAction, screen) - 0usize];
    ["Offset of field: _XkbAction::ctrls"][::std::mem::offset_of!(_XkbAction, ctrls) - 0usize];
    ["Offset of field: _XkbAction::msg"][::std::mem::offset_of!(_XkbAction, msg) - 0usize];
    ["Offset of field: _XkbAction::redirect"]
        [::std::mem::offset_of!(_XkbAction, redirect) - 0usize];
    ["Offset of field: _XkbAction::devbtn"][::std::mem::offset_of!(_XkbAction, devbtn) - 0usize];
    ["Offset of field: _XkbAction::devval"][::std::mem::offset_of!(_XkbAction, devval) - 0usize];
    ["Offset of field: _XkbAction::type_"][::std::mem::offset_of!(_XkbAction, type_) - 0usize];
};
pub type XkbAction = _XkbAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbControls {
    pub mk_dflt_btn: ::std::os::raw::c_uchar,
    pub num_groups: ::std::os::raw::c_uchar,
    pub groups_wrap: ::std::os::raw::c_uchar,
    pub internal: XkbModsRec,
    pub ignore_lock: XkbModsRec,
    pub enabled_ctrls: ::std::os::raw::c_uint,
    pub repeat_delay: ::std::os::raw::c_ushort,
    pub repeat_interval: ::std::os::raw::c_ushort,
    pub slow_keys_delay: ::std::os::raw::c_ushort,
    pub debounce_delay: ::std::os::raw::c_ushort,
    pub mk_delay: ::std::os::raw::c_ushort,
    pub mk_interval: ::std::os::raw::c_ushort,
    pub mk_time_to_max: ::std::os::raw::c_ushort,
    pub mk_max_speed: ::std::os::raw::c_ushort,
    pub mk_curve: ::std::os::raw::c_short,
    pub ax_options: ::std::os::raw::c_ushort,
    pub ax_timeout: ::std::os::raw::c_ushort,
    pub axt_opts_mask: ::std::os::raw::c_ushort,
    pub axt_opts_values: ::std::os::raw::c_ushort,
    pub axt_ctrls_mask: ::std::os::raw::c_uint,
    pub axt_ctrls_values: ::std::os::raw::c_uint,
    pub per_key_repeat: [::std::os::raw::c_uchar; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbControls"][::std::mem::size_of::<_XkbControls>() - 84usize];
    ["Alignment of _XkbControls"][::std::mem::align_of::<_XkbControls>() - 4usize];
    ["Offset of field: _XkbControls::mk_dflt_btn"]
        [::std::mem::offset_of!(_XkbControls, mk_dflt_btn) - 0usize];
    ["Offset of field: _XkbControls::num_groups"]
        [::std::mem::offset_of!(_XkbControls, num_groups) - 1usize];
    ["Offset of field: _XkbControls::groups_wrap"]
        [::std::mem::offset_of!(_XkbControls, groups_wrap) - 2usize];
    ["Offset of field: _XkbControls::internal"]
        [::std::mem::offset_of!(_XkbControls, internal) - 4usize];
    ["Offset of field: _XkbControls::ignore_lock"]
        [::std::mem::offset_of!(_XkbControls, ignore_lock) - 8usize];
    ["Offset of field: _XkbControls::enabled_ctrls"]
        [::std::mem::offset_of!(_XkbControls, enabled_ctrls) - 12usize];
    ["Offset of field: _XkbControls::repeat_delay"]
        [::std::mem::offset_of!(_XkbControls, repeat_delay) - 16usize];
    ["Offset of field: _XkbControls::repeat_interval"]
        [::std::mem::offset_of!(_XkbControls, repeat_interval) - 18usize];
    ["Offset of field: _XkbControls::slow_keys_delay"]
        [::std::mem::offset_of!(_XkbControls, slow_keys_delay) - 20usize];
    ["Offset of field: _XkbControls::debounce_delay"]
        [::std::mem::offset_of!(_XkbControls, debounce_delay) - 22usize];
    ["Offset of field: _XkbControls::mk_delay"]
        [::std::mem::offset_of!(_XkbControls, mk_delay) - 24usize];
    ["Offset of field: _XkbControls::mk_interval"]
        [::std::mem::offset_of!(_XkbControls, mk_interval) - 26usize];
    ["Offset of field: _XkbControls::mk_time_to_max"]
        [::std::mem::offset_of!(_XkbControls, mk_time_to_max) - 28usize];
    ["Offset of field: _XkbControls::mk_max_speed"]
        [::std::mem::offset_of!(_XkbControls, mk_max_speed) - 30usize];
    ["Offset of field: _XkbControls::mk_curve"]
        [::std::mem::offset_of!(_XkbControls, mk_curve) - 32usize];
    ["Offset of field: _XkbControls::ax_options"]
        [::std::mem::offset_of!(_XkbControls, ax_options) - 34usize];
    ["Offset of field: _XkbControls::ax_timeout"]
        [::std::mem::offset_of!(_XkbControls, ax_timeout) - 36usize];
    ["Offset of field: _XkbControls::axt_opts_mask"]
        [::std::mem::offset_of!(_XkbControls, axt_opts_mask) - 38usize];
    ["Offset of field: _XkbControls::axt_opts_values"]
        [::std::mem::offset_of!(_XkbControls, axt_opts_values) - 40usize];
    ["Offset of field: _XkbControls::axt_ctrls_mask"]
        [::std::mem::offset_of!(_XkbControls, axt_ctrls_mask) - 44usize];
    ["Offset of field: _XkbControls::axt_ctrls_values"]
        [::std::mem::offset_of!(_XkbControls, axt_ctrls_values) - 48usize];
    ["Offset of field: _XkbControls::per_key_repeat"]
        [::std::mem::offset_of!(_XkbControls, per_key_repeat) - 52usize];
};
pub type XkbControlsRec = _XkbControls;
pub type XkbControlsPtr = *mut _XkbControls;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbServerMapRec {
    pub num_acts: ::std::os::raw::c_ushort,
    pub size_acts: ::std::os::raw::c_ushort,
    pub acts: *mut XkbAction,
    pub behaviors: *mut XkbBehavior,
    pub key_acts: *mut ::std::os::raw::c_ushort,
    pub explicit: *mut ::std::os::raw::c_uchar,
    pub vmods: [::std::os::raw::c_uchar; 16usize],
    pub vmodmap: *mut ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbServerMapRec"][::std::mem::size_of::<_XkbServerMapRec>() - 64usize];
    ["Alignment of _XkbServerMapRec"][::std::mem::align_of::<_XkbServerMapRec>() - 8usize];
    ["Offset of field: _XkbServerMapRec::num_acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, num_acts) - 0usize];
    ["Offset of field: _XkbServerMapRec::size_acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, size_acts) - 2usize];
    ["Offset of field: _XkbServerMapRec::acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, acts) - 8usize];
    ["Offset of field: _XkbServerMapRec::behaviors"]
        [::std::mem::offset_of!(_XkbServerMapRec, behaviors) - 16usize];
    ["Offset of field: _XkbServerMapRec::key_acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, key_acts) - 24usize];
    ["Offset of field: _XkbServerMapRec::explicit"]
        [::std::mem::offset_of!(_XkbServerMapRec, explicit) - 32usize];
    ["Offset of field: _XkbServerMapRec::vmods"]
        [::std::mem::offset_of!(_XkbServerMapRec, vmods) - 40usize];
    ["Offset of field: _XkbServerMapRec::vmodmap"]
        [::std::mem::offset_of!(_XkbServerMapRec, vmodmap) - 56usize];
};
pub type XkbServerMapRec = _XkbServerMapRec;
pub type XkbServerMapPtr = *mut _XkbServerMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbSymMapRec {
    pub kt_index: [::std::os::raw::c_uchar; 4usize],
    pub group_info: ::std::os::raw::c_uchar,
    pub width: ::std::os::raw::c_uchar,
    pub offset: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbSymMapRec"][::std::mem::size_of::<_XkbSymMapRec>() - 8usize];
    ["Alignment of _XkbSymMapRec"][::std::mem::align_of::<_XkbSymMapRec>() - 2usize];
    ["Offset of field: _XkbSymMapRec::kt_index"]
        [::std::mem::offset_of!(_XkbSymMapRec, kt_index) - 0usize];
    ["Offset of field: _XkbSymMapRec::group_info"]
        [::std::mem::offset_of!(_XkbSymMapRec, group_info) - 4usize];
    ["Offset of field: _XkbSymMapRec::width"]
        [::std::mem::offset_of!(_XkbSymMapRec, width) - 5usize];
    ["Offset of field: _XkbSymMapRec::offset"]
        [::std::mem::offset_of!(_XkbSymMapRec, offset) - 6usize];
};
pub type XkbSymMapRec = _XkbSymMapRec;
pub type XkbSymMapPtr = *mut _XkbSymMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbClientMapRec {
    pub size_types: ::std::os::raw::c_uchar,
    pub num_types: ::std::os::raw::c_uchar,
    pub types: XkbKeyTypePtr,
    pub size_syms: ::std::os::raw::c_ushort,
    pub num_syms: ::std::os::raw::c_ushort,
    pub syms: *mut KeySym,
    pub key_sym_map: XkbSymMapPtr,
    pub modmap: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbClientMapRec"][::std::mem::size_of::<_XkbClientMapRec>() - 48usize];
    ["Alignment of _XkbClientMapRec"][::std::mem::align_of::<_XkbClientMapRec>() - 8usize];
    ["Offset of field: _XkbClientMapRec::size_types"]
        [::std::mem::offset_of!(_XkbClientMapRec, size_types) - 0usize];
    ["Offset of field: _XkbClientMapRec::num_types"]
        [::std::mem::offset_of!(_XkbClientMapRec, num_types) - 1usize];
    ["Offset of field: _XkbClientMapRec::types"]
        [::std::mem::offset_of!(_XkbClientMapRec, types) - 8usize];
    ["Offset of field: _XkbClientMapRec::size_syms"]
        [::std::mem::offset_of!(_XkbClientMapRec, size_syms) - 16usize];
    ["Offset of field: _XkbClientMapRec::num_syms"]
        [::std::mem::offset_of!(_XkbClientMapRec, num_syms) - 18usize];
    ["Offset of field: _XkbClientMapRec::syms"]
        [::std::mem::offset_of!(_XkbClientMapRec, syms) - 24usize];
    ["Offset of field: _XkbClientMapRec::key_sym_map"]
        [::std::mem::offset_of!(_XkbClientMapRec, key_sym_map) - 32usize];
    ["Offset of field: _XkbClientMapRec::modmap"]
        [::std::mem::offset_of!(_XkbClientMapRec, modmap) - 40usize];
};
pub type XkbClientMapRec = _XkbClientMapRec;
pub type XkbClientMapPtr = *mut _XkbClientMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbSymInterpretRec {
    pub sym: KeySym,
    pub flags: ::std::os::raw::c_uchar,
    pub match_: ::std::os::raw::c_uchar,
    pub mods: ::std::os::raw::c_uchar,
    pub virtual_mod: ::std::os::raw::c_uchar,
    pub act: XkbAnyAction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbSymInterpretRec"][::std::mem::size_of::<_XkbSymInterpretRec>() - 24usize];
    ["Alignment of _XkbSymInterpretRec"][::std::mem::align_of::<_XkbSymInterpretRec>() - 8usize];
    ["Offset of field: _XkbSymInterpretRec::sym"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, sym) - 0usize];
    ["Offset of field: _XkbSymInterpretRec::flags"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, flags) - 8usize];
    ["Offset of field: _XkbSymInterpretRec::match_"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, match_) - 9usize];
    ["Offset of field: _XkbSymInterpretRec::mods"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, mods) - 10usize];
    ["Offset of field: _XkbSymInterpretRec::virtual_mod"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, virtual_mod) - 11usize];
    ["Offset of field: _XkbSymInterpretRec::act"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, act) - 12usize];
};
pub type XkbSymInterpretRec = _XkbSymInterpretRec;
pub type XkbSymInterpretPtr = *mut _XkbSymInterpretRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCompatMapRec {
    pub sym_interpret: XkbSymInterpretPtr,
    pub groups: [XkbModsRec; 4usize],
    pub num_si: ::std::os::raw::c_ushort,
    pub size_si: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCompatMapRec"][::std::mem::size_of::<_XkbCompatMapRec>() - 32usize];
    ["Alignment of _XkbCompatMapRec"][::std::mem::align_of::<_XkbCompatMapRec>() - 8usize];
    ["Offset of field: _XkbCompatMapRec::sym_interpret"]
        [::std::mem::offset_of!(_XkbCompatMapRec, sym_interpret) - 0usize];
    ["Offset of field: _XkbCompatMapRec::groups"]
        [::std::mem::offset_of!(_XkbCompatMapRec, groups) - 8usize];
    ["Offset of field: _XkbCompatMapRec::num_si"]
        [::std::mem::offset_of!(_XkbCompatMapRec, num_si) - 24usize];
    ["Offset of field: _XkbCompatMapRec::size_si"]
        [::std::mem::offset_of!(_XkbCompatMapRec, size_si) - 26usize];
};
pub type XkbCompatMapRec = _XkbCompatMapRec;
pub type XkbCompatMapPtr = *mut _XkbCompatMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorMapRec {
    pub flags: ::std::os::raw::c_uchar,
    pub which_groups: ::std::os::raw::c_uchar,
    pub groups: ::std::os::raw::c_uchar,
    pub which_mods: ::std::os::raw::c_uchar,
    pub mods: XkbModsRec,
    pub ctrls: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorMapRec"][::std::mem::size_of::<_XkbIndicatorMapRec>() - 12usize];
    ["Alignment of _XkbIndicatorMapRec"][::std::mem::align_of::<_XkbIndicatorMapRec>() - 4usize];
    ["Offset of field: _XkbIndicatorMapRec::flags"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, flags) - 0usize];
    ["Offset of field: _XkbIndicatorMapRec::which_groups"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, which_groups) - 1usize];
    ["Offset of field: _XkbIndicatorMapRec::groups"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, groups) - 2usize];
    ["Offset of field: _XkbIndicatorMapRec::which_mods"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, which_mods) - 3usize];
    ["Offset of field: _XkbIndicatorMapRec::mods"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, mods) - 4usize];
    ["Offset of field: _XkbIndicatorMapRec::ctrls"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, ctrls) - 8usize];
};
pub type XkbIndicatorMapRec = _XkbIndicatorMapRec;
pub type XkbIndicatorMapPtr = *mut _XkbIndicatorMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorRec {
    pub phys_indicators: ::std::os::raw::c_ulong,
    pub maps: [XkbIndicatorMapRec; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorRec"][::std::mem::size_of::<_XkbIndicatorRec>() - 392usize];
    ["Alignment of _XkbIndicatorRec"][::std::mem::align_of::<_XkbIndicatorRec>() - 8usize];
    ["Offset of field: _XkbIndicatorRec::phys_indicators"]
        [::std::mem::offset_of!(_XkbIndicatorRec, phys_indicators) - 0usize];
    ["Offset of field: _XkbIndicatorRec::maps"]
        [::std::mem::offset_of!(_XkbIndicatorRec, maps) - 8usize];
};
pub type XkbIndicatorRec = _XkbIndicatorRec;
pub type XkbIndicatorPtr = *mut _XkbIndicatorRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKeyNameRec {
    pub name: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKeyNameRec"][::std::mem::size_of::<_XkbKeyNameRec>() - 4usize];
    ["Alignment of _XkbKeyNameRec"][::std::mem::align_of::<_XkbKeyNameRec>() - 1usize];
    ["Offset of field: _XkbKeyNameRec::name"]
        [::std::mem::offset_of!(_XkbKeyNameRec, name) - 0usize];
};
pub type XkbKeyNameRec = _XkbKeyNameRec;
pub type XkbKeyNamePtr = *mut _XkbKeyNameRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKeyAliasRec {
    pub real: [::std::os::raw::c_char; 4usize],
    pub alias: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKeyAliasRec"][::std::mem::size_of::<_XkbKeyAliasRec>() - 8usize];
    ["Alignment of _XkbKeyAliasRec"][::std::mem::align_of::<_XkbKeyAliasRec>() - 1usize];
    ["Offset of field: _XkbKeyAliasRec::real"]
        [::std::mem::offset_of!(_XkbKeyAliasRec, real) - 0usize];
    ["Offset of field: _XkbKeyAliasRec::alias"]
        [::std::mem::offset_of!(_XkbKeyAliasRec, alias) - 4usize];
};
pub type XkbKeyAliasRec = _XkbKeyAliasRec;
pub type XkbKeyAliasPtr = *mut _XkbKeyAliasRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNamesRec {
    pub keycodes: Atom,
    pub geometry: Atom,
    pub symbols: Atom,
    pub types: Atom,
    pub compat: Atom,
    pub vmods: [Atom; 16usize],
    pub indicators: [Atom; 32usize],
    pub groups: [Atom; 4usize],
    pub keys: XkbKeyNamePtr,
    pub key_aliases: XkbKeyAliasPtr,
    pub radio_groups: *mut Atom,
    pub phys_symbols: Atom,
    pub num_keys: ::std::os::raw::c_uchar,
    pub num_key_aliases: ::std::os::raw::c_uchar,
    pub num_rg: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNamesRec"][::std::mem::size_of::<_XkbNamesRec>() - 496usize];
    ["Alignment of _XkbNamesRec"][::std::mem::align_of::<_XkbNamesRec>() - 8usize];
    ["Offset of field: _XkbNamesRec::keycodes"]
        [::std::mem::offset_of!(_XkbNamesRec, keycodes) - 0usize];
    ["Offset of field: _XkbNamesRec::geometry"]
        [::std::mem::offset_of!(_XkbNamesRec, geometry) - 8usize];
    ["Offset of field: _XkbNamesRec::symbols"]
        [::std::mem::offset_of!(_XkbNamesRec, symbols) - 16usize];
    ["Offset of field: _XkbNamesRec::types"][::std::mem::offset_of!(_XkbNamesRec, types) - 24usize];
    ["Offset of field: _XkbNamesRec::compat"]
        [::std::mem::offset_of!(_XkbNamesRec, compat) - 32usize];
    ["Offset of field: _XkbNamesRec::vmods"][::std::mem::offset_of!(_XkbNamesRec, vmods) - 40usize];
    ["Offset of field: _XkbNamesRec::indicators"]
        [::std::mem::offset_of!(_XkbNamesRec, indicators) - 168usize];
    ["Offset of field: _XkbNamesRec::groups"]
        [::std::mem::offset_of!(_XkbNamesRec, groups) - 424usize];
    ["Offset of field: _XkbNamesRec::keys"][::std::mem::offset_of!(_XkbNamesRec, keys) - 456usize];
    ["Offset of field: _XkbNamesRec::key_aliases"]
        [::std::mem::offset_of!(_XkbNamesRec, key_aliases) - 464usize];
    ["Offset of field: _XkbNamesRec::radio_groups"]
        [::std::mem::offset_of!(_XkbNamesRec, radio_groups) - 472usize];
    ["Offset of field: _XkbNamesRec::phys_symbols"]
        [::std::mem::offset_of!(_XkbNamesRec, phys_symbols) - 480usize];
    ["Offset of field: _XkbNamesRec::num_keys"]
        [::std::mem::offset_of!(_XkbNamesRec, num_keys) - 488usize];
    ["Offset of field: _XkbNamesRec::num_key_aliases"]
        [::std::mem::offset_of!(_XkbNamesRec, num_key_aliases) - 489usize];
    ["Offset of field: _XkbNamesRec::num_rg"]
        [::std::mem::offset_of!(_XkbNamesRec, num_rg) - 490usize];
};
pub type XkbNamesRec = _XkbNamesRec;
pub type XkbNamesPtr = *mut _XkbNamesRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbGeometry {
    _unused: [u8; 0],
}
pub type XkbGeometryPtr = *mut _XkbGeometry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDesc {
    pub dpy: *mut _XDisplay,
    pub flags: ::std::os::raw::c_ushort,
    pub device_spec: ::std::os::raw::c_ushort,
    pub min_key_code: KeyCode,
    pub max_key_code: KeyCode,
    pub ctrls: XkbControlsPtr,
    pub server: XkbServerMapPtr,
    pub map: XkbClientMapPtr,
    pub indicators: XkbIndicatorPtr,
    pub names: XkbNamesPtr,
    pub compat: XkbCompatMapPtr,
    pub geom: XkbGeometryPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDesc"][::std::mem::size_of::<_XkbDesc>() - 72usize];
    ["Alignment of _XkbDesc"][::std::mem::align_of::<_XkbDesc>() - 8usize];
    ["Offset of field: _XkbDesc::dpy"][::std::mem::offset_of!(_XkbDesc, dpy) - 0usize];
    ["Offset of field: _XkbDesc::flags"][::std::mem::offset_of!(_XkbDesc, flags) - 8usize];
    ["Offset of field: _XkbDesc::device_spec"]
        [::std::mem::offset_of!(_XkbDesc, device_spec) - 10usize];
    ["Offset of field: _XkbDesc::min_key_code"]
        [::std::mem::offset_of!(_XkbDesc, min_key_code) - 12usize];
    ["Offset of field: _XkbDesc::max_key_code"]
        [::std::mem::offset_of!(_XkbDesc, max_key_code) - 13usize];
    ["Offset of field: _XkbDesc::ctrls"][::std::mem::offset_of!(_XkbDesc, ctrls) - 16usize];
    ["Offset of field: _XkbDesc::server"][::std::mem::offset_of!(_XkbDesc, server) - 24usize];
    ["Offset of field: _XkbDesc::map"][::std::mem::offset_of!(_XkbDesc, map) - 32usize];
    ["Offset of field: _XkbDesc::indicators"]
        [::std::mem::offset_of!(_XkbDesc, indicators) - 40usize];
    ["Offset of field: _XkbDesc::names"][::std::mem::offset_of!(_XkbDesc, names) - 48usize];
    ["Offset of field: _XkbDesc::compat"][::std::mem::offset_of!(_XkbDesc, compat) - 56usize];
    ["Offset of field: _XkbDesc::geom"][::std::mem::offset_of!(_XkbDesc, geom) - 64usize];
};
pub type XkbDescRec = _XkbDesc;
pub type XkbDescPtr = *mut _XkbDesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMapChanges {
    pub changed: ::std::os::raw::c_ushort,
    pub min_key_code: KeyCode,
    pub max_key_code: KeyCode,
    pub first_type: ::std::os::raw::c_uchar,
    pub num_types: ::std::os::raw::c_uchar,
    pub first_key_sym: KeyCode,
    pub num_key_syms: ::std::os::raw::c_uchar,
    pub first_key_act: KeyCode,
    pub num_key_acts: ::std::os::raw::c_uchar,
    pub first_key_behavior: KeyCode,
    pub num_key_behaviors: ::std::os::raw::c_uchar,
    pub first_key_explicit: KeyCode,
    pub num_key_explicit: ::std::os::raw::c_uchar,
    pub first_modmap_key: KeyCode,
    pub num_modmap_keys: ::std::os::raw::c_uchar,
    pub first_vmodmap_key: KeyCode,
    pub num_vmodmap_keys: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub vmods: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMapChanges"][::std::mem::size_of::<_XkbMapChanges>() - 22usize];
    ["Alignment of _XkbMapChanges"][::std::mem::align_of::<_XkbMapChanges>() - 2usize];
    ["Offset of field: _XkbMapChanges::changed"]
        [::std::mem::offset_of!(_XkbMapChanges, changed) - 0usize];
    ["Offset of field: _XkbMapChanges::min_key_code"]
        [::std::mem::offset_of!(_XkbMapChanges, min_key_code) - 2usize];
    ["Offset of field: _XkbMapChanges::max_key_code"]
        [::std::mem::offset_of!(_XkbMapChanges, max_key_code) - 3usize];
    ["Offset of field: _XkbMapChanges::first_type"]
        [::std::mem::offset_of!(_XkbMapChanges, first_type) - 4usize];
    ["Offset of field: _XkbMapChanges::num_types"]
        [::std::mem::offset_of!(_XkbMapChanges, num_types) - 5usize];
    ["Offset of field: _XkbMapChanges::first_key_sym"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_sym) - 6usize];
    ["Offset of field: _XkbMapChanges::num_key_syms"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_syms) - 7usize];
    ["Offset of field: _XkbMapChanges::first_key_act"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_act) - 8usize];
    ["Offset of field: _XkbMapChanges::num_key_acts"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_acts) - 9usize];
    ["Offset of field: _XkbMapChanges::first_key_behavior"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_behavior) - 10usize];
    ["Offset of field: _XkbMapChanges::num_key_behaviors"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_behaviors) - 11usize];
    ["Offset of field: _XkbMapChanges::first_key_explicit"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_explicit) - 12usize];
    ["Offset of field: _XkbMapChanges::num_key_explicit"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_explicit) - 13usize];
    ["Offset of field: _XkbMapChanges::first_modmap_key"]
        [::std::mem::offset_of!(_XkbMapChanges, first_modmap_key) - 14usize];
    ["Offset of field: _XkbMapChanges::num_modmap_keys"]
        [::std::mem::offset_of!(_XkbMapChanges, num_modmap_keys) - 15usize];
    ["Offset of field: _XkbMapChanges::first_vmodmap_key"]
        [::std::mem::offset_of!(_XkbMapChanges, first_vmodmap_key) - 16usize];
    ["Offset of field: _XkbMapChanges::num_vmodmap_keys"]
        [::std::mem::offset_of!(_XkbMapChanges, num_vmodmap_keys) - 17usize];
    ["Offset of field: _XkbMapChanges::pad"][::std::mem::offset_of!(_XkbMapChanges, pad) - 18usize];
    ["Offset of field: _XkbMapChanges::vmods"]
        [::std::mem::offset_of!(_XkbMapChanges, vmods) - 20usize];
};
pub type XkbMapChangesRec = _XkbMapChanges;
pub type XkbMapChangesPtr = *mut _XkbMapChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbControlsChanges {
    pub changed_ctrls: ::std::os::raw::c_uint,
    pub enabled_ctrls_changes: ::std::os::raw::c_uint,
    pub num_groups_changed: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbControlsChanges"][::std::mem::size_of::<_XkbControlsChanges>() - 12usize];
    ["Alignment of _XkbControlsChanges"][::std::mem::align_of::<_XkbControlsChanges>() - 4usize];
    ["Offset of field: _XkbControlsChanges::changed_ctrls"]
        [::std::mem::offset_of!(_XkbControlsChanges, changed_ctrls) - 0usize];
    ["Offset of field: _XkbControlsChanges::enabled_ctrls_changes"]
        [::std::mem::offset_of!(_XkbControlsChanges, enabled_ctrls_changes) - 4usize];
    ["Offset of field: _XkbControlsChanges::num_groups_changed"]
        [::std::mem::offset_of!(_XkbControlsChanges, num_groups_changed) - 8usize];
};
pub type XkbControlsChangesRec = _XkbControlsChanges;
pub type XkbControlsChangesPtr = *mut _XkbControlsChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorChanges {
    pub state_changes: ::std::os::raw::c_uint,
    pub map_changes: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorChanges"][::std::mem::size_of::<_XkbIndicatorChanges>() - 8usize];
    ["Alignment of _XkbIndicatorChanges"][::std::mem::align_of::<_XkbIndicatorChanges>() - 4usize];
    ["Offset of field: _XkbIndicatorChanges::state_changes"]
        [::std::mem::offset_of!(_XkbIndicatorChanges, state_changes) - 0usize];
    ["Offset of field: _XkbIndicatorChanges::map_changes"]
        [::std::mem::offset_of!(_XkbIndicatorChanges, map_changes) - 4usize];
};
pub type XkbIndicatorChangesRec = _XkbIndicatorChanges;
pub type XkbIndicatorChangesPtr = *mut _XkbIndicatorChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNameChanges {
    pub changed: ::std::os::raw::c_uint,
    pub first_type: ::std::os::raw::c_uchar,
    pub num_types: ::std::os::raw::c_uchar,
    pub first_lvl: ::std::os::raw::c_uchar,
    pub num_lvls: ::std::os::raw::c_uchar,
    pub num_aliases: ::std::os::raw::c_uchar,
    pub num_rg: ::std::os::raw::c_uchar,
    pub first_key: ::std::os::raw::c_uchar,
    pub num_keys: ::std::os::raw::c_uchar,
    pub changed_vmods: ::std::os::raw::c_ushort,
    pub changed_indicators: ::std::os::raw::c_ulong,
    pub changed_groups: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNameChanges"][::std::mem::size_of::<_XkbNameChanges>() - 32usize];
    ["Alignment of _XkbNameChanges"][::std::mem::align_of::<_XkbNameChanges>() - 8usize];
    ["Offset of field: _XkbNameChanges::changed"]
        [::std::mem::offset_of!(_XkbNameChanges, changed) - 0usize];
    ["Offset of field: _XkbNameChanges::first_type"]
        [::std::mem::offset_of!(_XkbNameChanges, first_type) - 4usize];
    ["Offset of field: _XkbNameChanges::num_types"]
        [::std::mem::offset_of!(_XkbNameChanges, num_types) - 5usize];
    ["Offset of field: _XkbNameChanges::first_lvl"]
        [::std::mem::offset_of!(_XkbNameChanges, first_lvl) - 6usize];
    ["Offset of field: _XkbNameChanges::num_lvls"]
        [::std::mem::offset_of!(_XkbNameChanges, num_lvls) - 7usize];
    ["Offset of field: _XkbNameChanges::num_aliases"]
        [::std::mem::offset_of!(_XkbNameChanges, num_aliases) - 8usize];
    ["Offset of field: _XkbNameChanges::num_rg"]
        [::std::mem::offset_of!(_XkbNameChanges, num_rg) - 9usize];
    ["Offset of field: _XkbNameChanges::first_key"]
        [::std::mem::offset_of!(_XkbNameChanges, first_key) - 10usize];
    ["Offset of field: _XkbNameChanges::num_keys"]
        [::std::mem::offset_of!(_XkbNameChanges, num_keys) - 11usize];
    ["Offset of field: _XkbNameChanges::changed_vmods"]
        [::std::mem::offset_of!(_XkbNameChanges, changed_vmods) - 12usize];
    ["Offset of field: _XkbNameChanges::changed_indicators"]
        [::std::mem::offset_of!(_XkbNameChanges, changed_indicators) - 16usize];
    ["Offset of field: _XkbNameChanges::changed_groups"]
        [::std::mem::offset_of!(_XkbNameChanges, changed_groups) - 24usize];
};
pub type XkbNameChangesRec = _XkbNameChanges;
pub type XkbNameChangesPtr = *mut _XkbNameChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCompatChanges {
    pub changed_groups: ::std::os::raw::c_uchar,
    pub first_si: ::std::os::raw::c_ushort,
    pub num_si: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCompatChanges"][::std::mem::size_of::<_XkbCompatChanges>() - 6usize];
    ["Alignment of _XkbCompatChanges"][::std::mem::align_of::<_XkbCompatChanges>() - 2usize];
    ["Offset of field: _XkbCompatChanges::changed_groups"]
        [::std::mem::offset_of!(_XkbCompatChanges, changed_groups) - 0usize];
    ["Offset of field: _XkbCompatChanges::first_si"]
        [::std::mem::offset_of!(_XkbCompatChanges, first_si) - 2usize];
    ["Offset of field: _XkbCompatChanges::num_si"]
        [::std::mem::offset_of!(_XkbCompatChanges, num_si) - 4usize];
};
pub type XkbCompatChangesRec = _XkbCompatChanges;
pub type XkbCompatChangesPtr = *mut _XkbCompatChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbChanges {
    pub device_spec: ::std::os::raw::c_ushort,
    pub state_changes: ::std::os::raw::c_ushort,
    pub map: XkbMapChangesRec,
    pub ctrls: XkbControlsChangesRec,
    pub indicators: XkbIndicatorChangesRec,
    pub names: XkbNameChangesRec,
    pub compat: XkbCompatChangesRec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbChanges"][::std::mem::size_of::<_XkbChanges>() - 88usize];
    ["Alignment of _XkbChanges"][::std::mem::align_of::<_XkbChanges>() - 8usize];
    ["Offset of field: _XkbChanges::device_spec"]
        [::std::mem::offset_of!(_XkbChanges, device_spec) - 0usize];
    ["Offset of field: _XkbChanges::state_changes"]
        [::std::mem::offset_of!(_XkbChanges, state_changes) - 2usize];
    ["Offset of field: _XkbChanges::map"][::std::mem::offset_of!(_XkbChanges, map) - 4usize];
    ["Offset of field: _XkbChanges::ctrls"][::std::mem::offset_of!(_XkbChanges, ctrls) - 28usize];
    ["Offset of field: _XkbChanges::indicators"]
        [::std::mem::offset_of!(_XkbChanges, indicators) - 40usize];
    ["Offset of field: _XkbChanges::names"][::std::mem::offset_of!(_XkbChanges, names) - 48usize];
    ["Offset of field: _XkbChanges::compat"][::std::mem::offset_of!(_XkbChanges, compat) - 80usize];
};
pub type XkbChangesRec = _XkbChanges;
pub type XkbChangesPtr = *mut _XkbChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbComponentNames {
    pub keymap: *mut ::std::os::raw::c_char,
    pub keycodes: *mut ::std::os::raw::c_char,
    pub types: *mut ::std::os::raw::c_char,
    pub compat: *mut ::std::os::raw::c_char,
    pub symbols: *mut ::std::os::raw::c_char,
    pub geometry: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbComponentNames"][::std::mem::size_of::<_XkbComponentNames>() - 48usize];
    ["Alignment of _XkbComponentNames"][::std::mem::align_of::<_XkbComponentNames>() - 8usize];
    ["Offset of field: _XkbComponentNames::keymap"]
        [::std::mem::offset_of!(_XkbComponentNames, keymap) - 0usize];
    ["Offset of field: _XkbComponentNames::keycodes"]
        [::std::mem::offset_of!(_XkbComponentNames, keycodes) - 8usize];
    ["Offset of field: _XkbComponentNames::types"]
        [::std::mem::offset_of!(_XkbComponentNames, types) - 16usize];
    ["Offset of field: _XkbComponentNames::compat"]
        [::std::mem::offset_of!(_XkbComponentNames, compat) - 24usize];
    ["Offset of field: _XkbComponentNames::symbols"]
        [::std::mem::offset_of!(_XkbComponentNames, symbols) - 32usize];
    ["Offset of field: _XkbComponentNames::geometry"]
        [::std::mem::offset_of!(_XkbComponentNames, geometry) - 40usize];
};
pub type XkbComponentNamesRec = _XkbComponentNames;
pub type XkbComponentNamesPtr = *mut _XkbComponentNames;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbComponentName {
    pub flags: ::std::os::raw::c_ushort,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbComponentName"][::std::mem::size_of::<_XkbComponentName>() - 16usize];
    ["Alignment of _XkbComponentName"][::std::mem::align_of::<_XkbComponentName>() - 8usize];
    ["Offset of field: _XkbComponentName::flags"]
        [::std::mem::offset_of!(_XkbComponentName, flags) - 0usize];
    ["Offset of field: _XkbComponentName::name"]
        [::std::mem::offset_of!(_XkbComponentName, name) - 8usize];
};
pub type XkbComponentNameRec = _XkbComponentName;
pub type XkbComponentNamePtr = *mut _XkbComponentName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbComponentList {
    pub num_keymaps: ::std::os::raw::c_int,
    pub num_keycodes: ::std::os::raw::c_int,
    pub num_types: ::std::os::raw::c_int,
    pub num_compat: ::std::os::raw::c_int,
    pub num_symbols: ::std::os::raw::c_int,
    pub num_geometry: ::std::os::raw::c_int,
    pub keymaps: XkbComponentNamePtr,
    pub keycodes: XkbComponentNamePtr,
    pub types: XkbComponentNamePtr,
    pub compat: XkbComponentNamePtr,
    pub symbols: XkbComponentNamePtr,
    pub geometry: XkbComponentNamePtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbComponentList"][::std::mem::size_of::<_XkbComponentList>() - 72usize];
    ["Alignment of _XkbComponentList"][::std::mem::align_of::<_XkbComponentList>() - 8usize];
    ["Offset of field: _XkbComponentList::num_keymaps"]
        [::std::mem::offset_of!(_XkbComponentList, num_keymaps) - 0usize];
    ["Offset of field: _XkbComponentList::num_keycodes"]
        [::std::mem::offset_of!(_XkbComponentList, num_keycodes) - 4usize];
    ["Offset of field: _XkbComponentList::num_types"]
        [::std::mem::offset_of!(_XkbComponentList, num_types) - 8usize];
    ["Offset of field: _XkbComponentList::num_compat"]
        [::std::mem::offset_of!(_XkbComponentList, num_compat) - 12usize];
    ["Offset of field: _XkbComponentList::num_symbols"]
        [::std::mem::offset_of!(_XkbComponentList, num_symbols) - 16usize];
    ["Offset of field: _XkbComponentList::num_geometry"]
        [::std::mem::offset_of!(_XkbComponentList, num_geometry) - 20usize];
    ["Offset of field: _XkbComponentList::keymaps"]
        [::std::mem::offset_of!(_XkbComponentList, keymaps) - 24usize];
    ["Offset of field: _XkbComponentList::keycodes"]
        [::std::mem::offset_of!(_XkbComponentList, keycodes) - 32usize];
    ["Offset of field: _XkbComponentList::types"]
        [::std::mem::offset_of!(_XkbComponentList, types) - 40usize];
    ["Offset of field: _XkbComponentList::compat"]
        [::std::mem::offset_of!(_XkbComponentList, compat) - 48usize];
    ["Offset of field: _XkbComponentList::symbols"]
        [::std::mem::offset_of!(_XkbComponentList, symbols) - 56usize];
    ["Offset of field: _XkbComponentList::geometry"]
        [::std::mem::offset_of!(_XkbComponentList, geometry) - 64usize];
};
pub type XkbComponentListRec = _XkbComponentList;
pub type XkbComponentListPtr = *mut _XkbComponentList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceLedInfo {
    pub led_class: ::std::os::raw::c_ushort,
    pub led_id: ::std::os::raw::c_ushort,
    pub phys_indicators: ::std::os::raw::c_uint,
    pub maps_present: ::std::os::raw::c_uint,
    pub names_present: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
    pub names: [Atom; 32usize],
    pub maps: [XkbIndicatorMapRec; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceLedInfo"][::std::mem::size_of::<_XkbDeviceLedInfo>() - 664usize];
    ["Alignment of _XkbDeviceLedInfo"][::std::mem::align_of::<_XkbDeviceLedInfo>() - 8usize];
    ["Offset of field: _XkbDeviceLedInfo::led_class"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, led_class) - 0usize];
    ["Offset of field: _XkbDeviceLedInfo::led_id"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, led_id) - 2usize];
    ["Offset of field: _XkbDeviceLedInfo::phys_indicators"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, phys_indicators) - 4usize];
    ["Offset of field: _XkbDeviceLedInfo::maps_present"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, maps_present) - 8usize];
    ["Offset of field: _XkbDeviceLedInfo::names_present"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, names_present) - 12usize];
    ["Offset of field: _XkbDeviceLedInfo::state"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, state) - 16usize];
    ["Offset of field: _XkbDeviceLedInfo::names"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, names) - 24usize];
    ["Offset of field: _XkbDeviceLedInfo::maps"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, maps) - 280usize];
};
pub type XkbDeviceLedInfoRec = _XkbDeviceLedInfo;
pub type XkbDeviceLedInfoPtr = *mut _XkbDeviceLedInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: Atom,
    pub device_spec: ::std::os::raw::c_ushort,
    pub has_own_state: ::std::os::raw::c_int,
    pub supported: ::std::os::raw::c_ushort,
    pub unsupported: ::std::os::raw::c_ushort,
    pub num_btns: ::std::os::raw::c_ushort,
    pub btn_acts: *mut XkbAction,
    pub sz_leds: ::std::os::raw::c_ushort,
    pub num_leds: ::std::os::raw::c_ushort,
    pub dflt_kbd_fb: ::std::os::raw::c_ushort,
    pub dflt_led_fb: ::std::os::raw::c_ushort,
    pub leds: XkbDeviceLedInfoPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceInfo"][::std::mem::size_of::<_XkbDeviceInfo>() - 56usize];
    ["Alignment of _XkbDeviceInfo"][::std::mem::align_of::<_XkbDeviceInfo>() - 8usize];
    ["Offset of field: _XkbDeviceInfo::name"]
        [::std::mem::offset_of!(_XkbDeviceInfo, name) - 0usize];
    ["Offset of field: _XkbDeviceInfo::type_"]
        [::std::mem::offset_of!(_XkbDeviceInfo, type_) - 8usize];
    ["Offset of field: _XkbDeviceInfo::device_spec"]
        [::std::mem::offset_of!(_XkbDeviceInfo, device_spec) - 16usize];
    ["Offset of field: _XkbDeviceInfo::has_own_state"]
        [::std::mem::offset_of!(_XkbDeviceInfo, has_own_state) - 20usize];
    ["Offset of field: _XkbDeviceInfo::supported"]
        [::std::mem::offset_of!(_XkbDeviceInfo, supported) - 24usize];
    ["Offset of field: _XkbDeviceInfo::unsupported"]
        [::std::mem::offset_of!(_XkbDeviceInfo, unsupported) - 26usize];
    ["Offset of field: _XkbDeviceInfo::num_btns"]
        [::std::mem::offset_of!(_XkbDeviceInfo, num_btns) - 28usize];
    ["Offset of field: _XkbDeviceInfo::btn_acts"]
        [::std::mem::offset_of!(_XkbDeviceInfo, btn_acts) - 32usize];
    ["Offset of field: _XkbDeviceInfo::sz_leds"]
        [::std::mem::offset_of!(_XkbDeviceInfo, sz_leds) - 40usize];
    ["Offset of field: _XkbDeviceInfo::num_leds"]
        [::std::mem::offset_of!(_XkbDeviceInfo, num_leds) - 42usize];
    ["Offset of field: _XkbDeviceInfo::dflt_kbd_fb"]
        [::std::mem::offset_of!(_XkbDeviceInfo, dflt_kbd_fb) - 44usize];
    ["Offset of field: _XkbDeviceInfo::dflt_led_fb"]
        [::std::mem::offset_of!(_XkbDeviceInfo, dflt_led_fb) - 46usize];
    ["Offset of field: _XkbDeviceInfo::leds"]
        [::std::mem::offset_of!(_XkbDeviceInfo, leds) - 48usize];
};
pub type XkbDeviceInfoRec = _XkbDeviceInfo;
pub type XkbDeviceInfoPtr = *mut _XkbDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceLedChanges {
    pub led_class: ::std::os::raw::c_ushort,
    pub led_id: ::std::os::raw::c_ushort,
    pub defined: ::std::os::raw::c_uint,
    pub next: *mut _XkbDeviceLedChanges,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceLedChanges"][::std::mem::size_of::<_XkbDeviceLedChanges>() - 16usize];
    ["Alignment of _XkbDeviceLedChanges"][::std::mem::align_of::<_XkbDeviceLedChanges>() - 8usize];
    ["Offset of field: _XkbDeviceLedChanges::led_class"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, led_class) - 0usize];
    ["Offset of field: _XkbDeviceLedChanges::led_id"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, led_id) - 2usize];
    ["Offset of field: _XkbDeviceLedChanges::defined"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, defined) - 4usize];
    ["Offset of field: _XkbDeviceLedChanges::next"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, next) - 8usize];
};
pub type XkbDeviceLedChangesRec = _XkbDeviceLedChanges;
pub type XkbDeviceLedChangesPtr = *mut _XkbDeviceLedChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceChanges {
    pub changed: ::std::os::raw::c_uint,
    pub first_btn: ::std::os::raw::c_ushort,
    pub num_btns: ::std::os::raw::c_ushort,
    pub leds: XkbDeviceLedChangesRec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceChanges"][::std::mem::size_of::<_XkbDeviceChanges>() - 24usize];
    ["Alignment of _XkbDeviceChanges"][::std::mem::align_of::<_XkbDeviceChanges>() - 8usize];
    ["Offset of field: _XkbDeviceChanges::changed"]
        [::std::mem::offset_of!(_XkbDeviceChanges, changed) - 0usize];
    ["Offset of field: _XkbDeviceChanges::first_btn"]
        [::std::mem::offset_of!(_XkbDeviceChanges, first_btn) - 4usize];
    ["Offset of field: _XkbDeviceChanges::num_btns"]
        [::std::mem::offset_of!(_XkbDeviceChanges, num_btns) - 6usize];
    ["Offset of field: _XkbDeviceChanges::leds"]
        [::std::mem::offset_of!(_XkbDeviceChanges, leds) - 8usize];
};
pub type XkbDeviceChangesRec = _XkbDeviceChanges;
pub type XkbDeviceChangesPtr = *mut _XkbDeviceChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbAnyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAnyEvent"][::std::mem::size_of::<_XkbAnyEvent>() - 48usize];
    ["Alignment of _XkbAnyEvent"][::std::mem::align_of::<_XkbAnyEvent>() - 8usize];
    ["Offset of field: _XkbAnyEvent::type_"][::std::mem::offset_of!(_XkbAnyEvent, type_) - 0usize];
    ["Offset of field: _XkbAnyEvent::serial"]
        [::std::mem::offset_of!(_XkbAnyEvent, serial) - 8usize];
    ["Offset of field: _XkbAnyEvent::send_event"]
        [::std::mem::offset_of!(_XkbAnyEvent, send_event) - 16usize];
    ["Offset of field: _XkbAnyEvent::display"]
        [::std::mem::offset_of!(_XkbAnyEvent, display) - 24usize];
    ["Offset of field: _XkbAnyEvent::time"][::std::mem::offset_of!(_XkbAnyEvent, time) - 32usize];
    ["Offset of field: _XkbAnyEvent::xkb_type"]
        [::std::mem::offset_of!(_XkbAnyEvent, xkb_type) - 40usize];
    ["Offset of field: _XkbAnyEvent::device"]
        [::std::mem::offset_of!(_XkbAnyEvent, device) - 44usize];
};
pub type XkbAnyEvent = _XkbAnyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNewKeyboardNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub old_device: ::std::os::raw::c_int,
    pub min_key_code: ::std::os::raw::c_int,
    pub max_key_code: ::std::os::raw::c_int,
    pub old_min_key_code: ::std::os::raw::c_int,
    pub old_max_key_code: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub req_major: ::std::os::raw::c_char,
    pub req_minor: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNewKeyboardNotify"][::std::mem::size_of::<_XkbNewKeyboardNotify>() - 80usize];
    ["Alignment of _XkbNewKeyboardNotify"]
        [::std::mem::align_of::<_XkbNewKeyboardNotify>() - 8usize];
    ["Offset of field: _XkbNewKeyboardNotify::type_"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, type_) - 0usize];
    ["Offset of field: _XkbNewKeyboardNotify::serial"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, serial) - 8usize];
    ["Offset of field: _XkbNewKeyboardNotify::send_event"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, send_event) - 16usize];
    ["Offset of field: _XkbNewKeyboardNotify::display"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, display) - 24usize];
    ["Offset of field: _XkbNewKeyboardNotify::time"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, time) - 32usize];
    ["Offset of field: _XkbNewKeyboardNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbNewKeyboardNotify::device"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, device) - 44usize];
    ["Offset of field: _XkbNewKeyboardNotify::old_device"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, old_device) - 48usize];
    ["Offset of field: _XkbNewKeyboardNotify::min_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, min_key_code) - 52usize];
    ["Offset of field: _XkbNewKeyboardNotify::max_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, max_key_code) - 56usize];
    ["Offset of field: _XkbNewKeyboardNotify::old_min_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, old_min_key_code) - 60usize];
    ["Offset of field: _XkbNewKeyboardNotify::old_max_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, old_max_key_code) - 64usize];
    ["Offset of field: _XkbNewKeyboardNotify::changed"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, changed) - 68usize];
    ["Offset of field: _XkbNewKeyboardNotify::req_major"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, req_major) - 72usize];
    ["Offset of field: _XkbNewKeyboardNotify::req_minor"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, req_minor) - 73usize];
};
pub type XkbNewKeyboardNotifyEvent = _XkbNewKeyboardNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMapNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub first_type: ::std::os::raw::c_int,
    pub num_types: ::std::os::raw::c_int,
    pub min_key_code: KeyCode,
    pub max_key_code: KeyCode,
    pub first_key_sym: KeyCode,
    pub first_key_act: KeyCode,
    pub first_key_behavior: KeyCode,
    pub first_key_explicit: KeyCode,
    pub first_modmap_key: KeyCode,
    pub first_vmodmap_key: KeyCode,
    pub num_key_syms: ::std::os::raw::c_int,
    pub num_key_acts: ::std::os::raw::c_int,
    pub num_key_behaviors: ::std::os::raw::c_int,
    pub num_key_explicit: ::std::os::raw::c_int,
    pub num_modmap_keys: ::std::os::raw::c_int,
    pub num_vmodmap_keys: ::std::os::raw::c_int,
    pub vmods: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMapNotifyEvent"][::std::mem::size_of::<_XkbMapNotifyEvent>() - 104usize];
    ["Alignment of _XkbMapNotifyEvent"][::std::mem::align_of::<_XkbMapNotifyEvent>() - 8usize];
    ["Offset of field: _XkbMapNotifyEvent::type_"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, type_) - 0usize];
    ["Offset of field: _XkbMapNotifyEvent::serial"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, serial) - 8usize];
    ["Offset of field: _XkbMapNotifyEvent::send_event"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, send_event) - 16usize];
    ["Offset of field: _XkbMapNotifyEvent::display"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, display) - 24usize];
    ["Offset of field: _XkbMapNotifyEvent::time"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, time) - 32usize];
    ["Offset of field: _XkbMapNotifyEvent::xkb_type"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, xkb_type) - 40usize];
    ["Offset of field: _XkbMapNotifyEvent::device"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, device) - 44usize];
    ["Offset of field: _XkbMapNotifyEvent::changed"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, changed) - 48usize];
    ["Offset of field: _XkbMapNotifyEvent::flags"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, flags) - 52usize];
    ["Offset of field: _XkbMapNotifyEvent::first_type"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_type) - 56usize];
    ["Offset of field: _XkbMapNotifyEvent::num_types"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_types) - 60usize];
    ["Offset of field: _XkbMapNotifyEvent::min_key_code"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, min_key_code) - 64usize];
    ["Offset of field: _XkbMapNotifyEvent::max_key_code"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, max_key_code) - 65usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_sym"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_sym) - 66usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_act"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_act) - 67usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_behavior"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_behavior) - 68usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_explicit"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_explicit) - 69usize];
    ["Offset of field: _XkbMapNotifyEvent::first_modmap_key"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_modmap_key) - 70usize];
    ["Offset of field: _XkbMapNotifyEvent::first_vmodmap_key"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_vmodmap_key) - 71usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_syms"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_syms) - 72usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_acts"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_acts) - 76usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_behaviors"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_behaviors) - 80usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_explicit"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_explicit) - 84usize];
    ["Offset of field: _XkbMapNotifyEvent::num_modmap_keys"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_modmap_keys) - 88usize];
    ["Offset of field: _XkbMapNotifyEvent::num_vmodmap_keys"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_vmodmap_keys) - 92usize];
    ["Offset of field: _XkbMapNotifyEvent::vmods"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, vmods) - 96usize];
};
pub type XkbMapNotifyEvent = _XkbMapNotifyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbStateNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub group: ::std::os::raw::c_int,
    pub base_group: ::std::os::raw::c_int,
    pub latched_group: ::std::os::raw::c_int,
    pub locked_group: ::std::os::raw::c_int,
    pub mods: ::std::os::raw::c_uint,
    pub base_mods: ::std::os::raw::c_uint,
    pub latched_mods: ::std::os::raw::c_uint,
    pub locked_mods: ::std::os::raw::c_uint,
    pub compat_state: ::std::os::raw::c_int,
    pub grab_mods: ::std::os::raw::c_uchar,
    pub compat_grab_mods: ::std::os::raw::c_uchar,
    pub lookup_mods: ::std::os::raw::c_uchar,
    pub compat_lookup_mods: ::std::os::raw::c_uchar,
    pub ptr_buttons: ::std::os::raw::c_int,
    pub keycode: KeyCode,
    pub event_type: ::std::os::raw::c_char,
    pub req_major: ::std::os::raw::c_char,
    pub req_minor: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbStateNotifyEvent"][::std::mem::size_of::<_XkbStateNotifyEvent>() - 104usize];
    ["Alignment of _XkbStateNotifyEvent"][::std::mem::align_of::<_XkbStateNotifyEvent>() - 8usize];
    ["Offset of field: _XkbStateNotifyEvent::type_"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, type_) - 0usize];
    ["Offset of field: _XkbStateNotifyEvent::serial"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, serial) - 8usize];
    ["Offset of field: _XkbStateNotifyEvent::send_event"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, send_event) - 16usize];
    ["Offset of field: _XkbStateNotifyEvent::display"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, display) - 24usize];
    ["Offset of field: _XkbStateNotifyEvent::time"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, time) - 32usize];
    ["Offset of field: _XkbStateNotifyEvent::xkb_type"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, xkb_type) - 40usize];
    ["Offset of field: _XkbStateNotifyEvent::device"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, device) - 44usize];
    ["Offset of field: _XkbStateNotifyEvent::changed"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, changed) - 48usize];
    ["Offset of field: _XkbStateNotifyEvent::group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, group) - 52usize];
    ["Offset of field: _XkbStateNotifyEvent::base_group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, base_group) - 56usize];
    ["Offset of field: _XkbStateNotifyEvent::latched_group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, latched_group) - 60usize];
    ["Offset of field: _XkbStateNotifyEvent::locked_group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, locked_group) - 64usize];
    ["Offset of field: _XkbStateNotifyEvent::mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, mods) - 68usize];
    ["Offset of field: _XkbStateNotifyEvent::base_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, base_mods) - 72usize];
    ["Offset of field: _XkbStateNotifyEvent::latched_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, latched_mods) - 76usize];
    ["Offset of field: _XkbStateNotifyEvent::locked_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, locked_mods) - 80usize];
    ["Offset of field: _XkbStateNotifyEvent::compat_state"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, compat_state) - 84usize];
    ["Offset of field: _XkbStateNotifyEvent::grab_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, grab_mods) - 88usize];
    ["Offset of field: _XkbStateNotifyEvent::compat_grab_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, compat_grab_mods) - 89usize];
    ["Offset of field: _XkbStateNotifyEvent::lookup_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, lookup_mods) - 90usize];
    ["Offset of field: _XkbStateNotifyEvent::compat_lookup_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, compat_lookup_mods) - 91usize];
    ["Offset of field: _XkbStateNotifyEvent::ptr_buttons"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, ptr_buttons) - 92usize];
    ["Offset of field: _XkbStateNotifyEvent::keycode"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, keycode) - 96usize];
    ["Offset of field: _XkbStateNotifyEvent::event_type"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, event_type) - 97usize];
    ["Offset of field: _XkbStateNotifyEvent::req_major"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, req_major) - 98usize];
    ["Offset of field: _XkbStateNotifyEvent::req_minor"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, req_minor) - 99usize];
};
pub type XkbStateNotifyEvent = _XkbStateNotifyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbControlsNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed_ctrls: ::std::os::raw::c_uint,
    pub enabled_ctrls: ::std::os::raw::c_uint,
    pub enabled_ctrl_changes: ::std::os::raw::c_uint,
    pub num_groups: ::std::os::raw::c_int,
    pub keycode: KeyCode,
    pub event_type: ::std::os::raw::c_char,
    pub req_major: ::std::os::raw::c_char,
    pub req_minor: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbControlsNotify"][::std::mem::size_of::<_XkbControlsNotify>() - 72usize];
    ["Alignment of _XkbControlsNotify"][::std::mem::align_of::<_XkbControlsNotify>() - 8usize];
    ["Offset of field: _XkbControlsNotify::type_"]
        [::std::mem::offset_of!(_XkbControlsNotify, type_) - 0usize];
    ["Offset of field: _XkbControlsNotify::serial"]
        [::std::mem::offset_of!(_XkbControlsNotify, serial) - 8usize];
    ["Offset of field: _XkbControlsNotify::send_event"]
        [::std::mem::offset_of!(_XkbControlsNotify, send_event) - 16usize];
    ["Offset of field: _XkbControlsNotify::display"]
        [::std::mem::offset_of!(_XkbControlsNotify, display) - 24usize];
    ["Offset of field: _XkbControlsNotify::time"]
        [::std::mem::offset_of!(_XkbControlsNotify, time) - 32usize];
    ["Offset of field: _XkbControlsNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbControlsNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbControlsNotify::device"]
        [::std::mem::offset_of!(_XkbControlsNotify, device) - 44usize];
    ["Offset of field: _XkbControlsNotify::changed_ctrls"]
        [::std::mem::offset_of!(_XkbControlsNotify, changed_ctrls) - 48usize];
    ["Offset of field: _XkbControlsNotify::enabled_ctrls"]
        [::std::mem::offset_of!(_XkbControlsNotify, enabled_ctrls) - 52usize];
    ["Offset of field: _XkbControlsNotify::enabled_ctrl_changes"]
        [::std::mem::offset_of!(_XkbControlsNotify, enabled_ctrl_changes) - 56usize];
    ["Offset of field: _XkbControlsNotify::num_groups"]
        [::std::mem::offset_of!(_XkbControlsNotify, num_groups) - 60usize];
    ["Offset of field: _XkbControlsNotify::keycode"]
        [::std::mem::offset_of!(_XkbControlsNotify, keycode) - 64usize];
    ["Offset of field: _XkbControlsNotify::event_type"]
        [::std::mem::offset_of!(_XkbControlsNotify, event_type) - 65usize];
    ["Offset of field: _XkbControlsNotify::req_major"]
        [::std::mem::offset_of!(_XkbControlsNotify, req_major) - 66usize];
    ["Offset of field: _XkbControlsNotify::req_minor"]
        [::std::mem::offset_of!(_XkbControlsNotify, req_minor) - 67usize];
};
pub type XkbControlsNotifyEvent = _XkbControlsNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorNotify"][::std::mem::size_of::<_XkbIndicatorNotify>() - 56usize];
    ["Alignment of _XkbIndicatorNotify"][::std::mem::align_of::<_XkbIndicatorNotify>() - 8usize];
    ["Offset of field: _XkbIndicatorNotify::type_"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, type_) - 0usize];
    ["Offset of field: _XkbIndicatorNotify::serial"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, serial) - 8usize];
    ["Offset of field: _XkbIndicatorNotify::send_event"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, send_event) - 16usize];
    ["Offset of field: _XkbIndicatorNotify::display"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, display) - 24usize];
    ["Offset of field: _XkbIndicatorNotify::time"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, time) - 32usize];
    ["Offset of field: _XkbIndicatorNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbIndicatorNotify::device"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, device) - 44usize];
    ["Offset of field: _XkbIndicatorNotify::changed"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, changed) - 48usize];
    ["Offset of field: _XkbIndicatorNotify::state"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, state) - 52usize];
};
pub type XkbIndicatorNotifyEvent = _XkbIndicatorNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNamesNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub first_type: ::std::os::raw::c_int,
    pub num_types: ::std::os::raw::c_int,
    pub first_lvl: ::std::os::raw::c_int,
    pub num_lvls: ::std::os::raw::c_int,
    pub num_aliases: ::std::os::raw::c_int,
    pub num_radio_groups: ::std::os::raw::c_int,
    pub changed_vmods: ::std::os::raw::c_uint,
    pub changed_groups: ::std::os::raw::c_uint,
    pub changed_indicators: ::std::os::raw::c_uint,
    pub first_key: ::std::os::raw::c_int,
    pub num_keys: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNamesNotify"][::std::mem::size_of::<_XkbNamesNotify>() - 96usize];
    ["Alignment of _XkbNamesNotify"][::std::mem::align_of::<_XkbNamesNotify>() - 8usize];
    ["Offset of field: _XkbNamesNotify::type_"]
        [::std::mem::offset_of!(_XkbNamesNotify, type_) - 0usize];
    ["Offset of field: _XkbNamesNotify::serial"]
        [::std::mem::offset_of!(_XkbNamesNotify, serial) - 8usize];
    ["Offset of field: _XkbNamesNotify::send_event"]
        [::std::mem::offset_of!(_XkbNamesNotify, send_event) - 16usize];
    ["Offset of field: _XkbNamesNotify::display"]
        [::std::mem::offset_of!(_XkbNamesNotify, display) - 24usize];
    ["Offset of field: _XkbNamesNotify::time"]
        [::std::mem::offset_of!(_XkbNamesNotify, time) - 32usize];
    ["Offset of field: _XkbNamesNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbNamesNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbNamesNotify::device"]
        [::std::mem::offset_of!(_XkbNamesNotify, device) - 44usize];
    ["Offset of field: _XkbNamesNotify::changed"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed) - 48usize];
    ["Offset of field: _XkbNamesNotify::first_type"]
        [::std::mem::offset_of!(_XkbNamesNotify, first_type) - 52usize];
    ["Offset of field: _XkbNamesNotify::num_types"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_types) - 56usize];
    ["Offset of field: _XkbNamesNotify::first_lvl"]
        [::std::mem::offset_of!(_XkbNamesNotify, first_lvl) - 60usize];
    ["Offset of field: _XkbNamesNotify::num_lvls"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_lvls) - 64usize];
    ["Offset of field: _XkbNamesNotify::num_aliases"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_aliases) - 68usize];
    ["Offset of field: _XkbNamesNotify::num_radio_groups"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_radio_groups) - 72usize];
    ["Offset of field: _XkbNamesNotify::changed_vmods"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed_vmods) - 76usize];
    ["Offset of field: _XkbNamesNotify::changed_groups"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed_groups) - 80usize];
    ["Offset of field: _XkbNamesNotify::changed_indicators"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed_indicators) - 84usize];
    ["Offset of field: _XkbNamesNotify::first_key"]
        [::std::mem::offset_of!(_XkbNamesNotify, first_key) - 88usize];
    ["Offset of field: _XkbNamesNotify::num_keys"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_keys) - 92usize];
};
pub type XkbNamesNotifyEvent = _XkbNamesNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCompatMapNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed_groups: ::std::os::raw::c_uint,
    pub first_si: ::std::os::raw::c_int,
    pub num_si: ::std::os::raw::c_int,
    pub num_total_si: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCompatMapNotify"][::std::mem::size_of::<_XkbCompatMapNotify>() - 64usize];
    ["Alignment of _XkbCompatMapNotify"][::std::mem::align_of::<_XkbCompatMapNotify>() - 8usize];
    ["Offset of field: _XkbCompatMapNotify::type_"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, type_) - 0usize];
    ["Offset of field: _XkbCompatMapNotify::serial"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, serial) - 8usize];
    ["Offset of field: _XkbCompatMapNotify::send_event"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, send_event) - 16usize];
    ["Offset of field: _XkbCompatMapNotify::display"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, display) - 24usize];
    ["Offset of field: _XkbCompatMapNotify::time"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, time) - 32usize];
    ["Offset of field: _XkbCompatMapNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbCompatMapNotify::device"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, device) - 44usize];
    ["Offset of field: _XkbCompatMapNotify::changed_groups"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, changed_groups) - 48usize];
    ["Offset of field: _XkbCompatMapNotify::first_si"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, first_si) - 52usize];
    ["Offset of field: _XkbCompatMapNotify::num_si"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, num_si) - 56usize];
    ["Offset of field: _XkbCompatMapNotify::num_total_si"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, num_total_si) - 60usize];
};
pub type XkbCompatMapNotifyEvent = _XkbCompatMapNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbBellNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub bell_class: ::std::os::raw::c_int,
    pub bell_id: ::std::os::raw::c_int,
    pub name: Atom,
    pub window: Window,
    pub event_only: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbBellNotify"][::std::mem::size_of::<_XkbBellNotify>() - 96usize];
    ["Alignment of _XkbBellNotify"][::std::mem::align_of::<_XkbBellNotify>() - 8usize];
    ["Offset of field: _XkbBellNotify::type_"]
        [::std::mem::offset_of!(_XkbBellNotify, type_) - 0usize];
    ["Offset of field: _XkbBellNotify::serial"]
        [::std::mem::offset_of!(_XkbBellNotify, serial) - 8usize];
    ["Offset of field: _XkbBellNotify::send_event"]
        [::std::mem::offset_of!(_XkbBellNotify, send_event) - 16usize];
    ["Offset of field: _XkbBellNotify::display"]
        [::std::mem::offset_of!(_XkbBellNotify, display) - 24usize];
    ["Offset of field: _XkbBellNotify::time"]
        [::std::mem::offset_of!(_XkbBellNotify, time) - 32usize];
    ["Offset of field: _XkbBellNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbBellNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbBellNotify::device"]
        [::std::mem::offset_of!(_XkbBellNotify, device) - 44usize];
    ["Offset of field: _XkbBellNotify::percent"]
        [::std::mem::offset_of!(_XkbBellNotify, percent) - 48usize];
    ["Offset of field: _XkbBellNotify::pitch"]
        [::std::mem::offset_of!(_XkbBellNotify, pitch) - 52usize];
    ["Offset of field: _XkbBellNotify::duration"]
        [::std::mem::offset_of!(_XkbBellNotify, duration) - 56usize];
    ["Offset of field: _XkbBellNotify::bell_class"]
        [::std::mem::offset_of!(_XkbBellNotify, bell_class) - 60usize];
    ["Offset of field: _XkbBellNotify::bell_id"]
        [::std::mem::offset_of!(_XkbBellNotify, bell_id) - 64usize];
    ["Offset of field: _XkbBellNotify::name"]
        [::std::mem::offset_of!(_XkbBellNotify, name) - 72usize];
    ["Offset of field: _XkbBellNotify::window"]
        [::std::mem::offset_of!(_XkbBellNotify, window) - 80usize];
    ["Offset of field: _XkbBellNotify::event_only"]
        [::std::mem::offset_of!(_XkbBellNotify, event_only) - 88usize];
};
pub type XkbBellNotifyEvent = _XkbBellNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbActionMessage {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub keycode: KeyCode,
    pub press: ::std::os::raw::c_int,
    pub key_event_follows: ::std::os::raw::c_int,
    pub group: ::std::os::raw::c_int,
    pub mods: ::std::os::raw::c_uint,
    pub message: [::std::os::raw::c_char; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbActionMessage"][::std::mem::size_of::<_XkbActionMessage>() - 80usize];
    ["Alignment of _XkbActionMessage"][::std::mem::align_of::<_XkbActionMessage>() - 8usize];
    ["Offset of field: _XkbActionMessage::type_"]
        [::std::mem::offset_of!(_XkbActionMessage, type_) - 0usize];
    ["Offset of field: _XkbActionMessage::serial"]
        [::std::mem::offset_of!(_XkbActionMessage, serial) - 8usize];
    ["Offset of field: _XkbActionMessage::send_event"]
        [::std::mem::offset_of!(_XkbActionMessage, send_event) - 16usize];
    ["Offset of field: _XkbActionMessage::display"]
        [::std::mem::offset_of!(_XkbActionMessage, display) - 24usize];
    ["Offset of field: _XkbActionMessage::time"]
        [::std::mem::offset_of!(_XkbActionMessage, time) - 32usize];
    ["Offset of field: _XkbActionMessage::xkb_type"]
        [::std::mem::offset_of!(_XkbActionMessage, xkb_type) - 40usize];
    ["Offset of field: _XkbActionMessage::device"]
        [::std::mem::offset_of!(_XkbActionMessage, device) - 44usize];
    ["Offset of field: _XkbActionMessage::keycode"]
        [::std::mem::offset_of!(_XkbActionMessage, keycode) - 48usize];
    ["Offset of field: _XkbActionMessage::press"]
        [::std::mem::offset_of!(_XkbActionMessage, press) - 52usize];
    ["Offset of field: _XkbActionMessage::key_event_follows"]
        [::std::mem::offset_of!(_XkbActionMessage, key_event_follows) - 56usize];
    ["Offset of field: _XkbActionMessage::group"]
        [::std::mem::offset_of!(_XkbActionMessage, group) - 60usize];
    ["Offset of field: _XkbActionMessage::mods"]
        [::std::mem::offset_of!(_XkbActionMessage, mods) - 64usize];
    ["Offset of field: _XkbActionMessage::message"]
        [::std::mem::offset_of!(_XkbActionMessage, message) - 68usize];
};
pub type XkbActionMessageEvent = _XkbActionMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbAccessXNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub keycode: ::std::os::raw::c_int,
    pub sk_delay: ::std::os::raw::c_int,
    pub debounce_delay: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAccessXNotify"][::std::mem::size_of::<_XkbAccessXNotify>() - 64usize];
    ["Alignment of _XkbAccessXNotify"][::std::mem::align_of::<_XkbAccessXNotify>() - 8usize];
    ["Offset of field: _XkbAccessXNotify::type_"]
        [::std::mem::offset_of!(_XkbAccessXNotify, type_) - 0usize];
    ["Offset of field: _XkbAccessXNotify::serial"]
        [::std::mem::offset_of!(_XkbAccessXNotify, serial) - 8usize];
    ["Offset of field: _XkbAccessXNotify::send_event"]
        [::std::mem::offset_of!(_XkbAccessXNotify, send_event) - 16usize];
    ["Offset of field: _XkbAccessXNotify::display"]
        [::std::mem::offset_of!(_XkbAccessXNotify, display) - 24usize];
    ["Offset of field: _XkbAccessXNotify::time"]
        [::std::mem::offset_of!(_XkbAccessXNotify, time) - 32usize];
    ["Offset of field: _XkbAccessXNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbAccessXNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbAccessXNotify::device"]
        [::std::mem::offset_of!(_XkbAccessXNotify, device) - 44usize];
    ["Offset of field: _XkbAccessXNotify::detail"]
        [::std::mem::offset_of!(_XkbAccessXNotify, detail) - 48usize];
    ["Offset of field: _XkbAccessXNotify::keycode"]
        [::std::mem::offset_of!(_XkbAccessXNotify, keycode) - 52usize];
    ["Offset of field: _XkbAccessXNotify::sk_delay"]
        [::std::mem::offset_of!(_XkbAccessXNotify, sk_delay) - 56usize];
    ["Offset of field: _XkbAccessXNotify::debounce_delay"]
        [::std::mem::offset_of!(_XkbAccessXNotify, debounce_delay) - 60usize];
};
pub type XkbAccessXNotifyEvent = _XkbAccessXNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbExtensionDeviceNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub reason: ::std::os::raw::c_uint,
    pub supported: ::std::os::raw::c_uint,
    pub unsupported: ::std::os::raw::c_uint,
    pub first_btn: ::std::os::raw::c_int,
    pub num_btns: ::std::os::raw::c_int,
    pub leds_defined: ::std::os::raw::c_uint,
    pub led_state: ::std::os::raw::c_uint,
    pub led_class: ::std::os::raw::c_int,
    pub led_id: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbExtensionDeviceNotify"]
        [::std::mem::size_of::<_XkbExtensionDeviceNotify>() - 88usize];
    ["Alignment of _XkbExtensionDeviceNotify"]
        [::std::mem::align_of::<_XkbExtensionDeviceNotify>() - 8usize];
    ["Offset of field: _XkbExtensionDeviceNotify::type_"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, type_) - 0usize];
    ["Offset of field: _XkbExtensionDeviceNotify::serial"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, serial) - 8usize];
    ["Offset of field: _XkbExtensionDeviceNotify::send_event"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, send_event) - 16usize];
    ["Offset of field: _XkbExtensionDeviceNotify::display"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, display) - 24usize];
    ["Offset of field: _XkbExtensionDeviceNotify::time"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, time) - 32usize];
    ["Offset of field: _XkbExtensionDeviceNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbExtensionDeviceNotify::device"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, device) - 44usize];
    ["Offset of field: _XkbExtensionDeviceNotify::reason"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, reason) - 48usize];
    ["Offset of field: _XkbExtensionDeviceNotify::supported"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, supported) - 52usize];
    ["Offset of field: _XkbExtensionDeviceNotify::unsupported"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, unsupported) - 56usize];
    ["Offset of field: _XkbExtensionDeviceNotify::first_btn"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, first_btn) - 60usize];
    ["Offset of field: _XkbExtensionDeviceNotify::num_btns"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, num_btns) - 64usize];
    ["Offset of field: _XkbExtensionDeviceNotify::leds_defined"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, leds_defined) - 68usize];
    ["Offset of field: _XkbExtensionDeviceNotify::led_state"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, led_state) - 72usize];
    ["Offset of field: _XkbExtensionDeviceNotify::led_class"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, led_class) - 76usize];
    ["Offset of field: _XkbExtensionDeviceNotify::led_id"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, led_id) - 80usize];
};
pub type XkbExtensionDeviceNotifyEvent = _XkbExtensionDeviceNotify;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XkbEvent {
    pub type_: ::std::os::raw::c_int,
    pub any: XkbAnyEvent,
    pub new_kbd: XkbNewKeyboardNotifyEvent,
    pub map: XkbMapNotifyEvent,
    pub state: XkbStateNotifyEvent,
    pub ctrls: XkbControlsNotifyEvent,
    pub indicators: XkbIndicatorNotifyEvent,
    pub names: XkbNamesNotifyEvent,
    pub compat: XkbCompatMapNotifyEvent,
    pub bell: XkbBellNotifyEvent,
    pub message: XkbActionMessageEvent,
    pub accessx: XkbAccessXNotifyEvent,
    pub device: XkbExtensionDeviceNotifyEvent,
    pub core: XEvent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbEvent"][::std::mem::size_of::<_XkbEvent>() - 192usize];
    ["Alignment of _XkbEvent"][::std::mem::align_of::<_XkbEvent>() - 8usize];
    ["Offset of field: _XkbEvent::type_"][::std::mem::offset_of!(_XkbEvent, type_) - 0usize];
    ["Offset of field: _XkbEvent::any"][::std::mem::offset_of!(_XkbEvent, any) - 0usize];
    ["Offset of field: _XkbEvent::new_kbd"][::std::mem::offset_of!(_XkbEvent, new_kbd) - 0usize];
    ["Offset of field: _XkbEvent::map"][::std::mem::offset_of!(_XkbEvent, map) - 0usize];
    ["Offset of field: _XkbEvent::state"][::std::mem::offset_of!(_XkbEvent, state) - 0usize];
    ["Offset of field: _XkbEvent::ctrls"][::std::mem::offset_of!(_XkbEvent, ctrls) - 0usize];
    ["Offset of field: _XkbEvent::indicators"]
        [::std::mem::offset_of!(_XkbEvent, indicators) - 0usize];
    ["Offset of field: _XkbEvent::names"][::std::mem::offset_of!(_XkbEvent, names) - 0usize];
    ["Offset of field: _XkbEvent::compat"][::std::mem::offset_of!(_XkbEvent, compat) - 0usize];
    ["Offset of field: _XkbEvent::bell"][::std::mem::offset_of!(_XkbEvent, bell) - 0usize];
    ["Offset of field: _XkbEvent::message"][::std::mem::offset_of!(_XkbEvent, message) - 0usize];
    ["Offset of field: _XkbEvent::accessx"][::std::mem::offset_of!(_XkbEvent, accessx) - 0usize];
    ["Offset of field: _XkbEvent::device"][::std::mem::offset_of!(_XkbEvent, device) - 0usize];
    ["Offset of field: _XkbEvent::core"][::std::mem::offset_of!(_XkbEvent, core) - 0usize];
};
pub type XkbEvent = _XkbEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKbdDpyState {
    _unused: [u8; 0],
}
pub type XkbKbdDpyStateRec = _XkbKbdDpyState;
pub type XkbKbdDpyStatePtr = *mut _XkbKbdDpyState;
extern "C" {
    pub fn XkbIgnoreExtension(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbOpenDisplay(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> *mut Display;
}
extern "C" {
    pub fn XkbQueryExtension(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbUseExtension(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbLibraryVersion(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetXlibControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn XkbGetXlibControls(arg1: *mut Display) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn XkbXlibControlsImplemented() -> ::std::os::raw::c_uint;
}
pub type XkbInternAtomFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> Atom,
>;
pub type XkbGetAtomNameFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Display, arg2: Atom) -> *mut ::std::os::raw::c_char,
>;
extern "C" {
    pub fn XkbSetAtomFuncs(arg1: XkbInternAtomFunc, arg2: XkbGetAtomNameFunc);
}
extern "C" {
    pub fn XkbKeycodeToKeysym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> KeySym;
}
extern "C" {
    pub fn XkbKeysymToModifiers(arg1: *mut Display, arg2: KeySym) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn XkbLookupKeySym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut KeySym,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbLookupKeyBinding(
        arg1: *mut Display,
        arg2: KeySym,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbTranslateKeyCode(
        arg1: XkbDescPtr,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut KeySym,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbTranslateKeySym(
        arg1: *mut Display,
        arg2: *mut KeySym,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetAutoRepeatRate(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetAutoRepeatRate(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbChangeEnabledControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbDeviceBell(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbForceDeviceBell(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbDeviceBellEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbBell(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbForceBell(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbBellEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSelectEvents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSelectEventDetails(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbNoteMapChanges(
        arg1: XkbMapChangesPtr,
        arg2: *mut XkbMapNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XkbNoteNameChanges(
        arg1: XkbNameChangesPtr,
        arg2: *mut XkbNamesNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XkbGetIndicatorState(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetDeviceIndicatorState(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetIndicatorMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetIndicatorMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetNamedIndicator(
        arg1: *mut Display,
        arg2: Atom,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: XkbIndicatorMapPtr,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetNamedDeviceIndicator(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: Atom,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: XkbIndicatorMapPtr,
        arg9: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetNamedIndicator(
        arg1: *mut Display,
        arg2: Atom,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: XkbIndicatorMapPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetNamedDeviceIndicator(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: Atom,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: XkbIndicatorMapPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbLockModifiers(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbLatchModifiers(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbLockGroup(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbLatchGroup(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetServerInternalMods(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetIgnoreLockMods(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbVirtualModsToReal(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbComputeEffectiveMap(
        arg1: XkbDescPtr,
        arg2: XkbKeyTypePtr,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbInitCanonicalKeyTypes(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbAllocKeyboard() -> XkbDescPtr;
}
extern "C" {
    pub fn XkbFreeKeyboard(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbAllocClientMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbAllocServerMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbFreeClientMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbFreeServerMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbAddKeyType(
        arg1: XkbDescPtr,
        arg2: Atom,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> XkbKeyTypePtr;
}
extern "C" {
    pub fn XkbAllocIndicatorMaps(arg1: XkbDescPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbFreeIndicatorMaps(arg1: XkbDescPtr);
}
extern "C" {
    pub fn XkbGetMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDescPtr;
}
extern "C" {
    pub fn XkbGetUpdatedMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetMapChanges(
        arg1: *mut Display,
        arg2: XkbDescPtr,
        arg3: XkbMapChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbRefreshKeyboardMapping(arg1: *mut XkbMapNotifyEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeyTypes(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeySyms(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeyActions(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeyBehaviors(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetVirtualMods(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeyExplicitComponents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeyModifierMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetKeyVirtualModMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbAllocControls(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbFreeControls(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbGetControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbNoteControlsChanges(
        arg1: XkbControlsChangesPtr,
        arg2: *mut XkbControlsNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XkbAllocCompatMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbFreeCompatMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbGetCompatMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetCompatMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbAddSymInterpret(
        arg1: XkbDescPtr,
        arg2: XkbSymInterpretPtr,
        arg3: ::std::os::raw::c_int,
        arg4: XkbChangesPtr,
    ) -> XkbSymInterpretPtr;
}
extern "C" {
    pub fn XkbAllocNames(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetNames(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetNames(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbChangeNames(
        arg1: *mut Display,
        arg2: XkbDescPtr,
        arg3: XkbNameChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbFreeNames(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbGetState(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbStatePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbChangeMap(
        arg1: *mut Display,
        arg2: XkbDescPtr,
        arg3: XkbMapChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetDetectableAutoRepeat(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetDetectableAutoRepeat(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetAutoResetControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetAutoResetControls(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetPerClientControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetPerClientControls(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbCopyKeyType(arg1: XkbKeyTypePtr, arg2: XkbKeyTypePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbCopyKeyTypes(
        arg1: XkbKeyTypePtr,
        arg2: XkbKeyTypePtr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbResizeKeyType(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbResizeKeySyms(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
extern "C" {
    pub fn XkbResizeKeyActions(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XkbAction;
}
extern "C" {
    pub fn XkbChangeTypesOfKey(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_int,
        arg6: XkbMapChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbChangeKeycodeRange(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbListComponents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbComponentNamesPtr,
        arg4: *mut ::std::os::raw::c_int,
    ) -> XkbComponentListPtr;
}
extern "C" {
    pub fn XkbFreeComponentList(arg1: XkbComponentListPtr);
}
extern "C" {
    pub fn XkbGetKeyboard(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDescPtr;
}
extern "C" {
    pub fn XkbGetKeyboardByName(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbComponentNamesPtr,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_int,
    ) -> XkbDescPtr;
}
extern "C" {
    pub fn XkbKeyTypesForCoreSymbols(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: *mut KeySym,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut KeySym,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbApplyCompatMapToKey(
        arg1: XkbDescPtr,
        arg2: KeyCode,
        arg3: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbUpdateMapFromCore(
        arg1: XkbDescPtr,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbAddDeviceLedInfo(
        arg1: XkbDeviceInfoPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDeviceLedInfoPtr;
}
extern "C" {
    pub fn XkbResizeDeviceButtonActions(
        arg1: XkbDeviceInfoPtr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbAllocDeviceInfo(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDeviceInfoPtr;
}
extern "C" {
    pub fn XkbFreeDeviceInfo(
        arg1: XkbDeviceInfoPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XkbNoteDeviceChanges(
        arg1: XkbDeviceChangesPtr,
        arg2: *mut XkbExtensionDeviceNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn XkbGetDeviceInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> XkbDeviceInfoPtr;
}
extern "C" {
    pub fn XkbGetDeviceInfoChanges(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: XkbDeviceChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetDeviceButtonActions(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbGetDeviceLedInfo(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetDeviceInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDeviceInfoPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbChangeDeviceInfo(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: XkbDeviceChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetDeviceLedInfo(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbSetDeviceButtonActions(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbToControl(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn XkbSetDebuggingFlags(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbApplyVirtualModChanges(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbUpdateActionVirtualMods(
        arg1: XkbDescPtr,
        arg2: *mut XkbAction,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XkbUpdateKeyTypeVirtualMods(
        arg1: XkbDescPtr,
        arg2: XkbKeyTypePtr,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbChangesPtr,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
